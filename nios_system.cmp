	component nios_system is
		port (
			HEX4_from_the_HEX7_HEX4                : out   std_logic_vector(6 downto 0);                     -- HEX4
			HEX5_from_the_HEX7_HEX4                : out   std_logic_vector(6 downto 0);                     -- HEX5
			HEX6_from_the_HEX7_HEX4                : out   std_logic_vector(6 downto 0);                     -- HEX6
			HEX7_from_the_HEX7_HEX4                : out   std_logic_vector(6 downto 0);                     -- HEX7
			SRAM_DQ_to_and_from_the_SRAM           : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DQ
			SRAM_ADDR_from_the_SRAM                : out   std_logic_vector(19 downto 0);                    -- ADDR
			SRAM_LB_N_from_the_SRAM                : out   std_logic;                                        -- LB_N
			SRAM_UB_N_from_the_SRAM                : out   std_logic;                                        -- UB_N
			SRAM_CE_N_from_the_SRAM                : out   std_logic;                                        -- CE_N
			SRAM_OE_N_from_the_SRAM                : out   std_logic;                                        -- OE_N
			SRAM_WE_N_from_the_SRAM                : out   std_logic;                                        -- WE_N
			LCD_DATA_to_and_from_the_Char_LCD_16x2 : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- DATA
			LCD_ON_from_the_Char_LCD_16x2          : out   std_logic;                                        -- ON
			LCD_BLON_from_the_Char_LCD_16x2        : out   std_logic;                                        -- BLON
			LCD_EN_from_the_Char_LCD_16x2          : out   std_logic;                                        -- EN
			LCD_RS_from_the_Char_LCD_16x2          : out   std_logic;                                        -- RS
			LCD_RW_from_the_Char_LCD_16x2          : out   std_logic;                                        -- RW
			sys_clk                                : out   std_logic;                                        -- clk
			UART_RXD_to_the_Serial_Port            : in    std_logic                     := 'X';             -- RXD
			UART_TXD_from_the_Serial_Port          : out   std_logic;                                        -- TXD
			LEDR_from_the_Red_LEDs                 : out   std_logic_vector(17 downto 0);                    -- export
			reset_n                                : in    std_logic                     := 'X';             -- reset_n
			zs_addr_from_the_SDRAM                 : out   std_logic_vector(12 downto 0);                    -- addr
			zs_ba_from_the_SDRAM                   : out   std_logic_vector(1 downto 0);                     -- ba
			zs_cas_n_from_the_SDRAM                : out   std_logic;                                        -- cas_n
			zs_cke_from_the_SDRAM                  : out   std_logic;                                        -- cke
			zs_cs_n_from_the_SDRAM                 : out   std_logic;                                        -- cs_n
			zs_dq_to_and_from_the_SDRAM            : inout std_logic_vector(31 downto 0) := (others => 'X'); -- dq
			zs_dqm_from_the_SDRAM                  : out   std_logic_vector(3 downto 0);                     -- dqm
			zs_ras_n_from_the_SDRAM                : out   std_logic;                                        -- ras_n
			zs_we_n_from_the_SDRAM                 : out   std_logic;                                        -- we_n
			GPIO_to_and_from_the_Expansion_JP5     : inout std_logic_vector(31 downto 0) := (others => 'X'); -- export
			LEDG_from_the_Green_LEDs               : out   std_logic_vector(8 downto 0);                     -- export
			SW_to_the_Slider_Switches              : in    std_logic_vector(17 downto 0) := (others => 'X'); -- export
			KEY_to_the_Pushbuttons                 : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- export
			clk                                    : in    std_logic                     := 'X';             -- clk
			HEX0_from_the_HEX3_HEX0                : out   std_logic_vector(6 downto 0);                     -- HEX0
			HEX1_from_the_HEX3_HEX0                : out   std_logic_vector(6 downto 0);                     -- HEX1
			HEX2_from_the_HEX3_HEX0                : out   std_logic_vector(6 downto 0);                     -- HEX2
			HEX3_from_the_HEX3_HEX0                : out   std_logic_vector(6 downto 0);                     -- HEX3
			clk_27                                 : in    std_logic                     := 'X';             -- clk
			audio_clk                              : out   std_logic;                                        -- clk
			sdram_clk                              : out   std_logic;                                        -- clk
			irda_TXD                               : out   std_logic;                                        -- TXD
			irda_RXD                               : in    std_logic                     := 'X';             -- RXD
			sdcard_b_SD_cmd                        : inout std_logic                     := 'X';             -- b_SD_cmd
			sdcard_b_SD_dat                        : inout std_logic                     := 'X';             -- b_SD_dat
			sdcard_b_SD_dat3                       : inout std_logic                     := 'X';             -- b_SD_dat3
			sdcard_o_SD_clock                      : out   std_logic;                                        -- o_SD_clock
			flash_ADDR                             : out   std_logic_vector(22 downto 0);                    -- ADDR
			flash_CE_N                             : out   std_logic;                                        -- CE_N
			flash_OE_N                             : out   std_logic;                                        -- OE_N
			flash_WE_N                             : out   std_logic;                                        -- WE_N
			flash_RST_N                            : out   std_logic;                                        -- RST_N
			flash_DQ                               : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- DQ
			usb_INT1                               : in    std_logic                     := 'X';             -- INT1
			usb_DATA                               : inout std_logic_vector(15 downto 0) := (others => 'X'); -- DATA
			usb_RST_N                              : out   std_logic;                                        -- RST_N
			usb_ADDR                               : out   std_logic_vector(1 downto 0);                     -- ADDR
			usb_CS_N                               : out   std_logic;                                        -- CS_N
			usb_RD_N                               : out   std_logic;                                        -- RD_N
			usb_WR_N                               : out   std_logic;                                        -- WR_N
			usb_INT0                               : in    std_logic                     := 'X';             -- INT0
			pio1_out_in_port                       : in    std_logic_vector(15 downto 0) := (others => 'X'); -- in_port
			pio1_out_out_port                      : out   std_logic_vector(15 downto 0);                    -- out_port
			pio2_out_in_port                       : in    std_logic_vector(15 downto 0) := (others => 'X'); -- in_port
			pio2_out_out_port                      : out   std_logic_vector(15 downto 0);                    -- out_port
			pio3_out_in_port                       : in    std_logic_vector(7 downto 0)  := (others => 'X'); -- in_port
			pio3_out_out_port                      : out   std_logic_vector(7 downto 0)                      -- out_port
		);
	end component nios_system;

