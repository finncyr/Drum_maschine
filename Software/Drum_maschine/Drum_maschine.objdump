
Drum_maschine.elf:     file format elf32-littlenios2
Drum_maschine.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00002e54 memsz 0x00002e54 flags r-x
    LOAD off    0x00003e74 vaddr 0x00002e74 paddr 0x0000461c align 2**12
         filesz 0x000017a8 memsz 0x000017a8 flags rw-
    LOAD off    0x00005dc4 vaddr 0x00005dc4 paddr 0x00005dc4 align 2**12
         filesz 0x00000000 memsz 0x000002b0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002be8  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000d4  00002da0  00002da0  00003da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000017a8  00002e74  0000461c  00003e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b0  00005dc4  00005dc4  00005dc4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000561c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000578  00000000  00000000  00005648  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000095a  00000000  00000000  00005bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000a895  00000000  00000000  0000651a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000027e1  00000000  00000000  00010daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006a81  00000000  00000000  00013590  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a70  00000000  00000000  0001a014  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c84  00000000  00000000  0001aa84  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000011ec  00000000  00000000  0001b708  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001c8f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  0001c908  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001e892  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0001e895  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001e898  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001e899  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001e89a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001e89e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001e8a2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0001e8a6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0001e8af  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0001e8b8  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0001e8c1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000060  00000000  00000000  0001e8cc  2**0
                  CONTENTS, READONLY
 29 .jdi          00004aa8  00000000  00000000  0001e92c  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00072a53  00000000  00000000  000233d4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00002da0 l    d  .rodata	00000000 .rodata
00002e74 l    d  .rwdata	00000000 .rwdata
00005dc4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 count_binary.c
000045dc l     O .rwdata	00000004 gcdResult.1669
000045e0 l     O .rwdata	00000004 op2.1668
000045e4 l     O .rwdata	00000004 op1.1667
00000268 l     F .text	000000ac task1_isr
00002da0 l     O .rodata	00000010 Hex2Segm7.1705
000045e8 l     O .rwdata	00000008 oldtime.1733
00005dc4 l     O .bss	00000004 count.1745
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000598 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000924 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00002e74 l     O .rwdata	00001060 JTAG_UART
00003ed4 l     O .rwdata	0000002c Expansion_JP5
00003f00 l     O .rwdata	0000002c Green_LEDs
00003f2c l     O .rwdata	0000002c HEX3_HEX0
00003f58 l     O .rwdata	0000002c HEX7_HEX4
00003f84 l     O .rwdata	0000002c Pushbuttons
00003fb0 l     O .rwdata	0000002c Red_LEDs
00003fdc l     O .rwdata	0000002c Slider_Switches
00004008 l     O .rwdata	0000002c Serial_Port
00000c90 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000ec8 l     F .text	0000022c altera_avalon_jtag_uart_irq
000010f4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001770 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00001e58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001ed4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001fb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000218c l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000022dc l     F .text	000000f8 alt_file_locked
00002560 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000041dc l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00002b50 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002d3c l     F .text	00000040 alt_sim_halt
00000990 g     F .text	0000006c alt_main
00005de4 g     O .bss	00000100 alt_irq
0000461c g       *ABS*	00000000 __flash_rwdata_start
00001aa0 g     F .text	00000090 alt_up_rs232_read_fd
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005de0 g     O .bss	00000004 errno
00005dd0 g     O .bss	00000004 alt_argv
0000c5dc g       *ABS*	00000000 _gp
0000405c g     O .rwdata	00000180 alt_fd_list
000020dc g     F .text	00000094 alt_find_dev
00002908 g     F .text	000000a0 memcpy
00002264 g     F .text	00000078 alt_io_redirect
00002da0 g       *ABS*	00000000 __DTOR_END__
00001a2c g     F .text	00000074 alt_up_rs232_read_data
0000130c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000006d4 g     F .text	00000008 __udivsi3
0000460c g     O .rwdata	00000004 alt_max_fd
00001994 g     F .text	00000050 alt_up_rs232_check_parity
000006e4 g     F .text	000001c0 alt_irq_register
00004618 g     O .rwdata	00000004 _global_impure_ptr
00006074 g       *ABS*	00000000 __bss_end
00000a94 g     F .text	0000010c alt_tick
000009fc g     F .text	00000098 alt_alarm_stop
00005dc8 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000cc alt_irq_handler
00004034 g     O .rwdata	00000028 alt_dev_null
00001eb8 g     F .text	0000001c alt_dcache_flush_all
0000461c g       *ABS*	00000000 __ram_rwdata_end
00004604 g     O .rwdata	00000008 alt_dev_list
00002e74 g       *ABS*	00000000 __ram_rodata_end
00001b30 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000006dc g     F .text	00000008 __umodsi3
00006074 g       *ABS*	00000000 end
00000e10 g     F .text	000000b8 altera_avalon_jtag_uart_init
00002d9c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
000017e4 g     F .text	00000088 alt_avalon_timer_sc_init
00001530 g     F .text	00000240 altera_avalon_jtag_uart_write
00002b54 g     F .text	000001b0 __call_exitprocs
000001b8 g     F .text	0000003c _start
0000049c g     F .text	0000007c task2
00005dd8 g     O .bss	00000004 _alt_tick_rate
00005ddc g     O .bss	00000004 _alt_nticks
00000bd4 g     F .text	000000bc alt_sys_init
00002a1c g     F .text	00000134 __register_exitproc
00001954 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
000011a4 g     F .text	00000074 altera_avalon_jtag_uart_close
00002d04 g     F .text	00000038 __mulsi3
00002e74 g       *ABS*	00000000 __ram_rwdata_start
00002da0 g       *ABS*	00000000 __ram_rodata_start
00000cc8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00002778 g     F .text	000000d0 alt_get_fd
00002894 g     F .text	00000074 memcmp
00000d78 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00006074 g       *ABS*	00000000 __alt_stack_base
00000dc0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000018c0 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00002658 g     F .text	00000120 alt_find_file
00001f00 g     F .text	000000b4 alt_dev_llist_insert
00005dc4 g       *ABS*	00000000 __bss_start
00000558 g     F .text	00000040 main
00005dd4 g     O .bss	00000004 alt_envp
00000d20 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00005ee4 g     O .bss	00000190 _atexit0
00004610 g     O .rwdata	00000004 alt_errno
00000614 g     F .text	00000060 __divsi3
00002da0 g       *ABS*	00000000 __CTOR_END__
00002da0 g       *ABS*	00000000 __flash_rodata_start
00002da0 g       *ABS*	00000000 __DTOR_LIST__
00001bc4 g     F .text	00000040 alt_up_rs232_open_dev
00000ba0 g     F .text	00000034 alt_irq_init
000025c0 g     F .text	00000078 alt_release_fd
00002848 g     F .text	00000014 atexit
00000314 g     F .text	00000080 clockCnt
00004614 g     O .rwdata	00000004 _impure_ptr
00005dcc g     O .bss	00000004 alt_argc
00002078 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
000045fc g     O .rwdata	00000008 alt_fs_list
0000186c g     F .text	00000054 alt_up_rs232_enable_read_interrupt
000019e4 g     F .text	00000048 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000394 g     F .text	00000108 displayTime
0000461c g       *ABS*	00000000 _edata
00006074 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00001218 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00002638 g     F .text	00000020 altera_nios2_qsys_irq_init
0000285c g     F .text	00000038 exit
00000674 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002d7c g     F .text	00000020 _exit
00001c04 g     F .text	00000154 alt_alarm_start
000001f4 g     F .text	00000074 gcd
000029a8 g     F .text	00000074 strlen
000023d4 g     F .text	0000018c open
00002170 g     F .text	0000001c alt_icache_flush_all
000045f0 g     O .rwdata	00000004 alt_priority_mask
00000518 g     F .text	00000040 task3
000045f4 g     O .rwdata	00000008 alt_alarm_list
00002014 g     F .text	00000064 _do_ctors
09000000 g       *ABS*	00000000 __alt_mem_Onchip_memory
00001918 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00001d58 g     F .text	00000100 close
000008a4 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406e14 	ori	at,at,440
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18d77904 	addi	r3,r3,24036
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18d77904 	addi	r3,r3,24036
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c4:	d6b17714 	ori	gp,gp,50652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	10977114 	ori	r2,r2,24004

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18d81d14 	ori	r3,r3,24692

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00008a40 	call	8a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00009900 	call	990 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <gcd>:
// Defining Types for integer. This generally improves readability
// uint32 is mapped on Altera's alt_u32 type
typedef alt_u32 uint32;
typedef alt_u8 uint8;
// Hoare Algorithmus for General common divisor
uint32 gcd(uint32 op1, uint32 op2) {
     1f4:	defffd04 	addi	sp,sp,-12
     1f8:	df000215 	stw	fp,8(sp)
     1fc:	df000204 	addi	fp,sp,8
     200:	e13ffe15 	stw	r4,-8(fp)
     204:	e17fff15 	stw	r5,-4(fp)
	while (op1 != op2) {
     208:	00000f06 	br	248 <gcd+0x54>
		while (op1 < op2) op2 -= op1;
     20c:	e0bfff17 	ldw	r2,-4(fp)
     210:	e0fffe17 	ldw	r3,-8(fp)
     214:	10c5c83a 	sub	r2,r2,r3
     218:	e0bfff15 	stw	r2,-4(fp)
     21c:	e0fffe17 	ldw	r3,-8(fp)
     220:	e0bfff17 	ldw	r2,-4(fp)
     224:	18bff936 	bltu	r3,r2,20c <gcd+0x18>
		while (op2 < op1) op1 -= op2;
     228:	00000406 	br	23c <gcd+0x48>
     22c:	e0bffe17 	ldw	r2,-8(fp)
     230:	e0ffff17 	ldw	r3,-4(fp)
     234:	10c5c83a 	sub	r2,r2,r3
     238:	e0bffe15 	stw	r2,-8(fp)
     23c:	e0ffff17 	ldw	r3,-4(fp)
     240:	e0bffe17 	ldw	r2,-8(fp)
     244:	18bff936 	bltu	r3,r2,22c <gcd+0x38>
// uint32 is mapped on Altera's alt_u32 type
typedef alt_u32 uint32;
typedef alt_u8 uint8;
// Hoare Algorithmus for General common divisor
uint32 gcd(uint32 op1, uint32 op2) {
	while (op1 != op2) {
     248:	e0fffe17 	ldw	r3,-8(fp)
     24c:	e0bfff17 	ldw	r2,-4(fp)
     250:	18bff21e 	bne	r3,r2,21c <gcd+0x28>
		while (op1 < op2) op2 -= op1;
		while (op2 < op1) op1 -= op2;
	}
	return op1;
     254:	e0bffe17 	ldw	r2,-8(fp)
}
     258:	e037883a 	mov	sp,fp
     25c:	df000017 	ldw	fp,0(sp)
     260:	dec00104 	addi	sp,sp,4
     264:	f800283a 	ret

00000268 <task1_isr>:

// Interrupt service routine for task1
static void task1_isr(void *context, unsigned int id) {
     268:	defffb04 	addi	sp,sp,-20
     26c:	dfc00415 	stw	ra,16(sp)
     270:	df000315 	stw	fp,12(sp)
     274:	df000304 	addi	fp,sp,12
     278:	e13ffe15 	stw	r4,-8(fp)
     27c:	e17fff15 	stw	r5,-4(fp)
	static uint32 op1 = 1;
	static uint32 op2 = 1;
	static uint32 gcdResult = 1;
	alt_u32 keyVal;
	keyVal = IORD_ALT_UP_PARALLEL_PORT_EDGE_CAPTURE(PUSHBUTTONS_BASE);;
     280:	00840034 	movhi	r2,4096
     284:	10801704 	addi	r2,r2,92
     288:	10800037 	ldwio	r2,0(r2)
     28c:	e0bffd15 	stw	r2,-12(fp)
	if ((keyVal&(1<<2))!= 0) // key2 pressed
     290:	e0bffd17 	ldw	r2,-12(fp)
     294:	1080010c 	andi	r2,r2,4
     298:	1005003a 	cmpeq	r2,r2,zero
     29c:	1000051e 	bne	r2,zero,2b4 <task1_isr+0x4c>
		op2 = IORD_ALT_UP_PARALLEL_PORT_DATA(SLIDER_SWITCHES_BASE);
     2a0:	00840034 	movhi	r2,4096
     2a4:	10801004 	addi	r2,r2,64
     2a8:	10800037 	ldwio	r2,0(r2)
     2ac:	d0a00115 	stw	r2,-32764(gp)
     2b0:	00000806 	br	2d4 <task1_isr+0x6c>
	else if ((keyVal&(1<<1))!= 0) // key1 pressed
     2b4:	e0bffd17 	ldw	r2,-12(fp)
     2b8:	1080008c 	andi	r2,r2,2
     2bc:	1005003a 	cmpeq	r2,r2,zero
     2c0:	1000041e 	bne	r2,zero,2d4 <task1_isr+0x6c>
		op1 = IORD_ALT_UP_PARALLEL_PORT_DATA(SLIDER_SWITCHES_BASE);
     2c4:	00840034 	movhi	r2,4096
     2c8:	10801004 	addi	r2,r2,64
     2cc:	10800037 	ldwio	r2,0(r2)
     2d0:	d0a00215 	stw	r2,-32760(gp)
	gcdResult = gcd(op1, op2);
     2d4:	d1200217 	ldw	r4,-32760(gp)
     2d8:	d1600117 	ldw	r5,-32764(gp)
     2dc:	00001f40 	call	1f4 <gcd>
     2e0:	d0a00015 	stw	r2,-32768(gp)
	IOWR_ALT_UP_PARALLEL_PORT_DATA(RED_LEDS_BASE, gcdResult);
     2e4:	d0a00017 	ldw	r2,-32768(gp)
     2e8:	1007883a 	mov	r3,r2
     2ec:	00840034 	movhi	r2,4096
     2f0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALT_UP_PARALLEL_PORT_EDGE_CAPTURE(PUSHBUTTONS_BASE, 0);
     2f4:	00840034 	movhi	r2,4096
     2f8:	10801704 	addi	r2,r2,92
     2fc:	10000035 	stwio	zero,0(r2)
}
     300:	e037883a 	mov	sp,fp
     304:	dfc00117 	ldw	ra,4(sp)
     308:	df000017 	ldw	fp,0(sp)
     30c:	dec00204 	addi	sp,sp,8
     310:	f800283a 	ret

00000314 <clockCnt>:
 * The clock function is based on the system timer which runs
 * with a pregiven frequency given by the HAL function alt_ticks_per_second()
 * This function counts the ticks and increments the time constants appropriately
 *
 */
void clockCnt(Time_t *time){
     314:	defffc04 	addi	sp,sp,-16
     318:	dfc00315 	stw	ra,12(sp)
     31c:	df000215 	stw	fp,8(sp)
     320:	df000204 	addi	fp,sp,8
     324:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     328:	00800034 	movhi	r2,0
     32c:	10977704 	addi	r2,r2,24028
     330:	10800017 	ldw	r2,0(r2)
     334:	1009883a 	mov	r4,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     338:	00800034 	movhi	r2,0
     33c:	10977604 	addi	r2,r2,24024
     340:	10800017 	ldw	r2,0(r2)
     344:	100b883a 	mov	r5,r2
	uint32 secs;
	secs = alt_nticks()/alt_ticks_per_second();
     348:	00006d40 	call	6d4 <__udivsi3>
     34c:	e0bffe15 	stw	r2,-8(fp)
	time->min = secs/60;
     350:	e13ffe17 	ldw	r4,-8(fp)
     354:	01400f04 	movi	r5,60
     358:	00006d40 	call	6d4 <__udivsi3>
     35c:	1007883a 	mov	r3,r2
     360:	e0bfff17 	ldw	r2,-4(fp)
     364:	10c00015 	stw	r3,0(r2)
	time->sec = secs%60;
     368:	e13ffe17 	ldw	r4,-8(fp)
     36c:	01400f04 	movi	r5,60
     370:	00006dc0 	call	6dc <__umodsi3>
     374:	1007883a 	mov	r3,r2
     378:	e0bfff17 	ldw	r2,-4(fp)
     37c:	10c00115 	stw	r3,4(r2)
}
     380:	e037883a 	mov	sp,fp
     384:	dfc00117 	ldw	ra,4(sp)
     388:	df000017 	ldw	fp,0(sp)
     38c:	dec00204 	addi	sp,sp,8
     390:	f800283a 	ret

00000394 <displayTime>:

// function to display the time
void displayTime(Time_t time) {
     394:	defff704 	addi	sp,sp,-36
     398:	dfc00815 	stw	ra,32(sp)
     39c:	df000715 	stw	fp,28(sp)
     3a0:	df000704 	addi	fp,sp,28
     3a4:	e13ffe15 	stw	r4,-8(fp)
     3a8:	e17fff15 	stw	r5,-4(fp)
	static const unsigned char Hex2Segm7[16] =
	    {0x3f,0x6,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x58,0x5e,0x79,0x71};
	uint32 m2, m1, s2, s1, hexd;
	m2 = Hex2Segm7[(time.min/10)%16];
     3ac:	e13ffe17 	ldw	r4,-8(fp)
     3b0:	01400284 	movi	r5,10
     3b4:	00006d40 	call	6d4 <__udivsi3>
     3b8:	10c003cc 	andi	r3,r2,15
     3bc:	00800034 	movhi	r2,0
     3c0:	108b6804 	addi	r2,r2,11680
     3c4:	10c5883a 	add	r2,r2,r3
     3c8:	10800003 	ldbu	r2,0(r2)
     3cc:	10803fcc 	andi	r2,r2,255
     3d0:	e0bffd15 	stw	r2,-12(fp)
	m1 = Hex2Segm7[(time.min%10)];
     3d4:	e13ffe17 	ldw	r4,-8(fp)
     3d8:	01400284 	movi	r5,10
     3dc:	00006dc0 	call	6dc <__umodsi3>
     3e0:	1007883a 	mov	r3,r2
     3e4:	00800034 	movhi	r2,0
     3e8:	108b6804 	addi	r2,r2,11680
     3ec:	10c5883a 	add	r2,r2,r3
     3f0:	10800003 	ldbu	r2,0(r2)
     3f4:	10803fcc 	andi	r2,r2,255
     3f8:	e0bffc15 	stw	r2,-16(fp)
	s2 = Hex2Segm7[(time.sec/10)];
     3fc:	e13fff17 	ldw	r4,-4(fp)
     400:	01400284 	movi	r5,10
     404:	00006d40 	call	6d4 <__udivsi3>
     408:	1007883a 	mov	r3,r2
     40c:	00800034 	movhi	r2,0
     410:	108b6804 	addi	r2,r2,11680
     414:	10c5883a 	add	r2,r2,r3
     418:	10800003 	ldbu	r2,0(r2)
     41c:	10803fcc 	andi	r2,r2,255
     420:	e0bffb15 	stw	r2,-20(fp)
	s1 = Hex2Segm7[(time.sec%10)];
     424:	e13fff17 	ldw	r4,-4(fp)
     428:	01400284 	movi	r5,10
     42c:	00006dc0 	call	6dc <__umodsi3>
     430:	1007883a 	mov	r3,r2
     434:	00800034 	movhi	r2,0
     438:	108b6804 	addi	r2,r2,11680
     43c:	10c5883a 	add	r2,r2,r3
     440:	10800003 	ldbu	r2,0(r2)
     444:	10803fcc 	andi	r2,r2,255
     448:	e0bffa15 	stw	r2,-24(fp)
	hexd = (m2<<24)+(m1<<16)+(s2<<8)+s1;
     44c:	e0bffd17 	ldw	r2,-12(fp)
     450:	1006963a 	slli	r3,r2,24
     454:	e0bffc17 	ldw	r2,-16(fp)
     458:	1004943a 	slli	r2,r2,16
     45c:	1887883a 	add	r3,r3,r2
     460:	e0bffb17 	ldw	r2,-20(fp)
     464:	1004923a 	slli	r2,r2,8
     468:	1887883a 	add	r3,r3,r2
     46c:	e0bffa17 	ldw	r2,-24(fp)
     470:	1885883a 	add	r2,r3,r2
     474:	e0bff915 	stw	r2,-28(fp)
	IOWR_ALT_UP_PARALLEL_PORT_DATA(HEX7_HEX4_BASE, hexd);
     478:	e0fff917 	ldw	r3,-28(fp)
     47c:	00840034 	movhi	r2,4096
     480:	10800c04 	addi	r2,r2,48
     484:	10c00035 	stwio	r3,0(r2)
}
     488:	e037883a 	mov	sp,fp
     48c:	dfc00117 	ldw	ra,4(sp)
     490:	df000017 	ldw	fp,0(sp)
     494:	dec00204 	addi	sp,sp,8
     498:	f800283a 	ret

0000049c <task2>:

void task2(){
     49c:	defffc04 	addi	sp,sp,-16
     4a0:	dfc00315 	stw	ra,12(sp)
     4a4:	df000215 	stw	fp,8(sp)
     4a8:	df000204 	addi	fp,sp,8
	Time_t time;
	static Time_t oldtime = {0,10};
	clockCnt(&time);
     4ac:	e13ffe04 	addi	r4,fp,-8
     4b0:	00003140 	call	314 <clockCnt>
	if ((time.min!=oldtime.min)||(time.sec!=oldtime.sec)) {
     4b4:	e0fffe17 	ldw	r3,-8(fp)
     4b8:	d0a00317 	ldw	r2,-32756(gp)
     4bc:	1880051e 	bne	r3,r2,4d4 <task2+0x38>
     4c0:	e0bfff17 	ldw	r2,-4(fp)
     4c4:	00c00034 	movhi	r3,0
     4c8:	18d17b04 	addi	r3,r3,17900
     4cc:	18c00017 	ldw	r3,0(r3)
     4d0:	10c00926 	beq	r2,r3,4f8 <task2+0x5c>
		  displayTime(time);
     4d4:	e13ffe17 	ldw	r4,-8(fp)
     4d8:	e17fff17 	ldw	r5,-4(fp)
     4dc:	00003940 	call	394 <displayTime>
		  oldtime.min = time.min;
     4e0:	e0bffe17 	ldw	r2,-8(fp)
     4e4:	d0a00315 	stw	r2,-32756(gp)
		  oldtime.sec = time.sec;
     4e8:	e0ffff17 	ldw	r3,-4(fp)
     4ec:	00800034 	movhi	r2,0
     4f0:	10917b04 	addi	r2,r2,17900
     4f4:	10c00015 	stw	r3,0(r2)
	}
	displayTime(time);
     4f8:	e13ffe17 	ldw	r4,-8(fp)
     4fc:	e17fff17 	ldw	r5,-4(fp)
     500:	00003940 	call	394 <displayTime>
}
     504:	e037883a 	mov	sp,fp
     508:	dfc00117 	ldw	ra,4(sp)
     50c:	df000017 	ldw	fp,0(sp)
     510:	dec00204 	addi	sp,sp,8
     514:	f800283a 	ret

00000518 <task3>:

// Task 3: idle task
void task3() {
     518:	deffff04 	addi	sp,sp,-4
     51c:	df000015 	stw	fp,0(sp)
     520:	d839883a 	mov	fp,sp
	static uint32 count = 0;
	count++;
     524:	d0a5fa17 	ldw	r2,-26648(gp)
     528:	10800044 	addi	r2,r2,1
     52c:	d0a5fa15 	stw	r2,-26648(gp)
	IOWR_ALT_UP_PARALLEL_PORT_DATA(GREEN_LEDS_BASE, count>>16);
     530:	d0a5fa17 	ldw	r2,-26648(gp)
     534:	1004d43a 	srli	r2,r2,16
     538:	1007883a 	mov	r3,r2
     53c:	00840034 	movhi	r2,4096
     540:	10800404 	addi	r2,r2,16
     544:	10c00035 	stwio	r3,0(r2)
}
     548:	e037883a 	mov	sp,fp
     54c:	df000017 	ldw	fp,0(sp)
     550:	dec00104 	addi	sp,sp,4
     554:	f800283a 	ret

00000558 <main>:
//    calling task1 and task2
// 		reading the operands,
// 		calling gcd
// 		displaying the result
//    calling and displaying the clock
int main() {
     558:	defffe04 	addi	sp,sp,-8
     55c:	dfc00115 	stw	ra,4(sp)
     560:	df000015 	stw	fp,0(sp)
     564:	d839883a 	mov	fp,sp
	// Starting task 1 by registering and allowing interrupt from keys
    alt_irq_register(
     568:	01800034 	movhi	r6,0
     56c:	31809a04 	addi	r6,r6,616
     570:	01000044 	movi	r4,1
     574:	000b883a 	mov	r5,zero
     578:	00006e40 	call	6e4 <alt_irq_register>
    		PUSHBUTTONS_IRQ,        // IRQ number, provided in system.h
    		(void *)0,               // no communication needed with ISR
    		(void *)task1_isr);     // the Interrupt service routine
    IOWR_ALT_UP_PARALLEL_PORT_INTERRUPT_MASK(PUSHBUTTONS_BASE, 0x6);
     57c:	00c40034 	movhi	r3,4096
     580:	18c01604 	addi	r3,r3,88
     584:	00800184 	movi	r2,6
     588:	18800035 	stwio	r2,0(r3)
                                    // Interrupt allowed from key1,2
	while (1) { // endless loop, typical for a embedded program
		// Task 1 runs already
		// Task 2
		task2();
     58c:	000049c0 	call	49c <task2>
		task3();
     590:	00005180 	call	518 <task3>
	}
     594:	003ffd06 	br	58c <main+0x34>

00000598 <udivmodsi4>:
     598:	29001b2e 	bgeu	r5,r4,608 <udivmodsi4+0x70>
     59c:	28001a16 	blt	r5,zero,608 <udivmodsi4+0x70>
     5a0:	00800044 	movi	r2,1
     5a4:	0007883a 	mov	r3,zero
     5a8:	01c007c4 	movi	r7,31
     5ac:	00000306 	br	5bc <udivmodsi4+0x24>
     5b0:	19c01326 	beq	r3,r7,600 <udivmodsi4+0x68>
     5b4:	18c00044 	addi	r3,r3,1
     5b8:	28000416 	blt	r5,zero,5cc <udivmodsi4+0x34>
     5bc:	294b883a 	add	r5,r5,r5
     5c0:	1085883a 	add	r2,r2,r2
     5c4:	293ffa36 	bltu	r5,r4,5b0 <udivmodsi4+0x18>
     5c8:	10000d26 	beq	r2,zero,600 <udivmodsi4+0x68>
     5cc:	0007883a 	mov	r3,zero
     5d0:	21400236 	bltu	r4,r5,5dc <udivmodsi4+0x44>
     5d4:	2149c83a 	sub	r4,r4,r5
     5d8:	1886b03a 	or	r3,r3,r2
     5dc:	1004d07a 	srli	r2,r2,1
     5e0:	280ad07a 	srli	r5,r5,1
     5e4:	103ffa1e 	bne	r2,zero,5d0 <udivmodsi4+0x38>
     5e8:	30000226 	beq	r6,zero,5f4 <udivmodsi4+0x5c>
     5ec:	2005883a 	mov	r2,r4
     5f0:	f800283a 	ret
     5f4:	1809883a 	mov	r4,r3
     5f8:	2005883a 	mov	r2,r4
     5fc:	f800283a 	ret
     600:	0007883a 	mov	r3,zero
     604:	003ff806 	br	5e8 <udivmodsi4+0x50>
     608:	00800044 	movi	r2,1
     60c:	0007883a 	mov	r3,zero
     610:	003fef06 	br	5d0 <udivmodsi4+0x38>

00000614 <__divsi3>:
     614:	defffe04 	addi	sp,sp,-8
     618:	dc000015 	stw	r16,0(sp)
     61c:	dfc00115 	stw	ra,4(sp)
     620:	0021883a 	mov	r16,zero
     624:	20000c16 	blt	r4,zero,658 <__divsi3+0x44>
     628:	000d883a 	mov	r6,zero
     62c:	28000e16 	blt	r5,zero,668 <__divsi3+0x54>
     630:	00005980 	call	598 <udivmodsi4>
     634:	1007883a 	mov	r3,r2
     638:	8005003a 	cmpeq	r2,r16,zero
     63c:	1000011e 	bne	r2,zero,644 <__divsi3+0x30>
     640:	00c7c83a 	sub	r3,zero,r3
     644:	1805883a 	mov	r2,r3
     648:	dfc00117 	ldw	ra,4(sp)
     64c:	dc000017 	ldw	r16,0(sp)
     650:	dec00204 	addi	sp,sp,8
     654:	f800283a 	ret
     658:	0109c83a 	sub	r4,zero,r4
     65c:	04000044 	movi	r16,1
     660:	000d883a 	mov	r6,zero
     664:	283ff20e 	bge	r5,zero,630 <__divsi3+0x1c>
     668:	014bc83a 	sub	r5,zero,r5
     66c:	8021003a 	cmpeq	r16,r16,zero
     670:	003fef06 	br	630 <__divsi3+0x1c>

00000674 <__modsi3>:
     674:	deffff04 	addi	sp,sp,-4
     678:	dfc00015 	stw	ra,0(sp)
     67c:	01800044 	movi	r6,1
     680:	2807883a 	mov	r3,r5
     684:	20000416 	blt	r4,zero,698 <__modsi3+0x24>
     688:	28000c16 	blt	r5,zero,6bc <__modsi3+0x48>
     68c:	dfc00017 	ldw	ra,0(sp)
     690:	dec00104 	addi	sp,sp,4
     694:	00005981 	jmpi	598 <udivmodsi4>
     698:	0109c83a 	sub	r4,zero,r4
     69c:	28000b16 	blt	r5,zero,6cc <__modsi3+0x58>
     6a0:	180b883a 	mov	r5,r3
     6a4:	01800044 	movi	r6,1
     6a8:	00005980 	call	598 <udivmodsi4>
     6ac:	0085c83a 	sub	r2,zero,r2
     6b0:	dfc00017 	ldw	ra,0(sp)
     6b4:	dec00104 	addi	sp,sp,4
     6b8:	f800283a 	ret
     6bc:	014bc83a 	sub	r5,zero,r5
     6c0:	dfc00017 	ldw	ra,0(sp)
     6c4:	dec00104 	addi	sp,sp,4
     6c8:	00005981 	jmpi	598 <udivmodsi4>
     6cc:	0147c83a 	sub	r3,zero,r5
     6d0:	003ff306 	br	6a0 <__modsi3+0x2c>

000006d4 <__udivsi3>:
     6d4:	000d883a 	mov	r6,zero
     6d8:	00005981 	jmpi	598 <udivmodsi4>

000006dc <__umodsi3>:
     6dc:	01800044 	movi	r6,1
     6e0:	00005981 	jmpi	598 <udivmodsi4>

000006e4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
     6e4:	deffef04 	addi	sp,sp,-68
     6e8:	df001015 	stw	fp,64(sp)
     6ec:	df001004 	addi	fp,sp,64
     6f0:	e13ffc15 	stw	r4,-16(fp)
     6f4:	e17ffd15 	stw	r5,-12(fp)
     6f8:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
     6fc:	00bffa84 	movi	r2,-22
     700:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
     704:	e0bffc17 	ldw	r2,-16(fp)
     708:	10800828 	cmpgeui	r2,r2,32
     70c:	1000601e 	bne	r2,zero,890 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     710:	0005303a 	rdctl	r2,status
     714:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     718:	e0fff917 	ldw	r3,-28(fp)
     71c:	00bfff84 	movi	r2,-2
     720:	1884703a 	and	r2,r3,r2
     724:	1001703a 	wrctl	status,r2
  
  return context;
     728:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
     72c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
     730:	e0bffc17 	ldw	r2,-16(fp)
     734:	00c00034 	movhi	r3,0
     738:	18d77904 	addi	r3,r3,24036
     73c:	100490fa 	slli	r2,r2,3
     740:	10c7883a 	add	r3,r2,r3
     744:	e0bffe17 	ldw	r2,-8(fp)
     748:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
     74c:	e0bffc17 	ldw	r2,-16(fp)
     750:	00c00034 	movhi	r3,0
     754:	18d77904 	addi	r3,r3,24036
     758:	100490fa 	slli	r2,r2,3
     75c:	10c5883a 	add	r2,r2,r3
     760:	10c00104 	addi	r3,r2,4
     764:	e0bffd17 	ldw	r2,-12(fp)
     768:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
     76c:	e0bffe17 	ldw	r2,-8(fp)
     770:	1005003a 	cmpeq	r2,r2,zero
     774:	1000201e 	bne	r2,zero,7f8 <alt_irq_register+0x114>
     778:	e0bffc17 	ldw	r2,-16(fp)
     77c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     780:	0005303a 	rdctl	r2,status
     784:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     788:	e0fff617 	ldw	r3,-40(fp)
     78c:	00bfff84 	movi	r2,-2
     790:	1884703a 	and	r2,r3,r2
     794:	1001703a 	wrctl	status,r2
  
  return context;
     798:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     79c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
     7a0:	e0fff717 	ldw	r3,-36(fp)
     7a4:	00800044 	movi	r2,1
     7a8:	10c4983a 	sll	r2,r2,r3
     7ac:	1007883a 	mov	r3,r2
     7b0:	00800034 	movhi	r2,0
     7b4:	10977204 	addi	r2,r2,24008
     7b8:	10800017 	ldw	r2,0(r2)
     7bc:	1886b03a 	or	r3,r3,r2
     7c0:	00800034 	movhi	r2,0
     7c4:	10977204 	addi	r2,r2,24008
     7c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     7cc:	00800034 	movhi	r2,0
     7d0:	10977204 	addi	r2,r2,24008
     7d4:	10800017 	ldw	r2,0(r2)
     7d8:	100170fa 	wrctl	ienable,r2
     7dc:	e0bff817 	ldw	r2,-32(fp)
     7e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     7e4:	e0bff517 	ldw	r2,-44(fp)
     7e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     7ec:	0005883a 	mov	r2,zero
     7f0:	e0bfff15 	stw	r2,-4(fp)
     7f4:	00002006 	br	878 <alt_irq_register+0x194>
     7f8:	e0bffc17 	ldw	r2,-16(fp)
     7fc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     800:	0005303a 	rdctl	r2,status
     804:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     808:	e0fff217 	ldw	r3,-56(fp)
     80c:	00bfff84 	movi	r2,-2
     810:	1884703a 	and	r2,r3,r2
     814:	1001703a 	wrctl	status,r2
  
  return context;
     818:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
     81c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
     820:	e0fff317 	ldw	r3,-52(fp)
     824:	00800044 	movi	r2,1
     828:	10c4983a 	sll	r2,r2,r3
     82c:	0084303a 	nor	r2,zero,r2
     830:	1007883a 	mov	r3,r2
     834:	00800034 	movhi	r2,0
     838:	10977204 	addi	r2,r2,24008
     83c:	10800017 	ldw	r2,0(r2)
     840:	1886703a 	and	r3,r3,r2
     844:	00800034 	movhi	r2,0
     848:	10977204 	addi	r2,r2,24008
     84c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
     850:	00800034 	movhi	r2,0
     854:	10977204 	addi	r2,r2,24008
     858:	10800017 	ldw	r2,0(r2)
     85c:	100170fa 	wrctl	ienable,r2
     860:	e0bff417 	ldw	r2,-48(fp)
     864:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     868:	e0bff117 	ldw	r2,-60(fp)
     86c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
     870:	0005883a 	mov	r2,zero
     874:	e0bfff15 	stw	r2,-4(fp)
     878:	e0bfff17 	ldw	r2,-4(fp)
     87c:	e0bffb15 	stw	r2,-20(fp)
     880:	e0bffa17 	ldw	r2,-24(fp)
     884:	e0bff015 	stw	r2,-64(fp)
     888:	e0bff017 	ldw	r2,-64(fp)
     88c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
     890:	e0bffb17 	ldw	r2,-20(fp)
}
     894:	e037883a 	mov	sp,fp
     898:	df000017 	ldw	fp,0(sp)
     89c:	dec00104 	addi	sp,sp,4
     8a0:	f800283a 	ret

000008a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     8a4:	defffe04 	addi	sp,sp,-8
     8a8:	dfc00115 	stw	ra,4(sp)
     8ac:	df000015 	stw	fp,0(sp)
     8b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     8b4:	01000034 	movhi	r4,0
     8b8:	21118704 	addi	r4,r4,17948
     8bc:	01400034 	movhi	r5,0
     8c0:	294b9d04 	addi	r5,r5,11892
     8c4:	01800034 	movhi	r6,0
     8c8:	31918704 	addi	r6,r6,17948
     8cc:	00009240 	call	924 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     8d0:	01000034 	movhi	r4,0
     8d4:	21000804 	addi	r4,r4,32
     8d8:	01400034 	movhi	r5,0
     8dc:	29400804 	addi	r5,r5,32
     8e0:	01800034 	movhi	r6,0
     8e4:	31806e04 	addi	r6,r6,440
     8e8:	00009240 	call	924 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     8ec:	01000034 	movhi	r4,0
     8f0:	210b6804 	addi	r4,r4,11680
     8f4:	01400034 	movhi	r5,0
     8f8:	294b6804 	addi	r5,r5,11680
     8fc:	01800034 	movhi	r6,0
     900:	318b9d04 	addi	r6,r6,11892
     904:	00009240 	call	924 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     908:	0001eb80 	call	1eb8 <alt_dcache_flush_all>
  alt_icache_flush_all();
     90c:	00021700 	call	2170 <alt_icache_flush_all>
}
     910:	e037883a 	mov	sp,fp
     914:	dfc00117 	ldw	ra,4(sp)
     918:	df000017 	ldw	fp,0(sp)
     91c:	dec00204 	addi	sp,sp,8
     920:	f800283a 	ret

00000924 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     924:	defffc04 	addi	sp,sp,-16
     928:	df000315 	stw	fp,12(sp)
     92c:	df000304 	addi	fp,sp,12
     930:	e13ffd15 	stw	r4,-12(fp)
     934:	e17ffe15 	stw	r5,-8(fp)
     938:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     93c:	e0fffe17 	ldw	r3,-8(fp)
     940:	e0bffd17 	ldw	r2,-12(fp)
     944:	18800e26 	beq	r3,r2,980 <alt_load_section+0x5c>
  {
    while( to != end )
     948:	00000a06 	br	974 <alt_load_section+0x50>
    {
      *to++ = *from++;
     94c:	e0bffd17 	ldw	r2,-12(fp)
     950:	10c00017 	ldw	r3,0(r2)
     954:	e0bffe17 	ldw	r2,-8(fp)
     958:	10c00015 	stw	r3,0(r2)
     95c:	e0bffe17 	ldw	r2,-8(fp)
     960:	10800104 	addi	r2,r2,4
     964:	e0bffe15 	stw	r2,-8(fp)
     968:	e0bffd17 	ldw	r2,-12(fp)
     96c:	10800104 	addi	r2,r2,4
     970:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     974:	e0fffe17 	ldw	r3,-8(fp)
     978:	e0bfff17 	ldw	r2,-4(fp)
     97c:	18bff31e 	bne	r3,r2,94c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     980:	e037883a 	mov	sp,fp
     984:	df000017 	ldw	fp,0(sp)
     988:	dec00104 	addi	sp,sp,4
     98c:	f800283a 	ret

00000990 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     990:	defffd04 	addi	sp,sp,-12
     994:	dfc00215 	stw	ra,8(sp)
     998:	df000115 	stw	fp,4(sp)
     99c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     9a0:	0009883a 	mov	r4,zero
     9a4:	0000ba00 	call	ba0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     9a8:	0000bd40 	call	bd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     9ac:	01000034 	movhi	r4,0
     9b0:	210b6c04 	addi	r4,r4,11696
     9b4:	01400034 	movhi	r5,0
     9b8:	294b6c04 	addi	r5,r5,11696
     9bc:	01800034 	movhi	r6,0
     9c0:	318b6c04 	addi	r6,r6,11696
     9c4:	00022640 	call	2264 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     9c8:	00020140 	call	2014 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     9cc:	01000034 	movhi	r4,0
     9d0:	21081e04 	addi	r4,r4,8312
     9d4:	00028480 	call	2848 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     9d8:	d125fc17 	ldw	r4,-26640(gp)
     9dc:	d165fd17 	ldw	r5,-26636(gp)
     9e0:	d1a5fe17 	ldw	r6,-26632(gp)
     9e4:	00005580 	call	558 <main>
     9e8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     9ec:	01000044 	movi	r4,1
     9f0:	0001d580 	call	1d58 <close>
  exit (result);
     9f4:	e13fff17 	ldw	r4,-4(fp)
     9f8:	000285c0 	call	285c <exit>

000009fc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
     9fc:	defffa04 	addi	sp,sp,-24
     a00:	df000515 	stw	fp,20(sp)
     a04:	df000504 	addi	fp,sp,20
     a08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
     a0c:	0005303a 	rdctl	r2,status
     a10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
     a14:	e0fffd17 	ldw	r3,-12(fp)
     a18:	00bfff84 	movi	r2,-2
     a1c:	1884703a 	and	r2,r3,r2
     a20:	1001703a 	wrctl	status,r2
  
  return context;
     a24:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
     a28:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
     a2c:	e0bfff17 	ldw	r2,-4(fp)
     a30:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
     a34:	e0bffc17 	ldw	r2,-16(fp)
     a38:	10c00017 	ldw	r3,0(r2)
     a3c:	e0bffc17 	ldw	r2,-16(fp)
     a40:	10800117 	ldw	r2,4(r2)
     a44:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
     a48:	e0bffc17 	ldw	r2,-16(fp)
     a4c:	10c00117 	ldw	r3,4(r2)
     a50:	e0bffc17 	ldw	r2,-16(fp)
     a54:	10800017 	ldw	r2,0(r2)
     a58:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
     a5c:	e0fffc17 	ldw	r3,-16(fp)
     a60:	e0bffc17 	ldw	r2,-16(fp)
     a64:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
     a68:	e0fffc17 	ldw	r3,-16(fp)
     a6c:	e0bffc17 	ldw	r2,-16(fp)
     a70:	18800015 	stw	r2,0(r3)
     a74:	e0bffe17 	ldw	r2,-8(fp)
     a78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
     a7c:	e0bffb17 	ldw	r2,-20(fp)
     a80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
     a84:	e037883a 	mov	sp,fp
     a88:	df000017 	ldw	fp,0(sp)
     a8c:	dec00104 	addi	sp,sp,4
     a90:	f800283a 	ret

00000a94 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
     a94:	defffb04 	addi	sp,sp,-20
     a98:	dfc00415 	stw	ra,16(sp)
     a9c:	df000315 	stw	fp,12(sp)
     aa0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
     aa4:	d0a00617 	ldw	r2,-32744(gp)
     aa8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
     aac:	d0a60017 	ldw	r2,-26624(gp)
     ab0:	10800044 	addi	r2,r2,1
     ab4:	d0a60015 	stw	r2,-26624(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
     ab8:	00003106 	br	b80 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
     abc:	e0bffe17 	ldw	r2,-8(fp)
     ac0:	10800017 	ldw	r2,0(r2)
     ac4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
     ac8:	e0bffe17 	ldw	r2,-8(fp)
     acc:	10800403 	ldbu	r2,16(r2)
     ad0:	10803fcc 	andi	r2,r2,255
     ad4:	1005003a 	cmpeq	r2,r2,zero
     ad8:	1000051e 	bne	r2,zero,af0 <alt_tick+0x5c>
     adc:	d0a60017 	ldw	r2,-26624(gp)
     ae0:	1004c03a 	cmpne	r2,r2,zero
     ae4:	1000021e 	bne	r2,zero,af0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
     ae8:	e0bffe17 	ldw	r2,-8(fp)
     aec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
     af0:	e0bffe17 	ldw	r2,-8(fp)
     af4:	10c00217 	ldw	r3,8(r2)
     af8:	d0a60017 	ldw	r2,-26624(gp)
     afc:	10c01e36 	bltu	r2,r3,b78 <alt_tick+0xe4>
     b00:	e0bffe17 	ldw	r2,-8(fp)
     b04:	10800403 	ldbu	r2,16(r2)
     b08:	10803fcc 	andi	r2,r2,255
     b0c:	1004c03a 	cmpne	r2,r2,zero
     b10:	1000191e 	bne	r2,zero,b78 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
     b14:	e0bffe17 	ldw	r2,-8(fp)
     b18:	10c00317 	ldw	r3,12(r2)
     b1c:	e0bffe17 	ldw	r2,-8(fp)
     b20:	11000517 	ldw	r4,20(r2)
     b24:	183ee83a 	callr	r3
     b28:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
     b2c:	e0bffd17 	ldw	r2,-12(fp)
     b30:	1004c03a 	cmpne	r2,r2,zero
     b34:	1000031e 	bne	r2,zero,b44 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
     b38:	e13ffe17 	ldw	r4,-8(fp)
     b3c:	00009fc0 	call	9fc <alt_alarm_stop>
     b40:	00000d06 	br	b78 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
     b44:	e0bffe17 	ldw	r2,-8(fp)
     b48:	10c00217 	ldw	r3,8(r2)
     b4c:	e0bffd17 	ldw	r2,-12(fp)
     b50:	1887883a 	add	r3,r3,r2
     b54:	e0bffe17 	ldw	r2,-8(fp)
     b58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
     b5c:	e0bffe17 	ldw	r2,-8(fp)
     b60:	10c00217 	ldw	r3,8(r2)
     b64:	d0a60017 	ldw	r2,-26624(gp)
     b68:	1880032e 	bgeu	r3,r2,b78 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
     b6c:	e0fffe17 	ldw	r3,-8(fp)
     b70:	00800044 	movi	r2,1
     b74:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
     b78:	e0bfff17 	ldw	r2,-4(fp)
     b7c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
     b80:	d0e00604 	addi	r3,gp,-32744
     b84:	e0bffe17 	ldw	r2,-8(fp)
     b88:	10ffcc1e 	bne	r2,r3,abc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
     b8c:	e037883a 	mov	sp,fp
     b90:	dfc00117 	ldw	ra,4(sp)
     b94:	df000017 	ldw	fp,0(sp)
     b98:	dec00204 	addi	sp,sp,8
     b9c:	f800283a 	ret

00000ba0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     ba0:	defffd04 	addi	sp,sp,-12
     ba4:	dfc00215 	stw	ra,8(sp)
     ba8:	df000115 	stw	fp,4(sp)
     bac:	df000104 	addi	fp,sp,4
     bb0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     bb4:	00026380 	call	2638 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     bb8:	00800044 	movi	r2,1
     bbc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     bc0:	e037883a 	mov	sp,fp
     bc4:	dfc00117 	ldw	ra,4(sp)
     bc8:	df000017 	ldw	fp,0(sp)
     bcc:	dec00204 	addi	sp,sp,8
     bd0:	f800283a 	ret

00000bd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     bd4:	defffe04 	addi	sp,sp,-8
     bd8:	dfc00115 	stw	ra,4(sp)
     bdc:	df000015 	stw	fp,0(sp)
     be0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     be4:	01040034 	movhi	r4,4096
     be8:	21080004 	addi	r4,r4,8192
     bec:	000b883a 	mov	r5,zero
     bf0:	000d883a 	mov	r6,zero
     bf4:	01c00204 	movi	r7,8
     bf8:	00017e40 	call	17e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     bfc:	01000034 	movhi	r4,0
     c00:	210ba704 	addi	r4,r4,11932
     c04:	000b883a 	mov	r5,zero
     c08:	01800204 	movi	r6,8
     c0c:	0000e100 	call	e10 <altera_avalon_jtag_uart_init>
     c10:	01000034 	movhi	r4,0
     c14:	210b9d04 	addi	r4,r4,11892
     c18:	0000c900 	call	c90 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
     c1c:	01000034 	movhi	r4,0
     c20:	210fb504 	addi	r4,r4,16084
     c24:	0000c900 	call	c90 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
     c28:	01000034 	movhi	r4,0
     c2c:	210fc004 	addi	r4,r4,16128
     c30:	0000c900 	call	c90 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
     c34:	01000034 	movhi	r4,0
     c38:	210fcb04 	addi	r4,r4,16172
     c3c:	0000c900 	call	c90 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
     c40:	01000034 	movhi	r4,0
     c44:	210fd604 	addi	r4,r4,16216
     c48:	0000c900 	call	c90 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
     c4c:	01000034 	movhi	r4,0
     c50:	210fe104 	addi	r4,r4,16260
     c54:	0000c900 	call	c90 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
     c58:	01000034 	movhi	r4,0
     c5c:	210fec04 	addi	r4,r4,16304
     c60:	0000c900 	call	c90 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
     c64:	01000034 	movhi	r4,0
     c68:	210ff704 	addi	r4,r4,16348
     c6c:	0000c900 	call	c90 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
     c70:	01000034 	movhi	r4,0
     c74:	21100204 	addi	r4,r4,16392
     c78:	0000c900 	call	c90 <alt_dev_reg>
}
     c7c:	e037883a 	mov	sp,fp
     c80:	dfc00117 	ldw	ra,4(sp)
     c84:	df000017 	ldw	fp,0(sp)
     c88:	dec00204 	addi	sp,sp,8
     c8c:	f800283a 	ret

00000c90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     c90:	defffd04 	addi	sp,sp,-12
     c94:	dfc00215 	stw	ra,8(sp)
     c98:	df000115 	stw	fp,4(sp)
     c9c:	df000104 	addi	fp,sp,4
     ca0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     ca4:	e13fff17 	ldw	r4,-4(fp)
     ca8:	01400034 	movhi	r5,0
     cac:	29518104 	addi	r5,r5,17924
     cb0:	0001f000 	call	1f00 <alt_dev_llist_insert>
}
     cb4:	e037883a 	mov	sp,fp
     cb8:	dfc00117 	ldw	ra,4(sp)
     cbc:	df000017 	ldw	fp,0(sp)
     cc0:	dec00204 	addi	sp,sp,8
     cc4:	f800283a 	ret

00000cc8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     cc8:	defffa04 	addi	sp,sp,-24
     ccc:	dfc00515 	stw	ra,20(sp)
     cd0:	df000415 	stw	fp,16(sp)
     cd4:	df000404 	addi	fp,sp,16
     cd8:	e13ffd15 	stw	r4,-12(fp)
     cdc:	e17ffe15 	stw	r5,-8(fp)
     ce0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     ce4:	e0bffd17 	ldw	r2,-12(fp)
     ce8:	10800017 	ldw	r2,0(r2)
     cec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     cf0:	e0bffc17 	ldw	r2,-16(fp)
     cf4:	11000a04 	addi	r4,r2,40
     cf8:	e0bffd17 	ldw	r2,-12(fp)
     cfc:	11c00217 	ldw	r7,8(r2)
     d00:	e17ffe17 	ldw	r5,-8(fp)
     d04:	e1bfff17 	ldw	r6,-4(fp)
     d08:	000130c0 	call	130c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     d0c:	e037883a 	mov	sp,fp
     d10:	dfc00117 	ldw	ra,4(sp)
     d14:	df000017 	ldw	fp,0(sp)
     d18:	dec00204 	addi	sp,sp,8
     d1c:	f800283a 	ret

00000d20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     d20:	defffa04 	addi	sp,sp,-24
     d24:	dfc00515 	stw	ra,20(sp)
     d28:	df000415 	stw	fp,16(sp)
     d2c:	df000404 	addi	fp,sp,16
     d30:	e13ffd15 	stw	r4,-12(fp)
     d34:	e17ffe15 	stw	r5,-8(fp)
     d38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     d3c:	e0bffd17 	ldw	r2,-12(fp)
     d40:	10800017 	ldw	r2,0(r2)
     d44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     d48:	e0bffc17 	ldw	r2,-16(fp)
     d4c:	11000a04 	addi	r4,r2,40
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	11c00217 	ldw	r7,8(r2)
     d58:	e17ffe17 	ldw	r5,-8(fp)
     d5c:	e1bfff17 	ldw	r6,-4(fp)
     d60:	00015300 	call	1530 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     d64:	e037883a 	mov	sp,fp
     d68:	dfc00117 	ldw	ra,4(sp)
     d6c:	df000017 	ldw	fp,0(sp)
     d70:	dec00204 	addi	sp,sp,8
     d74:	f800283a 	ret

00000d78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     d78:	defffc04 	addi	sp,sp,-16
     d7c:	dfc00315 	stw	ra,12(sp)
     d80:	df000215 	stw	fp,8(sp)
     d84:	df000204 	addi	fp,sp,8
     d88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     d8c:	e0bfff17 	ldw	r2,-4(fp)
     d90:	10800017 	ldw	r2,0(r2)
     d94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     d98:	e0bffe17 	ldw	r2,-8(fp)
     d9c:	11000a04 	addi	r4,r2,40
     da0:	e0bfff17 	ldw	r2,-4(fp)
     da4:	11400217 	ldw	r5,8(r2)
     da8:	00011a40 	call	11a4 <altera_avalon_jtag_uart_close>
}
     dac:	e037883a 	mov	sp,fp
     db0:	dfc00117 	ldw	ra,4(sp)
     db4:	df000017 	ldw	fp,0(sp)
     db8:	dec00204 	addi	sp,sp,8
     dbc:	f800283a 	ret

00000dc0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     dc0:	defffa04 	addi	sp,sp,-24
     dc4:	dfc00515 	stw	ra,20(sp)
     dc8:	df000415 	stw	fp,16(sp)
     dcc:	df000404 	addi	fp,sp,16
     dd0:	e13ffd15 	stw	r4,-12(fp)
     dd4:	e17ffe15 	stw	r5,-8(fp)
     dd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     ddc:	e0bffd17 	ldw	r2,-12(fp)
     de0:	10800017 	ldw	r2,0(r2)
     de4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     de8:	e0bffc17 	ldw	r2,-16(fp)
     dec:	11000a04 	addi	r4,r2,40
     df0:	e17ffe17 	ldw	r5,-8(fp)
     df4:	e1bfff17 	ldw	r6,-4(fp)
     df8:	00012180 	call	1218 <altera_avalon_jtag_uart_ioctl>
}
     dfc:	e037883a 	mov	sp,fp
     e00:	dfc00117 	ldw	ra,4(sp)
     e04:	df000017 	ldw	fp,0(sp)
     e08:	dec00204 	addi	sp,sp,8
     e0c:	f800283a 	ret

00000e10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     e10:	defffb04 	addi	sp,sp,-20
     e14:	dfc00415 	stw	ra,16(sp)
     e18:	df000315 	stw	fp,12(sp)
     e1c:	df000304 	addi	fp,sp,12
     e20:	e13ffd15 	stw	r4,-12(fp)
     e24:	e17ffe15 	stw	r5,-8(fp)
     e28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     e2c:	e0fffd17 	ldw	r3,-12(fp)
     e30:	00800044 	movi	r2,1
     e34:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     e38:	e0bffd17 	ldw	r2,-12(fp)
     e3c:	10800017 	ldw	r2,0(r2)
     e40:	11000104 	addi	r4,r2,4
     e44:	e0bffd17 	ldw	r2,-12(fp)
     e48:	10800817 	ldw	r2,32(r2)
     e4c:	1007883a 	mov	r3,r2
     e50:	2005883a 	mov	r2,r4
     e54:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     e58:	e13fff17 	ldw	r4,-4(fp)
     e5c:	e17ffd17 	ldw	r5,-12(fp)
     e60:	01800034 	movhi	r6,0
     e64:	3183b204 	addi	r6,r6,3784
     e68:	00006e40 	call	6e4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     e6c:	e0bffd17 	ldw	r2,-12(fp)
     e70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     e74:	e0bffd17 	ldw	r2,-12(fp)
     e78:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     e7c:	00800034 	movhi	r2,0
     e80:	10977604 	addi	r2,r2,24024
     e84:	10800017 	ldw	r2,0(r2)
     e88:	100b883a 	mov	r5,r2
     e8c:	01800034 	movhi	r6,0
     e90:	31843d04 	addi	r6,r6,4340
     e94:	e1fffd17 	ldw	r7,-12(fp)
     e98:	0001c040 	call	1c04 <alt_alarm_start>
     e9c:	1004403a 	cmpge	r2,r2,zero
     ea0:	1000041e 	bne	r2,zero,eb4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     ea4:	e0fffd17 	ldw	r3,-12(fp)
     ea8:	00a00034 	movhi	r2,32768
     eac:	10bfffc4 	addi	r2,r2,-1
     eb0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     eb4:	e037883a 	mov	sp,fp
     eb8:	dfc00117 	ldw	ra,4(sp)
     ebc:	df000017 	ldw	fp,0(sp)
     ec0:	dec00204 	addi	sp,sp,8
     ec4:	f800283a 	ret

00000ec8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     ec8:	defff704 	addi	sp,sp,-36
     ecc:	df000815 	stw	fp,32(sp)
     ed0:	df000804 	addi	fp,sp,32
     ed4:	e13ffe15 	stw	r4,-8(fp)
     ed8:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     edc:	e0bffe17 	ldw	r2,-8(fp)
     ee0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
     ee4:	e0bffd17 	ldw	r2,-12(fp)
     ee8:	10800017 	ldw	r2,0(r2)
     eec:	e0bffc15 	stw	r2,-16(fp)
     ef0:	00000006 	br	ef4 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ef4:	e0bffc17 	ldw	r2,-16(fp)
     ef8:	10800104 	addi	r2,r2,4
     efc:	10800037 	ldwio	r2,0(r2)
     f00:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     f04:	e0bffb17 	ldw	r2,-20(fp)
     f08:	1080c00c 	andi	r2,r2,768
     f0c:	1005003a 	cmpeq	r2,r2,zero
     f10:	1000741e 	bne	r2,zero,10e4 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     f14:	e0bffb17 	ldw	r2,-20(fp)
     f18:	1080400c 	andi	r2,r2,256
     f1c:	1005003a 	cmpeq	r2,r2,zero
     f20:	1000351e 	bne	r2,zero,ff8 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     f24:	00800074 	movhi	r2,1
     f28:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f2c:	e0bffd17 	ldw	r2,-12(fp)
     f30:	10800a17 	ldw	r2,40(r2)
     f34:	10800044 	addi	r2,r2,1
     f38:	1081ffcc 	andi	r2,r2,2047
     f3c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
     f40:	e0bffd17 	ldw	r2,-12(fp)
     f44:	10c00b17 	ldw	r3,44(r2)
     f48:	e0bff917 	ldw	r2,-28(fp)
     f4c:	18801626 	beq	r3,r2,fa8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     f50:	e0bffc17 	ldw	r2,-16(fp)
     f54:	10800037 	ldwio	r2,0(r2)
     f58:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     f5c:	e0bffa17 	ldw	r2,-24(fp)
     f60:	10a0000c 	andi	r2,r2,32768
     f64:	1005003a 	cmpeq	r2,r2,zero
     f68:	10000f1e 	bne	r2,zero,fa8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     f6c:	e0bffd17 	ldw	r2,-12(fp)
     f70:	10c00a17 	ldw	r3,40(r2)
     f74:	e0bffa17 	ldw	r2,-24(fp)
     f78:	1009883a 	mov	r4,r2
     f7c:	e0bffd17 	ldw	r2,-12(fp)
     f80:	1885883a 	add	r2,r3,r2
     f84:	10800e04 	addi	r2,r2,56
     f88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f8c:	e0bffd17 	ldw	r2,-12(fp)
     f90:	10800a17 	ldw	r2,40(r2)
     f94:	10800044 	addi	r2,r2,1
     f98:	10c1ffcc 	andi	r3,r2,2047
     f9c:	e0bffd17 	ldw	r2,-12(fp)
     fa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     fa4:	003fe106 	br	f2c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     fa8:	e0bffa17 	ldw	r2,-24(fp)
     fac:	10bfffec 	andhi	r2,r2,65535
     fb0:	1005003a 	cmpeq	r2,r2,zero
     fb4:	1000101e 	bne	r2,zero,ff8 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     fb8:	e0bffd17 	ldw	r2,-12(fp)
     fbc:	10c00817 	ldw	r3,32(r2)
     fc0:	00bfff84 	movi	r2,-2
     fc4:	1886703a 	and	r3,r3,r2
     fc8:	e0bffd17 	ldw	r2,-12(fp)
     fcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     fd0:	e0bffc17 	ldw	r2,-16(fp)
     fd4:	11000104 	addi	r4,r2,4
     fd8:	e0bffd17 	ldw	r2,-12(fp)
     fdc:	10800817 	ldw	r2,32(r2)
     fe0:	1007883a 	mov	r3,r2
     fe4:	2005883a 	mov	r2,r4
     fe8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     fec:	e0bffc17 	ldw	r2,-16(fp)
     ff0:	10800104 	addi	r2,r2,4
     ff4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     ff8:	e0bffb17 	ldw	r2,-20(fp)
     ffc:	1080800c 	andi	r2,r2,512
    1000:	1005003a 	cmpeq	r2,r2,zero
    1004:	103fbb1e 	bne	r2,zero,ef4 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1008:	e0bffb17 	ldw	r2,-20(fp)
    100c:	10bfffec 	andhi	r2,r2,65535
    1010:	1004d43a 	srli	r2,r2,16
    1014:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    1018:	00001506 	br	1070 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    101c:	e13ffc17 	ldw	r4,-16(fp)
    1020:	e0bffd17 	ldw	r2,-12(fp)
    1024:	10c00d17 	ldw	r3,52(r2)
    1028:	e0bffd17 	ldw	r2,-12(fp)
    102c:	1885883a 	add	r2,r3,r2
    1030:	10820e04 	addi	r2,r2,2104
    1034:	10800003 	ldbu	r2,0(r2)
    1038:	10c03fcc 	andi	r3,r2,255
    103c:	18c0201c 	xori	r3,r3,128
    1040:	18ffe004 	addi	r3,r3,-128
    1044:	2005883a 	mov	r2,r4
    1048:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    104c:	e0bffd17 	ldw	r2,-12(fp)
    1050:	10800d17 	ldw	r2,52(r2)
    1054:	10800044 	addi	r2,r2,1
    1058:	10c1ffcc 	andi	r3,r2,2047
    105c:	e0bffd17 	ldw	r2,-12(fp)
    1060:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    1064:	e0bff817 	ldw	r2,-32(fp)
    1068:	10bfffc4 	addi	r2,r2,-1
    106c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    1070:	e0bff817 	ldw	r2,-32(fp)
    1074:	1005003a 	cmpeq	r2,r2,zero
    1078:	1000051e 	bne	r2,zero,1090 <altera_avalon_jtag_uart_irq+0x1c8>
    107c:	e0bffd17 	ldw	r2,-12(fp)
    1080:	10c00d17 	ldw	r3,52(r2)
    1084:	e0bffd17 	ldw	r2,-12(fp)
    1088:	10800c17 	ldw	r2,48(r2)
    108c:	18bfe31e 	bne	r3,r2,101c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    1090:	e0bff817 	ldw	r2,-32(fp)
    1094:	1005003a 	cmpeq	r2,r2,zero
    1098:	103f961e 	bne	r2,zero,ef4 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    109c:	e0bffd17 	ldw	r2,-12(fp)
    10a0:	10c00817 	ldw	r3,32(r2)
    10a4:	00bfff44 	movi	r2,-3
    10a8:	1886703a 	and	r3,r3,r2
    10ac:	e0bffd17 	ldw	r2,-12(fp)
    10b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    10b4:	e0bffd17 	ldw	r2,-12(fp)
    10b8:	10800017 	ldw	r2,0(r2)
    10bc:	11000104 	addi	r4,r2,4
    10c0:	e0bffd17 	ldw	r2,-12(fp)
    10c4:	10800817 	ldw	r2,32(r2)
    10c8:	1007883a 	mov	r3,r2
    10cc:	2005883a 	mov	r2,r4
    10d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    10d4:	e0bffc17 	ldw	r2,-16(fp)
    10d8:	10800104 	addi	r2,r2,4
    10dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    10e0:	003f8406 	br	ef4 <altera_avalon_jtag_uart_irq+0x2c>
}
    10e4:	e037883a 	mov	sp,fp
    10e8:	df000017 	ldw	fp,0(sp)
    10ec:	dec00104 	addi	sp,sp,4
    10f0:	f800283a 	ret

000010f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    10f4:	defffc04 	addi	sp,sp,-16
    10f8:	df000315 	stw	fp,12(sp)
    10fc:	df000304 	addi	fp,sp,12
    1100:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1104:	e0bfff17 	ldw	r2,-4(fp)
    1108:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    110c:	e0bffe17 	ldw	r2,-8(fp)
    1110:	10800017 	ldw	r2,0(r2)
    1114:	10800104 	addi	r2,r2,4
    1118:	10800037 	ldwio	r2,0(r2)
    111c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    1120:	e0bffd17 	ldw	r2,-12(fp)
    1124:	1081000c 	andi	r2,r2,1024
    1128:	1005003a 	cmpeq	r2,r2,zero
    112c:	10000c1e 	bne	r2,zero,1160 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1130:	e0bffe17 	ldw	r2,-8(fp)
    1134:	10800017 	ldw	r2,0(r2)
    1138:	11000104 	addi	r4,r2,4
    113c:	e0bffe17 	ldw	r2,-8(fp)
    1140:	10800817 	ldw	r2,32(r2)
    1144:	10810014 	ori	r2,r2,1024
    1148:	1007883a 	mov	r3,r2
    114c:	2005883a 	mov	r2,r4
    1150:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    1154:	e0bffe17 	ldw	r2,-8(fp)
    1158:	10000915 	stw	zero,36(r2)
    115c:	00000a06 	br	1188 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    1160:	e0bffe17 	ldw	r2,-8(fp)
    1164:	10c00917 	ldw	r3,36(r2)
    1168:	00a00034 	movhi	r2,32768
    116c:	10bfff04 	addi	r2,r2,-4
    1170:	10c00536 	bltu	r2,r3,1188 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    1174:	e0bffe17 	ldw	r2,-8(fp)
    1178:	10800917 	ldw	r2,36(r2)
    117c:	10c00044 	addi	r3,r2,1
    1180:	e0bffe17 	ldw	r2,-8(fp)
    1184:	10c00915 	stw	r3,36(r2)
    1188:	00800034 	movhi	r2,0
    118c:	10977604 	addi	r2,r2,24024
    1190:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    1194:	e037883a 	mov	sp,fp
    1198:	df000017 	ldw	fp,0(sp)
    119c:	dec00104 	addi	sp,sp,4
    11a0:	f800283a 	ret

000011a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    11a4:	defffc04 	addi	sp,sp,-16
    11a8:	df000315 	stw	fp,12(sp)
    11ac:	df000304 	addi	fp,sp,12
    11b0:	e13ffd15 	stw	r4,-12(fp)
    11b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    11b8:	00000706 	br	11d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    11bc:	e0bffe17 	ldw	r2,-8(fp)
    11c0:	1090000c 	andi	r2,r2,16384
    11c4:	1005003a 	cmpeq	r2,r2,zero
    11c8:	1000031e 	bne	r2,zero,11d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    11cc:	00bffd44 	movi	r2,-11
    11d0:	e0bfff15 	stw	r2,-4(fp)
    11d4:	00000b06 	br	1204 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    11d8:	e0bffd17 	ldw	r2,-12(fp)
    11dc:	10c00d17 	ldw	r3,52(r2)
    11e0:	e0bffd17 	ldw	r2,-12(fp)
    11e4:	10800c17 	ldw	r2,48(r2)
    11e8:	18800526 	beq	r3,r2,1200 <altera_avalon_jtag_uart_close+0x5c>
    11ec:	e0bffd17 	ldw	r2,-12(fp)
    11f0:	10c00917 	ldw	r3,36(r2)
    11f4:	e0bffd17 	ldw	r2,-12(fp)
    11f8:	10800117 	ldw	r2,4(r2)
    11fc:	18bfef36 	bltu	r3,r2,11bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1200:	e03fff15 	stw	zero,-4(fp)
    1204:	e0bfff17 	ldw	r2,-4(fp)
}
    1208:	e037883a 	mov	sp,fp
    120c:	df000017 	ldw	fp,0(sp)
    1210:	dec00104 	addi	sp,sp,4
    1214:	f800283a 	ret

00001218 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1218:	defff804 	addi	sp,sp,-32
    121c:	df000715 	stw	fp,28(sp)
    1220:	df000704 	addi	fp,sp,28
    1224:	e13ffb15 	stw	r4,-20(fp)
    1228:	e17ffc15 	stw	r5,-16(fp)
    122c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    1230:	00bff9c4 	movi	r2,-25
    1234:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    1238:	e0bffc17 	ldw	r2,-16(fp)
    123c:	e0bfff15 	stw	r2,-4(fp)
    1240:	e0ffff17 	ldw	r3,-4(fp)
    1244:	189a8060 	cmpeqi	r2,r3,27137
    1248:	1000041e 	bne	r2,zero,125c <altera_avalon_jtag_uart_ioctl+0x44>
    124c:	e0ffff17 	ldw	r3,-4(fp)
    1250:	189a80a0 	cmpeqi	r2,r3,27138
    1254:	10001b1e 	bne	r2,zero,12c4 <altera_avalon_jtag_uart_ioctl+0xac>
    1258:	00002706 	br	12f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    125c:	e0bffb17 	ldw	r2,-20(fp)
    1260:	10c00117 	ldw	r3,4(r2)
    1264:	00a00034 	movhi	r2,32768
    1268:	10bfffc4 	addi	r2,r2,-1
    126c:	18802226 	beq	r3,r2,12f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    1270:	e0bffd17 	ldw	r2,-12(fp)
    1274:	10800017 	ldw	r2,0(r2)
    1278:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    127c:	e0bff917 	ldw	r2,-28(fp)
    1280:	10800090 	cmplti	r2,r2,2
    1284:	1000071e 	bne	r2,zero,12a4 <altera_avalon_jtag_uart_ioctl+0x8c>
    1288:	e0fff917 	ldw	r3,-28(fp)
    128c:	00a00034 	movhi	r2,32768
    1290:	10bfffc4 	addi	r2,r2,-1
    1294:	18800326 	beq	r3,r2,12a4 <altera_avalon_jtag_uart_ioctl+0x8c>
    1298:	e0bff917 	ldw	r2,-28(fp)
    129c:	e0bffe15 	stw	r2,-8(fp)
    12a0:	00000306 	br	12b0 <altera_avalon_jtag_uart_ioctl+0x98>
    12a4:	00e00034 	movhi	r3,32768
    12a8:	18ffff84 	addi	r3,r3,-2
    12ac:	e0fffe15 	stw	r3,-8(fp)
    12b0:	e0bffb17 	ldw	r2,-20(fp)
    12b4:	e0fffe17 	ldw	r3,-8(fp)
    12b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    12bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    12c0:	00000d06 	br	12f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    12c4:	e0bffb17 	ldw	r2,-20(fp)
    12c8:	10c00117 	ldw	r3,4(r2)
    12cc:	00a00034 	movhi	r2,32768
    12d0:	10bfffc4 	addi	r2,r2,-1
    12d4:	18800826 	beq	r3,r2,12f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    12d8:	e13ffd17 	ldw	r4,-12(fp)
    12dc:	e0bffb17 	ldw	r2,-20(fp)
    12e0:	10c00917 	ldw	r3,36(r2)
    12e4:	e0bffb17 	ldw	r2,-20(fp)
    12e8:	10800117 	ldw	r2,4(r2)
    12ec:	1885803a 	cmpltu	r2,r3,r2
    12f0:	20800015 	stw	r2,0(r4)
      rc = 0;
    12f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    12f8:	e0bffa17 	ldw	r2,-24(fp)
}
    12fc:	e037883a 	mov	sp,fp
    1300:	df000017 	ldw	fp,0(sp)
    1304:	dec00104 	addi	sp,sp,4
    1308:	f800283a 	ret

0000130c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    130c:	defff204 	addi	sp,sp,-56
    1310:	dfc00d15 	stw	ra,52(sp)
    1314:	df000c15 	stw	fp,48(sp)
    1318:	df000c04 	addi	fp,sp,48
    131c:	e13ffb15 	stw	r4,-20(fp)
    1320:	e17ffc15 	stw	r5,-16(fp)
    1324:	e1bffd15 	stw	r6,-12(fp)
    1328:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    132c:	e0bffc17 	ldw	r2,-16(fp)
    1330:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1334:	00004806 	br	1458 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1338:	e0bffb17 	ldw	r2,-20(fp)
    133c:	10800a17 	ldw	r2,40(r2)
    1340:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1344:	e0bffb17 	ldw	r2,-20(fp)
    1348:	10800b17 	ldw	r2,44(r2)
    134c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    1350:	e0fff717 	ldw	r3,-36(fp)
    1354:	e0bff617 	ldw	r2,-40(fp)
    1358:	18800536 	bltu	r3,r2,1370 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    135c:	e0bff717 	ldw	r2,-36(fp)
    1360:	e0fff617 	ldw	r3,-40(fp)
    1364:	10c5c83a 	sub	r2,r2,r3
    1368:	e0bff815 	stw	r2,-32(fp)
    136c:	00000406 	br	1380 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1370:	00820004 	movi	r2,2048
    1374:	e0fff617 	ldw	r3,-40(fp)
    1378:	10c5c83a 	sub	r2,r2,r3
    137c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    1380:	e0bff817 	ldw	r2,-32(fp)
    1384:	1005003a 	cmpeq	r2,r2,zero
    1388:	10001f1e 	bne	r2,zero,1408 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    138c:	e0fffd17 	ldw	r3,-12(fp)
    1390:	e0bff817 	ldw	r2,-32(fp)
    1394:	1880022e 	bgeu	r3,r2,13a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    1398:	e0bffd17 	ldw	r2,-12(fp)
    139c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    13a0:	e0bffb17 	ldw	r2,-20(fp)
    13a4:	10c00e04 	addi	r3,r2,56
    13a8:	e0bff617 	ldw	r2,-40(fp)
    13ac:	1887883a 	add	r3,r3,r2
    13b0:	e0bffa17 	ldw	r2,-24(fp)
    13b4:	1009883a 	mov	r4,r2
    13b8:	180b883a 	mov	r5,r3
    13bc:	e1bff817 	ldw	r6,-32(fp)
    13c0:	00029080 	call	2908 <memcpy>
      ptr   += n;
    13c4:	e0fff817 	ldw	r3,-32(fp)
    13c8:	e0bffa17 	ldw	r2,-24(fp)
    13cc:	10c5883a 	add	r2,r2,r3
    13d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    13d4:	e0fffd17 	ldw	r3,-12(fp)
    13d8:	e0bff817 	ldw	r2,-32(fp)
    13dc:	1885c83a 	sub	r2,r3,r2
    13e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    13e4:	e0fff617 	ldw	r3,-40(fp)
    13e8:	e0bff817 	ldw	r2,-32(fp)
    13ec:	1885883a 	add	r2,r3,r2
    13f0:	10c1ffcc 	andi	r3,r2,2047
    13f4:	e0bffb17 	ldw	r2,-20(fp)
    13f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    13fc:	e0bffd17 	ldw	r2,-12(fp)
    1400:	10800048 	cmpgei	r2,r2,1
    1404:	103fcc1e 	bne	r2,zero,1338 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    1408:	e0fffa17 	ldw	r3,-24(fp)
    140c:	e0bffc17 	ldw	r2,-16(fp)
    1410:	1880141e 	bne	r3,r2,1464 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1414:	e0bffe17 	ldw	r2,-8(fp)
    1418:	1090000c 	andi	r2,r2,16384
    141c:	1004c03a 	cmpne	r2,r2,zero
    1420:	1000101e 	bne	r2,zero,1464 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1424:	e0bffb17 	ldw	r2,-20(fp)
    1428:	10c00a17 	ldw	r3,40(r2)
    142c:	e0bff717 	ldw	r2,-36(fp)
    1430:	1880051e 	bne	r3,r2,1448 <altera_avalon_jtag_uart_read+0x13c>
    1434:	e0bffb17 	ldw	r2,-20(fp)
    1438:	10c00917 	ldw	r3,36(r2)
    143c:	e0bffb17 	ldw	r2,-20(fp)
    1440:	10800117 	ldw	r2,4(r2)
    1444:	18bff736 	bltu	r3,r2,1424 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1448:	e0bffb17 	ldw	r2,-20(fp)
    144c:	10c00a17 	ldw	r3,40(r2)
    1450:	e0bff717 	ldw	r2,-36(fp)
    1454:	18800326 	beq	r3,r2,1464 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1458:	e0bffd17 	ldw	r2,-12(fp)
    145c:	10800048 	cmpgei	r2,r2,1
    1460:	103fb51e 	bne	r2,zero,1338 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1464:	e0fffa17 	ldw	r3,-24(fp)
    1468:	e0bffc17 	ldw	r2,-16(fp)
    146c:	18801926 	beq	r3,r2,14d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1470:	0005303a 	rdctl	r2,status
    1474:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1478:	e0fff517 	ldw	r3,-44(fp)
    147c:	00bfff84 	movi	r2,-2
    1480:	1884703a 	and	r2,r3,r2
    1484:	1001703a 	wrctl	status,r2
  
  return context;
    1488:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    148c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1490:	e0bffb17 	ldw	r2,-20(fp)
    1494:	10800817 	ldw	r2,32(r2)
    1498:	10c00054 	ori	r3,r2,1
    149c:	e0bffb17 	ldw	r2,-20(fp)
    14a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14a4:	e0bffb17 	ldw	r2,-20(fp)
    14a8:	10800017 	ldw	r2,0(r2)
    14ac:	11000104 	addi	r4,r2,4
    14b0:	e0bffb17 	ldw	r2,-20(fp)
    14b4:	10800817 	ldw	r2,32(r2)
    14b8:	1007883a 	mov	r3,r2
    14bc:	2005883a 	mov	r2,r4
    14c0:	10c00035 	stwio	r3,0(r2)
    14c4:	e0bff917 	ldw	r2,-28(fp)
    14c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14cc:	e0bff417 	ldw	r2,-48(fp)
    14d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    14d4:	e0fffa17 	ldw	r3,-24(fp)
    14d8:	e0bffc17 	ldw	r2,-16(fp)
    14dc:	18800526 	beq	r3,r2,14f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    14e0:	e0fffa17 	ldw	r3,-24(fp)
    14e4:	e0bffc17 	ldw	r2,-16(fp)
    14e8:	1887c83a 	sub	r3,r3,r2
    14ec:	e0ffff15 	stw	r3,-4(fp)
    14f0:	00000906 	br	1518 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    14f4:	e0bffe17 	ldw	r2,-8(fp)
    14f8:	1090000c 	andi	r2,r2,16384
    14fc:	1005003a 	cmpeq	r2,r2,zero
    1500:	1000031e 	bne	r2,zero,1510 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1504:	00bffd44 	movi	r2,-11
    1508:	e0bfff15 	stw	r2,-4(fp)
    150c:	00000206 	br	1518 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    1510:	00bffec4 	movi	r2,-5
    1514:	e0bfff15 	stw	r2,-4(fp)
    1518:	e0bfff17 	ldw	r2,-4(fp)
}
    151c:	e037883a 	mov	sp,fp
    1520:	dfc00117 	ldw	ra,4(sp)
    1524:	df000017 	ldw	fp,0(sp)
    1528:	dec00204 	addi	sp,sp,8
    152c:	f800283a 	ret

00001530 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1530:	defff204 	addi	sp,sp,-56
    1534:	dfc00d15 	stw	ra,52(sp)
    1538:	df000c15 	stw	fp,48(sp)
    153c:	df000c04 	addi	fp,sp,48
    1540:	e13ffb15 	stw	r4,-20(fp)
    1544:	e17ffc15 	stw	r5,-16(fp)
    1548:	e1bffd15 	stw	r6,-12(fp)
    154c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1550:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1554:	e0bffc17 	ldw	r2,-16(fp)
    1558:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    155c:	00003a06 	br	1648 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1560:	e0bffb17 	ldw	r2,-20(fp)
    1564:	10800c17 	ldw	r2,48(r2)
    1568:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    156c:	e0bffb17 	ldw	r2,-20(fp)
    1570:	10800d17 	ldw	r2,52(r2)
    1574:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    1578:	e0fffa17 	ldw	r3,-24(fp)
    157c:	e0bff917 	ldw	r2,-28(fp)
    1580:	1880062e 	bgeu	r3,r2,159c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1584:	e0fff917 	ldw	r3,-28(fp)
    1588:	e0bffa17 	ldw	r2,-24(fp)
    158c:	1885c83a 	sub	r2,r3,r2
    1590:	10bfffc4 	addi	r2,r2,-1
    1594:	e0bff815 	stw	r2,-32(fp)
    1598:	00000c06 	br	15cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    159c:	e0bff917 	ldw	r2,-28(fp)
    15a0:	1005003a 	cmpeq	r2,r2,zero
    15a4:	1000051e 	bne	r2,zero,15bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    15a8:	00820004 	movi	r2,2048
    15ac:	e0fffa17 	ldw	r3,-24(fp)
    15b0:	10c5c83a 	sub	r2,r2,r3
    15b4:	e0bff815 	stw	r2,-32(fp)
    15b8:	00000406 	br	15cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    15bc:	0081ffc4 	movi	r2,2047
    15c0:	e0fffa17 	ldw	r3,-24(fp)
    15c4:	10c5c83a 	sub	r2,r2,r3
    15c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    15cc:	e0bff817 	ldw	r2,-32(fp)
    15d0:	1005003a 	cmpeq	r2,r2,zero
    15d4:	10001f1e 	bne	r2,zero,1654 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    15d8:	e0fffd17 	ldw	r3,-12(fp)
    15dc:	e0bff817 	ldw	r2,-32(fp)
    15e0:	1880022e 	bgeu	r3,r2,15ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    15e4:	e0bffd17 	ldw	r2,-12(fp)
    15e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    15ec:	e0bffb17 	ldw	r2,-20(fp)
    15f0:	10c20e04 	addi	r3,r2,2104
    15f4:	e0bffa17 	ldw	r2,-24(fp)
    15f8:	1885883a 	add	r2,r3,r2
    15fc:	e0fffc17 	ldw	r3,-16(fp)
    1600:	1009883a 	mov	r4,r2
    1604:	180b883a 	mov	r5,r3
    1608:	e1bff817 	ldw	r6,-32(fp)
    160c:	00029080 	call	2908 <memcpy>
      ptr   += n;
    1610:	e0fff817 	ldw	r3,-32(fp)
    1614:	e0bffc17 	ldw	r2,-16(fp)
    1618:	10c5883a 	add	r2,r2,r3
    161c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    1620:	e0fffd17 	ldw	r3,-12(fp)
    1624:	e0bff817 	ldw	r2,-32(fp)
    1628:	1885c83a 	sub	r2,r3,r2
    162c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1630:	e0fffa17 	ldw	r3,-24(fp)
    1634:	e0bff817 	ldw	r2,-32(fp)
    1638:	1885883a 	add	r2,r3,r2
    163c:	10c1ffcc 	andi	r3,r2,2047
    1640:	e0bffb17 	ldw	r2,-20(fp)
    1644:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1648:	e0bffd17 	ldw	r2,-12(fp)
    164c:	10800048 	cmpgei	r2,r2,1
    1650:	103fc31e 	bne	r2,zero,1560 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1654:	0005303a 	rdctl	r2,status
    1658:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    165c:	e0fff517 	ldw	r3,-44(fp)
    1660:	00bfff84 	movi	r2,-2
    1664:	1884703a 	and	r2,r3,r2
    1668:	1001703a 	wrctl	status,r2
  
  return context;
    166c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    1670:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1674:	e0bffb17 	ldw	r2,-20(fp)
    1678:	10800817 	ldw	r2,32(r2)
    167c:	10c00094 	ori	r3,r2,2
    1680:	e0bffb17 	ldw	r2,-20(fp)
    1684:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1688:	e0bffb17 	ldw	r2,-20(fp)
    168c:	10800017 	ldw	r2,0(r2)
    1690:	11000104 	addi	r4,r2,4
    1694:	e0bffb17 	ldw	r2,-20(fp)
    1698:	10800817 	ldw	r2,32(r2)
    169c:	1007883a 	mov	r3,r2
    16a0:	2005883a 	mov	r2,r4
    16a4:	10c00035 	stwio	r3,0(r2)
    16a8:	e0bff717 	ldw	r2,-36(fp)
    16ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    16b0:	e0bff417 	ldw	r2,-48(fp)
    16b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    16b8:	e0bffd17 	ldw	r2,-12(fp)
    16bc:	10800050 	cmplti	r2,r2,1
    16c0:	1000111e 	bne	r2,zero,1708 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    16c4:	e0bffe17 	ldw	r2,-8(fp)
    16c8:	1090000c 	andi	r2,r2,16384
    16cc:	1004c03a 	cmpne	r2,r2,zero
    16d0:	1000101e 	bne	r2,zero,1714 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    16d4:	e0bffb17 	ldw	r2,-20(fp)
    16d8:	10c00d17 	ldw	r3,52(r2)
    16dc:	e0bff917 	ldw	r2,-28(fp)
    16e0:	1880051e 	bne	r3,r2,16f8 <altera_avalon_jtag_uart_write+0x1c8>
    16e4:	e0bffb17 	ldw	r2,-20(fp)
    16e8:	10c00917 	ldw	r3,36(r2)
    16ec:	e0bffb17 	ldw	r2,-20(fp)
    16f0:	10800117 	ldw	r2,4(r2)
    16f4:	18bff736 	bltu	r3,r2,16d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    16f8:	e0bffb17 	ldw	r2,-20(fp)
    16fc:	10c00d17 	ldw	r3,52(r2)
    1700:	e0bff917 	ldw	r2,-28(fp)
    1704:	18800326 	beq	r3,r2,1714 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    1708:	e0bffd17 	ldw	r2,-12(fp)
    170c:	10800048 	cmpgei	r2,r2,1
    1710:	103fcd1e 	bne	r2,zero,1648 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1714:	e0fffc17 	ldw	r3,-16(fp)
    1718:	e0bff617 	ldw	r2,-40(fp)
    171c:	18800526 	beq	r3,r2,1734 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    1720:	e0fffc17 	ldw	r3,-16(fp)
    1724:	e0bff617 	ldw	r2,-40(fp)
    1728:	1887c83a 	sub	r3,r3,r2
    172c:	e0ffff15 	stw	r3,-4(fp)
    1730:	00000906 	br	1758 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1734:	e0bffe17 	ldw	r2,-8(fp)
    1738:	1090000c 	andi	r2,r2,16384
    173c:	1005003a 	cmpeq	r2,r2,zero
    1740:	1000031e 	bne	r2,zero,1750 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    1744:	00bffd44 	movi	r2,-11
    1748:	e0bfff15 	stw	r2,-4(fp)
    174c:	00000206 	br	1758 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1750:	00bffec4 	movi	r2,-5
    1754:	e0bfff15 	stw	r2,-4(fp)
    1758:	e0bfff17 	ldw	r2,-4(fp)
}
    175c:	e037883a 	mov	sp,fp
    1760:	dfc00117 	ldw	ra,4(sp)
    1764:	df000017 	ldw	fp,0(sp)
    1768:	dec00204 	addi	sp,sp,8
    176c:	f800283a 	ret

00001770 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1770:	defff904 	addi	sp,sp,-28
    1774:	dfc00615 	stw	ra,24(sp)
    1778:	df000515 	stw	fp,20(sp)
    177c:	df000504 	addi	fp,sp,20
    1780:	e13ffe15 	stw	r4,-8(fp)
    1784:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1788:	e0bffe17 	ldw	r2,-8(fp)
    178c:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1790:	e0bffe17 	ldw	r2,-8(fp)
    1794:	10800104 	addi	r2,r2,4
    1798:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    179c:	0005303a 	rdctl	r2,status
    17a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    17a4:	e0fffc17 	ldw	r3,-16(fp)
    17a8:	00bfff84 	movi	r2,-2
    17ac:	1884703a 	and	r2,r3,r2
    17b0:	1001703a 	wrctl	status,r2
  
  return context;
    17b4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    17b8:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    17bc:	0000a940 	call	a94 <alt_tick>
    17c0:	e0bffd17 	ldw	r2,-12(fp)
    17c4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    17c8:	e0bffb17 	ldw	r2,-20(fp)
    17cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    17d0:	e037883a 	mov	sp,fp
    17d4:	dfc00117 	ldw	ra,4(sp)
    17d8:	df000017 	ldw	fp,0(sp)
    17dc:	dec00204 	addi	sp,sp,8
    17e0:	f800283a 	ret

000017e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    17e4:	defff904 	addi	sp,sp,-28
    17e8:	dfc00615 	stw	ra,24(sp)
    17ec:	df000515 	stw	fp,20(sp)
    17f0:	df000504 	addi	fp,sp,20
    17f4:	e13ffc15 	stw	r4,-16(fp)
    17f8:	e17ffd15 	stw	r5,-12(fp)
    17fc:	e1bffe15 	stw	r6,-8(fp)
    1800:	e1ffff15 	stw	r7,-4(fp)
    1804:	e0bfff17 	ldw	r2,-4(fp)
    1808:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    180c:	00800034 	movhi	r2,0
    1810:	10977604 	addi	r2,r2,24024
    1814:	10800017 	ldw	r2,0(r2)
    1818:	1004c03a 	cmpne	r2,r2,zero
    181c:	1000041e 	bne	r2,zero,1830 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    1820:	00c00034 	movhi	r3,0
    1824:	18d77604 	addi	r3,r3,24024
    1828:	e0bffb17 	ldw	r2,-20(fp)
    182c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1830:	e0bffc17 	ldw	r2,-16(fp)
    1834:	10800104 	addi	r2,r2,4
    1838:	1007883a 	mov	r3,r2
    183c:	008001c4 	movi	r2,7
    1840:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1844:	e13ffe17 	ldw	r4,-8(fp)
    1848:	e17ffc17 	ldw	r5,-16(fp)
    184c:	01800034 	movhi	r6,0
    1850:	3185dc04 	addi	r6,r6,6000
    1854:	00006e40 	call	6e4 <alt_irq_register>
#endif  
}
    1858:	e037883a 	mov	sp,fp
    185c:	dfc00117 	ldw	ra,4(sp)
    1860:	df000017 	ldw	fp,0(sp)
    1864:	dec00204 	addi	sp,sp,8
    1868:	f800283a 	ret

0000186c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    186c:	defffd04 	addi	sp,sp,-12
    1870:	df000215 	stw	fp,8(sp)
    1874:	df000204 	addi	fp,sp,8
    1878:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    187c:	e0bfff17 	ldw	r2,-4(fp)
    1880:	10800a17 	ldw	r2,40(r2)
    1884:	10800104 	addi	r2,r2,4
    1888:	10800037 	ldwio	r2,0(r2)
    188c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    1890:	e0bffe17 	ldw	r2,-8(fp)
    1894:	10800054 	ori	r2,r2,1
    1898:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    189c:	e0bfff17 	ldw	r2,-4(fp)
    18a0:	10800a17 	ldw	r2,40(r2)
    18a4:	10800104 	addi	r2,r2,4
    18a8:	e0fffe17 	ldw	r3,-8(fp)
    18ac:	10c00035 	stwio	r3,0(r2)
}
    18b0:	e037883a 	mov	sp,fp
    18b4:	df000017 	ldw	fp,0(sp)
    18b8:	dec00104 	addi	sp,sp,4
    18bc:	f800283a 	ret

000018c0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    18c0:	defffd04 	addi	sp,sp,-12
    18c4:	df000215 	stw	fp,8(sp)
    18c8:	df000204 	addi	fp,sp,8
    18cc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    18d0:	e0bfff17 	ldw	r2,-4(fp)
    18d4:	10800a17 	ldw	r2,40(r2)
    18d8:	10800104 	addi	r2,r2,4
    18dc:	10800037 	ldwio	r2,0(r2)
    18e0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    18e4:	e0fffe17 	ldw	r3,-8(fp)
    18e8:	00bfff84 	movi	r2,-2
    18ec:	1884703a 	and	r2,r3,r2
    18f0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    18f4:	e0bfff17 	ldw	r2,-4(fp)
    18f8:	10800a17 	ldw	r2,40(r2)
    18fc:	10800104 	addi	r2,r2,4
    1900:	e0fffe17 	ldw	r3,-8(fp)
    1904:	10c00035 	stwio	r3,0(r2)
}
    1908:	e037883a 	mov	sp,fp
    190c:	df000017 	ldw	fp,0(sp)
    1910:	dec00104 	addi	sp,sp,4
    1914:	f800283a 	ret

00001918 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    1918:	defffd04 	addi	sp,sp,-12
    191c:	df000215 	stw	fp,8(sp)
    1920:	df000204 	addi	fp,sp,8
    1924:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    1928:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    192c:	e0bfff17 	ldw	r2,-4(fp)
    1930:	10800a17 	ldw	r2,40(r2)
    1934:	10800084 	addi	r2,r2,2
    1938:	1080002b 	ldhuio	r2,0(r2)
    193c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    1940:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1944:	e037883a 	mov	sp,fp
    1948:	df000017 	ldw	fp,0(sp)
    194c:	dec00104 	addi	sp,sp,4
    1950:	f800283a 	ret

00001954 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    1954:	defffd04 	addi	sp,sp,-12
    1958:	df000215 	stw	fp,8(sp)
    195c:	df000204 	addi	fp,sp,8
    1960:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1964:	e0bfff17 	ldw	r2,-4(fp)
    1968:	10800a17 	ldw	r2,40(r2)
    196c:	10800104 	addi	r2,r2,4
    1970:	10800037 	ldwio	r2,0(r2)
    1974:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    1978:	e0bffe17 	ldw	r2,-8(fp)
    197c:	10bfffec 	andhi	r2,r2,65535
    1980:	1004d43a 	srli	r2,r2,16
}
    1984:	e037883a 	mov	sp,fp
    1988:	df000017 	ldw	fp,0(sp)
    198c:	dec00104 	addi	sp,sp,4
    1990:	f800283a 	ret

00001994 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    1994:	defffc04 	addi	sp,sp,-16
    1998:	df000315 	stw	fp,12(sp)
    199c:	df000304 	addi	fp,sp,12
    19a0:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    19a4:	e0bffe17 	ldw	r2,-8(fp)
    19a8:	1080800c 	andi	r2,r2,512
    19ac:	1004d27a 	srli	r2,r2,9
    19b0:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    19b4:	e0bffd17 	ldw	r2,-12(fp)
    19b8:	1005003a 	cmpeq	r2,r2,zero
    19bc:	1000031e 	bne	r2,zero,19cc <alt_up_rs232_check_parity+0x38>
    19c0:	00bfffc4 	movi	r2,-1
    19c4:	e0bfff15 	stw	r2,-4(fp)
    19c8:	00000106 	br	19d0 <alt_up_rs232_check_parity+0x3c>
    19cc:	e03fff15 	stw	zero,-4(fp)
    19d0:	e0bfff17 	ldw	r2,-4(fp)
}
    19d4:	e037883a 	mov	sp,fp
    19d8:	df000017 	ldw	fp,0(sp)
    19dc:	dec00104 	addi	sp,sp,4
    19e0:	f800283a 	ret

000019e4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    19e4:	defffc04 	addi	sp,sp,-16
    19e8:	df000315 	stw	fp,12(sp)
    19ec:	df000304 	addi	fp,sp,12
    19f0:	e13ffe15 	stw	r4,-8(fp)
    19f4:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    19f8:	e0bffe17 	ldw	r2,-8(fp)
    19fc:	10800a17 	ldw	r2,40(r2)
    1a00:	10800037 	ldwio	r2,0(r2)
    1a04:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1a08:	e0bffe17 	ldw	r2,-8(fp)
    1a0c:	10800a17 	ldw	r2,40(r2)
    1a10:	e0ffff03 	ldbu	r3,-4(fp)
    1a14:	10c00035 	stwio	r3,0(r2)
	return 0;
    1a18:	0005883a 	mov	r2,zero
}
    1a1c:	e037883a 	mov	sp,fp
    1a20:	df000017 	ldw	fp,0(sp)
    1a24:	dec00104 	addi	sp,sp,4
    1a28:	f800283a 	ret

00001a2c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1a2c:	defffa04 	addi	sp,sp,-24
    1a30:	dfc00515 	stw	ra,20(sp)
    1a34:	df000415 	stw	fp,16(sp)
    1a38:	df000404 	addi	fp,sp,16
    1a3c:	e13ffd15 	stw	r4,-12(fp)
    1a40:	e17ffe15 	stw	r5,-8(fp)
    1a44:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1a48:	e0bffd17 	ldw	r2,-12(fp)
    1a4c:	10800a17 	ldw	r2,40(r2)
    1a50:	10800037 	ldwio	r2,0(r2)
    1a54:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1a58:	e0bffc17 	ldw	r2,-16(fp)
    1a5c:	1007883a 	mov	r3,r2
    1a60:	e0bffe17 	ldw	r2,-8(fp)
    1a64:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1a68:	e13ffc17 	ldw	r4,-16(fp)
    1a6c:	00019940 	call	1994 <alt_up_rs232_check_parity>
    1a70:	1007883a 	mov	r3,r2
    1a74:	e0bfff17 	ldw	r2,-4(fp)
    1a78:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    1a7c:	e0bffc17 	ldw	r2,-16(fp)
    1a80:	10a0000c 	andi	r2,r2,32768
    1a84:	1004d3fa 	srli	r2,r2,15
    1a88:	10bfffc4 	addi	r2,r2,-1
}
    1a8c:	e037883a 	mov	sp,fp
    1a90:	dfc00117 	ldw	ra,4(sp)
    1a94:	df000017 	ldw	fp,0(sp)
    1a98:	dec00204 	addi	sp,sp,8
    1a9c:	f800283a 	ret

00001aa0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1aa0:	defff804 	addi	sp,sp,-32
    1aa4:	dfc00715 	stw	ra,28(sp)
    1aa8:	df000615 	stw	fp,24(sp)
    1aac:	df000604 	addi	fp,sp,24
    1ab0:	e13ffd15 	stw	r4,-12(fp)
    1ab4:	e17ffe15 	stw	r5,-8(fp)
    1ab8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1abc:	e0bffd17 	ldw	r2,-12(fp)
    1ac0:	10800017 	ldw	r2,0(r2)
    1ac4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    1ac8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    1acc:	00000c06 	br	1b00 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1ad0:	e17ffe17 	ldw	r5,-8(fp)
    1ad4:	e0bffe17 	ldw	r2,-8(fp)
    1ad8:	10800044 	addi	r2,r2,1
    1adc:	e0bffe15 	stw	r2,-8(fp)
    1ae0:	e1bffc04 	addi	r6,fp,-16
    1ae4:	e13ffb17 	ldw	r4,-20(fp)
    1ae8:	0001a2c0 	call	1a2c <alt_up_rs232_read_data>
    1aec:	1004c03a 	cmpne	r2,r2,zero
    1af0:	1000091e 	bne	r2,zero,1b18 <alt_up_rs232_read_fd+0x78>
			count++;
    1af4:	e0bffa17 	ldw	r2,-24(fp)
    1af8:	10800044 	addi	r2,r2,1
    1afc:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1b00:	e0bfff17 	ldw	r2,-4(fp)
    1b04:	10bfffc4 	addi	r2,r2,-1
    1b08:	e0bfff15 	stw	r2,-4(fp)
    1b0c:	e0bfff17 	ldw	r2,-4(fp)
    1b10:	10bfffd8 	cmpnei	r2,r2,-1
    1b14:	103fee1e 	bne	r2,zero,1ad0 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    1b18:	e0bffa17 	ldw	r2,-24(fp)
}
    1b1c:	e037883a 	mov	sp,fp
    1b20:	dfc00117 	ldw	ra,4(sp)
    1b24:	df000017 	ldw	fp,0(sp)
    1b28:	dec00204 	addi	sp,sp,8
    1b2c:	f800283a 	ret

00001b30 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1b30:	defff904 	addi	sp,sp,-28
    1b34:	dfc00615 	stw	ra,24(sp)
    1b38:	df000515 	stw	fp,20(sp)
    1b3c:	df000504 	addi	fp,sp,20
    1b40:	e13ffd15 	stw	r4,-12(fp)
    1b44:	e17ffe15 	stw	r5,-8(fp)
    1b48:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	10800017 	ldw	r2,0(r2)
    1b54:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    1b58:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    1b5c:	00000d06 	br	1b94 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    1b60:	e0bffe17 	ldw	r2,-8(fp)
    1b64:	10800003 	ldbu	r2,0(r2)
    1b68:	11403fcc 	andi	r5,r2,255
    1b6c:	e13ffc17 	ldw	r4,-16(fp)
    1b70:	00019e40 	call	19e4 <alt_up_rs232_write_data>
    1b74:	1004c03a 	cmpne	r2,r2,zero
    1b78:	10000c1e 	bne	r2,zero,1bac <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    1b7c:	e0bffb17 	ldw	r2,-20(fp)
    1b80:	10800044 	addi	r2,r2,1
    1b84:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    1b88:	e0bffe17 	ldw	r2,-8(fp)
    1b8c:	10800044 	addi	r2,r2,1
    1b90:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    1b94:	e0bfff17 	ldw	r2,-4(fp)
    1b98:	10bfffc4 	addi	r2,r2,-1
    1b9c:	e0bfff15 	stw	r2,-4(fp)
    1ba0:	e0bfff17 	ldw	r2,-4(fp)
    1ba4:	10bfffd8 	cmpnei	r2,r2,-1
    1ba8:	103fed1e 	bne	r2,zero,1b60 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    1bac:	e0bffb17 	ldw	r2,-20(fp)
}
    1bb0:	e037883a 	mov	sp,fp
    1bb4:	dfc00117 	ldw	ra,4(sp)
    1bb8:	df000017 	ldw	fp,0(sp)
    1bbc:	dec00204 	addi	sp,sp,8
    1bc0:	f800283a 	ret

00001bc4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1bc4:	defffc04 	addi	sp,sp,-16
    1bc8:	dfc00315 	stw	ra,12(sp)
    1bcc:	df000215 	stw	fp,8(sp)
    1bd0:	df000204 	addi	fp,sp,8
    1bd4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1bd8:	e13fff17 	ldw	r4,-4(fp)
    1bdc:	01400034 	movhi	r5,0
    1be0:	29518104 	addi	r5,r5,17924
    1be4:	00020dc0 	call	20dc <alt_find_dev>
    1be8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1bec:	e0bffe17 	ldw	r2,-8(fp)
}
    1bf0:	e037883a 	mov	sp,fp
    1bf4:	dfc00117 	ldw	ra,4(sp)
    1bf8:	df000017 	ldw	fp,0(sp)
    1bfc:	dec00204 	addi	sp,sp,8
    1c00:	f800283a 	ret

00001c04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1c04:	defff404 	addi	sp,sp,-48
    1c08:	df000b15 	stw	fp,44(sp)
    1c0c:	df000b04 	addi	fp,sp,44
    1c10:	e13ffb15 	stw	r4,-20(fp)
    1c14:	e17ffc15 	stw	r5,-16(fp)
    1c18:	e1bffd15 	stw	r6,-12(fp)
    1c1c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1c20:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    1c24:	00800034 	movhi	r2,0
    1c28:	10977604 	addi	r2,r2,24024
    1c2c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    1c30:	1005003a 	cmpeq	r2,r2,zero
    1c34:	1000411e 	bne	r2,zero,1d3c <alt_alarm_start+0x138>
  {
    if (alarm)
    1c38:	e0bffb17 	ldw	r2,-20(fp)
    1c3c:	1005003a 	cmpeq	r2,r2,zero
    1c40:	10003b1e 	bne	r2,zero,1d30 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    1c44:	e0fffb17 	ldw	r3,-20(fp)
    1c48:	e0bffd17 	ldw	r2,-12(fp)
    1c4c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    1c50:	e0fffb17 	ldw	r3,-20(fp)
    1c54:	e0bffe17 	ldw	r2,-8(fp)
    1c58:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1c5c:	0005303a 	rdctl	r2,status
    1c60:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c64:	e0fff817 	ldw	r3,-32(fp)
    1c68:	00bfff84 	movi	r2,-2
    1c6c:	1884703a 	and	r2,r3,r2
    1c70:	1001703a 	wrctl	status,r2
  
  return context;
    1c74:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    1c78:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1c7c:	00800034 	movhi	r2,0
    1c80:	10977704 	addi	r2,r2,24028
    1c84:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    1c88:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1c8c:	e0fffc17 	ldw	r3,-16(fp)
    1c90:	e0bff917 	ldw	r2,-28(fp)
    1c94:	1885883a 	add	r2,r3,r2
    1c98:	10c00044 	addi	r3,r2,1
    1c9c:	e0bffb17 	ldw	r2,-20(fp)
    1ca0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1ca4:	e0bffb17 	ldw	r2,-20(fp)
    1ca8:	10c00217 	ldw	r3,8(r2)
    1cac:	e0bff917 	ldw	r2,-28(fp)
    1cb0:	1880042e 	bgeu	r3,r2,1cc4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    1cb4:	e0fffb17 	ldw	r3,-20(fp)
    1cb8:	00800044 	movi	r2,1
    1cbc:	18800405 	stb	r2,16(r3)
    1cc0:	00000206 	br	1ccc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    1cc4:	e0bffb17 	ldw	r2,-20(fp)
    1cc8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1ccc:	e0fffb17 	ldw	r3,-20(fp)
    1cd0:	00800034 	movhi	r2,0
    1cd4:	10917d04 	addi	r2,r2,17908
    1cd8:	e0bff615 	stw	r2,-40(fp)
    1cdc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1ce0:	e0fff717 	ldw	r3,-36(fp)
    1ce4:	e0bff617 	ldw	r2,-40(fp)
    1ce8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1cec:	e0bff617 	ldw	r2,-40(fp)
    1cf0:	10c00017 	ldw	r3,0(r2)
    1cf4:	e0bff717 	ldw	r2,-36(fp)
    1cf8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1cfc:	e0bff617 	ldw	r2,-40(fp)
    1d00:	10c00017 	ldw	r3,0(r2)
    1d04:	e0bff717 	ldw	r2,-36(fp)
    1d08:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    1d0c:	e0fff617 	ldw	r3,-40(fp)
    1d10:	e0bff717 	ldw	r2,-36(fp)
    1d14:	18800015 	stw	r2,0(r3)
    1d18:	e0bffa17 	ldw	r2,-24(fp)
    1d1c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1d20:	e0bff517 	ldw	r2,-44(fp)
    1d24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1d28:	e03fff15 	stw	zero,-4(fp)
    1d2c:	00000506 	br	1d44 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    1d30:	00bffa84 	movi	r2,-22
    1d34:	e0bfff15 	stw	r2,-4(fp)
    1d38:	00000206 	br	1d44 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    1d3c:	00bfde84 	movi	r2,-134
    1d40:	e0bfff15 	stw	r2,-4(fp)
    1d44:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    1d48:	e037883a 	mov	sp,fp
    1d4c:	df000017 	ldw	fp,0(sp)
    1d50:	dec00104 	addi	sp,sp,4
    1d54:	f800283a 	ret

00001d58 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1d58:	defff804 	addi	sp,sp,-32
    1d5c:	dfc00715 	stw	ra,28(sp)
    1d60:	df000615 	stw	fp,24(sp)
    1d64:	df000604 	addi	fp,sp,24
    1d68:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1d6c:	e0bffc17 	ldw	r2,-16(fp)
    1d70:	1004803a 	cmplt	r2,r2,zero
    1d74:	1000091e 	bne	r2,zero,1d9c <close+0x44>
    1d78:	e13ffc17 	ldw	r4,-16(fp)
    1d7c:	01400304 	movi	r5,12
    1d80:	0002d040 	call	2d04 <__mulsi3>
    1d84:	1007883a 	mov	r3,r2
    1d88:	00800034 	movhi	r2,0
    1d8c:	10901704 	addi	r2,r2,16476
    1d90:	1887883a 	add	r3,r3,r2
    1d94:	e0ffff15 	stw	r3,-4(fp)
    1d98:	00000106 	br	1da0 <close+0x48>
    1d9c:	e03fff15 	stw	zero,-4(fp)
    1da0:	e0bfff17 	ldw	r2,-4(fp)
    1da4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    1da8:	e0bffb17 	ldw	r2,-20(fp)
    1dac:	1005003a 	cmpeq	r2,r2,zero
    1db0:	10001d1e 	bne	r2,zero,1e28 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1db4:	e0bffb17 	ldw	r2,-20(fp)
    1db8:	10800017 	ldw	r2,0(r2)
    1dbc:	10800417 	ldw	r2,16(r2)
    1dc0:	1005003a 	cmpeq	r2,r2,zero
    1dc4:	1000071e 	bne	r2,zero,1de4 <close+0x8c>
    1dc8:	e0bffb17 	ldw	r2,-20(fp)
    1dcc:	10800017 	ldw	r2,0(r2)
    1dd0:	10800417 	ldw	r2,16(r2)
    1dd4:	e13ffb17 	ldw	r4,-20(fp)
    1dd8:	103ee83a 	callr	r2
    1ddc:	e0bffe15 	stw	r2,-8(fp)
    1de0:	00000106 	br	1de8 <close+0x90>
    1de4:	e03ffe15 	stw	zero,-8(fp)
    1de8:	e0bffe17 	ldw	r2,-8(fp)
    1dec:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1df0:	e13ffc17 	ldw	r4,-16(fp)
    1df4:	00025c00 	call	25c0 <alt_release_fd>
    if (rval < 0)
    1df8:	e0bffa17 	ldw	r2,-24(fp)
    1dfc:	1004403a 	cmpge	r2,r2,zero
    1e00:	1000071e 	bne	r2,zero,1e20 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    1e04:	0001e580 	call	1e58 <alt_get_errno>
    1e08:	e0fffa17 	ldw	r3,-24(fp)
    1e0c:	00c7c83a 	sub	r3,zero,r3
    1e10:	10c00015 	stw	r3,0(r2)
      return -1;
    1e14:	00bfffc4 	movi	r2,-1
    1e18:	e0bffd15 	stw	r2,-12(fp)
    1e1c:	00000806 	br	1e40 <close+0xe8>
    }
    return 0;
    1e20:	e03ffd15 	stw	zero,-12(fp)
    1e24:	00000606 	br	1e40 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1e28:	0001e580 	call	1e58 <alt_get_errno>
    1e2c:	1007883a 	mov	r3,r2
    1e30:	00801444 	movi	r2,81
    1e34:	18800015 	stw	r2,0(r3)
    return -1;
    1e38:	00bfffc4 	movi	r2,-1
    1e3c:	e0bffd15 	stw	r2,-12(fp)
    1e40:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    1e44:	e037883a 	mov	sp,fp
    1e48:	dfc00117 	ldw	ra,4(sp)
    1e4c:	df000017 	ldw	fp,0(sp)
    1e50:	dec00204 	addi	sp,sp,8
    1e54:	f800283a 	ret

00001e58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1e58:	defffd04 	addi	sp,sp,-12
    1e5c:	dfc00215 	stw	ra,8(sp)
    1e60:	df000115 	stw	fp,4(sp)
    1e64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1e68:	00800034 	movhi	r2,0
    1e6c:	10918404 	addi	r2,r2,17936
    1e70:	10800017 	ldw	r2,0(r2)
    1e74:	1005003a 	cmpeq	r2,r2,zero
    1e78:	1000061e 	bne	r2,zero,1e94 <alt_get_errno+0x3c>
    1e7c:	00800034 	movhi	r2,0
    1e80:	10918404 	addi	r2,r2,17936
    1e84:	10800017 	ldw	r2,0(r2)
    1e88:	103ee83a 	callr	r2
    1e8c:	e0bfff15 	stw	r2,-4(fp)
    1e90:	00000306 	br	1ea0 <alt_get_errno+0x48>
    1e94:	00800034 	movhi	r2,0
    1e98:	10977804 	addi	r2,r2,24032
    1e9c:	e0bfff15 	stw	r2,-4(fp)
    1ea0:	e0bfff17 	ldw	r2,-4(fp)
}
    1ea4:	e037883a 	mov	sp,fp
    1ea8:	dfc00117 	ldw	ra,4(sp)
    1eac:	df000017 	ldw	fp,0(sp)
    1eb0:	dec00204 	addi	sp,sp,8
    1eb4:	f800283a 	ret

00001eb8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1eb8:	deffff04 	addi	sp,sp,-4
    1ebc:	df000015 	stw	fp,0(sp)
    1ec0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    1ec4:	e037883a 	mov	sp,fp
    1ec8:	df000017 	ldw	fp,0(sp)
    1ecc:	dec00104 	addi	sp,sp,4
    1ed0:	f800283a 	ret

00001ed4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1ed4:	defffc04 	addi	sp,sp,-16
    1ed8:	df000315 	stw	fp,12(sp)
    1edc:	df000304 	addi	fp,sp,12
    1ee0:	e13ffd15 	stw	r4,-12(fp)
    1ee4:	e17ffe15 	stw	r5,-8(fp)
    1ee8:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1eec:	e0bfff17 	ldw	r2,-4(fp)
}
    1ef0:	e037883a 	mov	sp,fp
    1ef4:	df000017 	ldw	fp,0(sp)
    1ef8:	dec00104 	addi	sp,sp,4
    1efc:	f800283a 	ret

00001f00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1f00:	defff904 	addi	sp,sp,-28
    1f04:	dfc00615 	stw	ra,24(sp)
    1f08:	df000515 	stw	fp,20(sp)
    1f0c:	df000504 	addi	fp,sp,20
    1f10:	e13ffd15 	stw	r4,-12(fp)
    1f14:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1f18:	e0bffd17 	ldw	r2,-12(fp)
    1f1c:	1005003a 	cmpeq	r2,r2,zero
    1f20:	1000041e 	bne	r2,zero,1f34 <alt_dev_llist_insert+0x34>
    1f24:	e0bffd17 	ldw	r2,-12(fp)
    1f28:	10800217 	ldw	r2,8(r2)
    1f2c:	1004c03a 	cmpne	r2,r2,zero
    1f30:	1000071e 	bne	r2,zero,1f50 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    1f34:	0001fb40 	call	1fb4 <alt_get_errno>
    1f38:	1007883a 	mov	r3,r2
    1f3c:	00800584 	movi	r2,22
    1f40:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1f44:	00bffa84 	movi	r2,-22
    1f48:	e0bfff15 	stw	r2,-4(fp)
    1f4c:	00001306 	br	1f9c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1f50:	e0fffd17 	ldw	r3,-12(fp)
    1f54:	e0bffe17 	ldw	r2,-8(fp)
    1f58:	e0bffb15 	stw	r2,-20(fp)
    1f5c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1f60:	e0fffc17 	ldw	r3,-16(fp)
    1f64:	e0bffb17 	ldw	r2,-20(fp)
    1f68:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    1f6c:	e0bffb17 	ldw	r2,-20(fp)
    1f70:	10c00017 	ldw	r3,0(r2)
    1f74:	e0bffc17 	ldw	r2,-16(fp)
    1f78:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1f7c:	e0bffb17 	ldw	r2,-20(fp)
    1f80:	10c00017 	ldw	r3,0(r2)
    1f84:	e0bffc17 	ldw	r2,-16(fp)
    1f88:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    1f8c:	e0fffb17 	ldw	r3,-20(fp)
    1f90:	e0bffc17 	ldw	r2,-16(fp)
    1f94:	18800015 	stw	r2,0(r3)

  return 0;  
    1f98:	e03fff15 	stw	zero,-4(fp)
    1f9c:	e0bfff17 	ldw	r2,-4(fp)
}
    1fa0:	e037883a 	mov	sp,fp
    1fa4:	dfc00117 	ldw	ra,4(sp)
    1fa8:	df000017 	ldw	fp,0(sp)
    1fac:	dec00204 	addi	sp,sp,8
    1fb0:	f800283a 	ret

00001fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1fb4:	defffd04 	addi	sp,sp,-12
    1fb8:	dfc00215 	stw	ra,8(sp)
    1fbc:	df000115 	stw	fp,4(sp)
    1fc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    1fc4:	00800034 	movhi	r2,0
    1fc8:	10918404 	addi	r2,r2,17936
    1fcc:	10800017 	ldw	r2,0(r2)
    1fd0:	1005003a 	cmpeq	r2,r2,zero
    1fd4:	1000061e 	bne	r2,zero,1ff0 <alt_get_errno+0x3c>
    1fd8:	00800034 	movhi	r2,0
    1fdc:	10918404 	addi	r2,r2,17936
    1fe0:	10800017 	ldw	r2,0(r2)
    1fe4:	103ee83a 	callr	r2
    1fe8:	e0bfff15 	stw	r2,-4(fp)
    1fec:	00000306 	br	1ffc <alt_get_errno+0x48>
    1ff0:	00800034 	movhi	r2,0
    1ff4:	10977804 	addi	r2,r2,24032
    1ff8:	e0bfff15 	stw	r2,-4(fp)
    1ffc:	e0bfff17 	ldw	r2,-4(fp)
}
    2000:	e037883a 	mov	sp,fp
    2004:	dfc00117 	ldw	ra,4(sp)
    2008:	df000017 	ldw	fp,0(sp)
    200c:	dec00204 	addi	sp,sp,8
    2010:	f800283a 	ret

00002014 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2014:	defffd04 	addi	sp,sp,-12
    2018:	dfc00215 	stw	ra,8(sp)
    201c:	df000115 	stw	fp,4(sp)
    2020:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2024:	00bfff04 	movi	r2,-4
    2028:	00c00034 	movhi	r3,0
    202c:	18cb6804 	addi	r3,r3,11680
    2030:	1885883a 	add	r2,r3,r2
    2034:	e0bfff15 	stw	r2,-4(fp)
    2038:	00000606 	br	2054 <_do_ctors+0x40>
        (*ctor) (); 
    203c:	e0bfff17 	ldw	r2,-4(fp)
    2040:	10800017 	ldw	r2,0(r2)
    2044:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2048:	e0bfff17 	ldw	r2,-4(fp)
    204c:	10bfff04 	addi	r2,r2,-4
    2050:	e0bfff15 	stw	r2,-4(fp)
    2054:	e0ffff17 	ldw	r3,-4(fp)
    2058:	00800034 	movhi	r2,0
    205c:	108b6704 	addi	r2,r2,11676
    2060:	18bff62e 	bgeu	r3,r2,203c <_do_ctors+0x28>
        (*ctor) (); 
}
    2064:	e037883a 	mov	sp,fp
    2068:	dfc00117 	ldw	ra,4(sp)
    206c:	df000017 	ldw	fp,0(sp)
    2070:	dec00204 	addi	sp,sp,8
    2074:	f800283a 	ret

00002078 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2078:	defffd04 	addi	sp,sp,-12
    207c:	dfc00215 	stw	ra,8(sp)
    2080:	df000115 	stw	fp,4(sp)
    2084:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2088:	00bfff04 	movi	r2,-4
    208c:	00c00034 	movhi	r3,0
    2090:	18cb6804 	addi	r3,r3,11680
    2094:	1885883a 	add	r2,r3,r2
    2098:	e0bfff15 	stw	r2,-4(fp)
    209c:	00000606 	br	20b8 <_do_dtors+0x40>
        (*dtor) (); 
    20a0:	e0bfff17 	ldw	r2,-4(fp)
    20a4:	10800017 	ldw	r2,0(r2)
    20a8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    20ac:	e0bfff17 	ldw	r2,-4(fp)
    20b0:	10bfff04 	addi	r2,r2,-4
    20b4:	e0bfff15 	stw	r2,-4(fp)
    20b8:	e0ffff17 	ldw	r3,-4(fp)
    20bc:	00800034 	movhi	r2,0
    20c0:	108b6804 	addi	r2,r2,11680
    20c4:	18bff62e 	bgeu	r3,r2,20a0 <_do_dtors+0x28>
        (*dtor) (); 
}
    20c8:	e037883a 	mov	sp,fp
    20cc:	dfc00117 	ldw	ra,4(sp)
    20d0:	df000017 	ldw	fp,0(sp)
    20d4:	dec00204 	addi	sp,sp,8
    20d8:	f800283a 	ret

000020dc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    20dc:	defff904 	addi	sp,sp,-28
    20e0:	dfc00615 	stw	ra,24(sp)
    20e4:	df000515 	stw	fp,20(sp)
    20e8:	df000504 	addi	fp,sp,20
    20ec:	e13ffd15 	stw	r4,-12(fp)
    20f0:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    20f4:	e0bffe17 	ldw	r2,-8(fp)
    20f8:	10800017 	ldw	r2,0(r2)
    20fc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2100:	e13ffd17 	ldw	r4,-12(fp)
    2104:	00029a80 	call	29a8 <strlen>
    2108:	10800044 	addi	r2,r2,1
    210c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2110:	00000d06 	br	2148 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2114:	e0bffc17 	ldw	r2,-16(fp)
    2118:	11000217 	ldw	r4,8(r2)
    211c:	e1bffb17 	ldw	r6,-20(fp)
    2120:	e17ffd17 	ldw	r5,-12(fp)
    2124:	00028940 	call	2894 <memcmp>
    2128:	1004c03a 	cmpne	r2,r2,zero
    212c:	1000031e 	bne	r2,zero,213c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    2130:	e0bffc17 	ldw	r2,-16(fp)
    2134:	e0bfff15 	stw	r2,-4(fp)
    2138:	00000706 	br	2158 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    213c:	e0bffc17 	ldw	r2,-16(fp)
    2140:	10800017 	ldw	r2,0(r2)
    2144:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2148:	e0fffe17 	ldw	r3,-8(fp)
    214c:	e0bffc17 	ldw	r2,-16(fp)
    2150:	10fff01e 	bne	r2,r3,2114 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2154:	e03fff15 	stw	zero,-4(fp)
    2158:	e0bfff17 	ldw	r2,-4(fp)
}
    215c:	e037883a 	mov	sp,fp
    2160:	dfc00117 	ldw	ra,4(sp)
    2164:	df000017 	ldw	fp,0(sp)
    2168:	dec00204 	addi	sp,sp,8
    216c:	f800283a 	ret

00002170 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2170:	deffff04 	addi	sp,sp,-4
    2174:	df000015 	stw	fp,0(sp)
    2178:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    217c:	e037883a 	mov	sp,fp
    2180:	df000017 	ldw	fp,0(sp)
    2184:	dec00104 	addi	sp,sp,4
    2188:	f800283a 	ret

0000218c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    218c:	defff804 	addi	sp,sp,-32
    2190:	dfc00715 	stw	ra,28(sp)
    2194:	df000615 	stw	fp,24(sp)
    2198:	dc000515 	stw	r16,20(sp)
    219c:	df000504 	addi	fp,sp,20
    21a0:	e13ffc15 	stw	r4,-16(fp)
    21a4:	e17ffd15 	stw	r5,-12(fp)
    21a8:	e1bffe15 	stw	r6,-8(fp)
    21ac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    21b0:	e13ffd17 	ldw	r4,-12(fp)
    21b4:	e17ffe17 	ldw	r5,-8(fp)
    21b8:	e1bfff17 	ldw	r6,-4(fp)
    21bc:	00023d40 	call	23d4 <open>
    21c0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    21c4:	e0bffb17 	ldw	r2,-20(fp)
    21c8:	1004803a 	cmplt	r2,r2,zero
    21cc:	10001f1e 	bne	r2,zero,224c <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    21d0:	e13ffb17 	ldw	r4,-20(fp)
    21d4:	04000034 	movhi	r16,0
    21d8:	84101704 	addi	r16,r16,16476
    21dc:	01400304 	movi	r5,12
    21e0:	0002d040 	call	2d04 <__mulsi3>
    21e4:	1405883a 	add	r2,r2,r16
    21e8:	10c00017 	ldw	r3,0(r2)
    21ec:	e0bffc17 	ldw	r2,-16(fp)
    21f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    21f4:	e13ffb17 	ldw	r4,-20(fp)
    21f8:	04000034 	movhi	r16,0
    21fc:	84101704 	addi	r16,r16,16476
    2200:	01400304 	movi	r5,12
    2204:	0002d040 	call	2d04 <__mulsi3>
    2208:	1405883a 	add	r2,r2,r16
    220c:	10800104 	addi	r2,r2,4
    2210:	10c00017 	ldw	r3,0(r2)
    2214:	e0bffc17 	ldw	r2,-16(fp)
    2218:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    221c:	e13ffb17 	ldw	r4,-20(fp)
    2220:	04000034 	movhi	r16,0
    2224:	84101704 	addi	r16,r16,16476
    2228:	01400304 	movi	r5,12
    222c:	0002d040 	call	2d04 <__mulsi3>
    2230:	1405883a 	add	r2,r2,r16
    2234:	10800204 	addi	r2,r2,8
    2238:	10c00017 	ldw	r3,0(r2)
    223c:	e0bffc17 	ldw	r2,-16(fp)
    2240:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2244:	e13ffb17 	ldw	r4,-20(fp)
    2248:	00025c00 	call	25c0 <alt_release_fd>
  }
} 
    224c:	e037883a 	mov	sp,fp
    2250:	dfc00217 	ldw	ra,8(sp)
    2254:	df000117 	ldw	fp,4(sp)
    2258:	dc000017 	ldw	r16,0(sp)
    225c:	dec00304 	addi	sp,sp,12
    2260:	f800283a 	ret

00002264 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2264:	defffb04 	addi	sp,sp,-20
    2268:	dfc00415 	stw	ra,16(sp)
    226c:	df000315 	stw	fp,12(sp)
    2270:	df000304 	addi	fp,sp,12
    2274:	e13ffd15 	stw	r4,-12(fp)
    2278:	e17ffe15 	stw	r5,-8(fp)
    227c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2280:	01000034 	movhi	r4,0
    2284:	21101a04 	addi	r4,r4,16488
    2288:	e17ffd17 	ldw	r5,-12(fp)
    228c:	01800044 	movi	r6,1
    2290:	01c07fc4 	movi	r7,511
    2294:	000218c0 	call	218c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2298:	01000034 	movhi	r4,0
    229c:	21101704 	addi	r4,r4,16476
    22a0:	e17ffe17 	ldw	r5,-8(fp)
    22a4:	000d883a 	mov	r6,zero
    22a8:	01c07fc4 	movi	r7,511
    22ac:	000218c0 	call	218c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    22b0:	01000034 	movhi	r4,0
    22b4:	21101d04 	addi	r4,r4,16500
    22b8:	e17fff17 	ldw	r5,-4(fp)
    22bc:	01800044 	movi	r6,1
    22c0:	01c07fc4 	movi	r7,511
    22c4:	000218c0 	call	218c <alt_open_fd>
}  
    22c8:	e037883a 	mov	sp,fp
    22cc:	dfc00117 	ldw	ra,4(sp)
    22d0:	df000017 	ldw	fp,0(sp)
    22d4:	dec00204 	addi	sp,sp,8
    22d8:	f800283a 	ret

000022dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    22dc:	defffa04 	addi	sp,sp,-24
    22e0:	dfc00515 	stw	ra,20(sp)
    22e4:	df000415 	stw	fp,16(sp)
    22e8:	dc000315 	stw	r16,12(sp)
    22ec:	df000304 	addi	fp,sp,12
    22f0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    22f4:	e0bffe17 	ldw	r2,-8(fp)
    22f8:	10800217 	ldw	r2,8(r2)
    22fc:	10d00034 	orhi	r3,r2,16384
    2300:	e0bffe17 	ldw	r2,-8(fp)
    2304:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2308:	e03ffd15 	stw	zero,-12(fp)
    230c:	00002306 	br	239c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2310:	e13ffd17 	ldw	r4,-12(fp)
    2314:	04000034 	movhi	r16,0
    2318:	84101704 	addi	r16,r16,16476
    231c:	01400304 	movi	r5,12
    2320:	0002d040 	call	2d04 <__mulsi3>
    2324:	1405883a 	add	r2,r2,r16
    2328:	10c00017 	ldw	r3,0(r2)
    232c:	e0bffe17 	ldw	r2,-8(fp)
    2330:	10800017 	ldw	r2,0(r2)
    2334:	1880161e 	bne	r3,r2,2390 <alt_file_locked+0xb4>
    2338:	e13ffd17 	ldw	r4,-12(fp)
    233c:	04000034 	movhi	r16,0
    2340:	84101704 	addi	r16,r16,16476
    2344:	01400304 	movi	r5,12
    2348:	0002d040 	call	2d04 <__mulsi3>
    234c:	1405883a 	add	r2,r2,r16
    2350:	10800204 	addi	r2,r2,8
    2354:	10800017 	ldw	r2,0(r2)
    2358:	1004403a 	cmpge	r2,r2,zero
    235c:	10000c1e 	bne	r2,zero,2390 <alt_file_locked+0xb4>
    2360:	e13ffd17 	ldw	r4,-12(fp)
    2364:	01400304 	movi	r5,12
    2368:	0002d040 	call	2d04 <__mulsi3>
    236c:	1007883a 	mov	r3,r2
    2370:	00800034 	movhi	r2,0
    2374:	10901704 	addi	r2,r2,16476
    2378:	1887883a 	add	r3,r3,r2
    237c:	e0bffe17 	ldw	r2,-8(fp)
    2380:	18800326 	beq	r3,r2,2390 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2384:	00bffcc4 	movi	r2,-13
    2388:	e0bfff15 	stw	r2,-4(fp)
    238c:	00000a06 	br	23b8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2390:	e0bffd17 	ldw	r2,-12(fp)
    2394:	10800044 	addi	r2,r2,1
    2398:	e0bffd15 	stw	r2,-12(fp)
    239c:	00800034 	movhi	r2,0
    23a0:	10918304 	addi	r2,r2,17932
    23a4:	10800017 	ldw	r2,0(r2)
    23a8:	1007883a 	mov	r3,r2
    23ac:	e0bffd17 	ldw	r2,-12(fp)
    23b0:	18bfd72e 	bgeu	r3,r2,2310 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    23b4:	e03fff15 	stw	zero,-4(fp)
    23b8:	e0bfff17 	ldw	r2,-4(fp)
}
    23bc:	e037883a 	mov	sp,fp
    23c0:	dfc00217 	ldw	ra,8(sp)
    23c4:	df000117 	ldw	fp,4(sp)
    23c8:	dc000017 	ldw	r16,0(sp)
    23cc:	dec00304 	addi	sp,sp,12
    23d0:	f800283a 	ret

000023d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    23d4:	defff404 	addi	sp,sp,-48
    23d8:	dfc00b15 	stw	ra,44(sp)
    23dc:	df000a15 	stw	fp,40(sp)
    23e0:	df000a04 	addi	fp,sp,40
    23e4:	e13ffb15 	stw	r4,-20(fp)
    23e8:	e17ffc15 	stw	r5,-16(fp)
    23ec:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    23f0:	00bfffc4 	movi	r2,-1
    23f4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    23f8:	00bffb44 	movi	r2,-19
    23fc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    2400:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2404:	e13ffb17 	ldw	r4,-20(fp)
    2408:	01400034 	movhi	r5,0
    240c:	29518104 	addi	r5,r5,17924
    2410:	00020dc0 	call	20dc <alt_find_dev>
    2414:	e0bffa15 	stw	r2,-24(fp)
    2418:	e0bffa17 	ldw	r2,-24(fp)
    241c:	1004c03a 	cmpne	r2,r2,zero
    2420:	1000051e 	bne	r2,zero,2438 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2424:	e13ffb17 	ldw	r4,-20(fp)
    2428:	00026580 	call	2658 <alt_find_file>
    242c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    2430:	00800044 	movi	r2,1
    2434:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2438:	e0bffa17 	ldw	r2,-24(fp)
    243c:	1005003a 	cmpeq	r2,r2,zero
    2440:	1000311e 	bne	r2,zero,2508 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2444:	e13ffa17 	ldw	r4,-24(fp)
    2448:	00027780 	call	2778 <alt_get_fd>
    244c:	e0bff815 	stw	r2,-32(fp)
    2450:	e0bff817 	ldw	r2,-32(fp)
    2454:	1004403a 	cmpge	r2,r2,zero
    2458:	1000031e 	bne	r2,zero,2468 <open+0x94>
    {
      status = index;
    245c:	e0bff817 	ldw	r2,-32(fp)
    2460:	e0bff715 	stw	r2,-36(fp)
    2464:	00002a06 	br	2510 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    2468:	e13ff817 	ldw	r4,-32(fp)
    246c:	01400304 	movi	r5,12
    2470:	0002d040 	call	2d04 <__mulsi3>
    2474:	1007883a 	mov	r3,r2
    2478:	00800034 	movhi	r2,0
    247c:	10901704 	addi	r2,r2,16476
    2480:	1885883a 	add	r2,r3,r2
    2484:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2488:	e0fffc17 	ldw	r3,-16(fp)
    248c:	00900034 	movhi	r2,16384
    2490:	10bfffc4 	addi	r2,r2,-1
    2494:	1886703a 	and	r3,r3,r2
    2498:	e0bff917 	ldw	r2,-28(fp)
    249c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    24a0:	e0bff617 	ldw	r2,-40(fp)
    24a4:	1004c03a 	cmpne	r2,r2,zero
    24a8:	1000061e 	bne	r2,zero,24c4 <open+0xf0>
    24ac:	e13ff917 	ldw	r4,-28(fp)
    24b0:	00022dc0 	call	22dc <alt_file_locked>
    24b4:	e0bff715 	stw	r2,-36(fp)
    24b8:	e0bff717 	ldw	r2,-36(fp)
    24bc:	1004803a 	cmplt	r2,r2,zero
    24c0:	1000131e 	bne	r2,zero,2510 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    24c4:	e0bffa17 	ldw	r2,-24(fp)
    24c8:	10800317 	ldw	r2,12(r2)
    24cc:	1005003a 	cmpeq	r2,r2,zero
    24d0:	1000091e 	bne	r2,zero,24f8 <open+0x124>
    24d4:	e0bffa17 	ldw	r2,-24(fp)
    24d8:	10800317 	ldw	r2,12(r2)
    24dc:	e13ff917 	ldw	r4,-28(fp)
    24e0:	e17ffb17 	ldw	r5,-20(fp)
    24e4:	e1bffc17 	ldw	r6,-16(fp)
    24e8:	e1fffd17 	ldw	r7,-12(fp)
    24ec:	103ee83a 	callr	r2
    24f0:	e0bfff15 	stw	r2,-4(fp)
    24f4:	00000106 	br	24fc <open+0x128>
    24f8:	e03fff15 	stw	zero,-4(fp)
    24fc:	e0bfff17 	ldw	r2,-4(fp)
    2500:	e0bff715 	stw	r2,-36(fp)
    2504:	00000206 	br	2510 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2508:	00bffb44 	movi	r2,-19
    250c:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2510:	e0bff717 	ldw	r2,-36(fp)
    2514:	1004403a 	cmpge	r2,r2,zero
    2518:	1000091e 	bne	r2,zero,2540 <open+0x16c>
  {
    alt_release_fd (index);  
    251c:	e13ff817 	ldw	r4,-32(fp)
    2520:	00025c00 	call	25c0 <alt_release_fd>
    ALT_ERRNO = -status;
    2524:	00025600 	call	2560 <alt_get_errno>
    2528:	e0fff717 	ldw	r3,-36(fp)
    252c:	00c7c83a 	sub	r3,zero,r3
    2530:	10c00015 	stw	r3,0(r2)
    return -1;
    2534:	00bfffc4 	movi	r2,-1
    2538:	e0bffe15 	stw	r2,-8(fp)
    253c:	00000206 	br	2548 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    2540:	e0bff817 	ldw	r2,-32(fp)
    2544:	e0bffe15 	stw	r2,-8(fp)
    2548:	e0bffe17 	ldw	r2,-8(fp)
}
    254c:	e037883a 	mov	sp,fp
    2550:	dfc00117 	ldw	ra,4(sp)
    2554:	df000017 	ldw	fp,0(sp)
    2558:	dec00204 	addi	sp,sp,8
    255c:	f800283a 	ret

00002560 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2560:	defffd04 	addi	sp,sp,-12
    2564:	dfc00215 	stw	ra,8(sp)
    2568:	df000115 	stw	fp,4(sp)
    256c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2570:	00800034 	movhi	r2,0
    2574:	10918404 	addi	r2,r2,17936
    2578:	10800017 	ldw	r2,0(r2)
    257c:	1005003a 	cmpeq	r2,r2,zero
    2580:	1000061e 	bne	r2,zero,259c <alt_get_errno+0x3c>
    2584:	00800034 	movhi	r2,0
    2588:	10918404 	addi	r2,r2,17936
    258c:	10800017 	ldw	r2,0(r2)
    2590:	103ee83a 	callr	r2
    2594:	e0bfff15 	stw	r2,-4(fp)
    2598:	00000306 	br	25a8 <alt_get_errno+0x48>
    259c:	00800034 	movhi	r2,0
    25a0:	10977804 	addi	r2,r2,24032
    25a4:	e0bfff15 	stw	r2,-4(fp)
    25a8:	e0bfff17 	ldw	r2,-4(fp)
}
    25ac:	e037883a 	mov	sp,fp
    25b0:	dfc00117 	ldw	ra,4(sp)
    25b4:	df000017 	ldw	fp,0(sp)
    25b8:	dec00204 	addi	sp,sp,8
    25bc:	f800283a 	ret

000025c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    25c0:	defffc04 	addi	sp,sp,-16
    25c4:	dfc00315 	stw	ra,12(sp)
    25c8:	df000215 	stw	fp,8(sp)
    25cc:	dc000115 	stw	r16,4(sp)
    25d0:	df000104 	addi	fp,sp,4
    25d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    25d8:	e0bfff17 	ldw	r2,-4(fp)
    25dc:	108000d0 	cmplti	r2,r2,3
    25e0:	10000f1e 	bne	r2,zero,2620 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    25e4:	e13fff17 	ldw	r4,-4(fp)
    25e8:	04000034 	movhi	r16,0
    25ec:	84101704 	addi	r16,r16,16476
    25f0:	01400304 	movi	r5,12
    25f4:	0002d040 	call	2d04 <__mulsi3>
    25f8:	1405883a 	add	r2,r2,r16
    25fc:	10800204 	addi	r2,r2,8
    2600:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2604:	e13fff17 	ldw	r4,-4(fp)
    2608:	04000034 	movhi	r16,0
    260c:	84101704 	addi	r16,r16,16476
    2610:	01400304 	movi	r5,12
    2614:	0002d040 	call	2d04 <__mulsi3>
    2618:	1405883a 	add	r2,r2,r16
    261c:	10000015 	stw	zero,0(r2)
  }
}
    2620:	e037883a 	mov	sp,fp
    2624:	dfc00217 	ldw	ra,8(sp)
    2628:	df000117 	ldw	fp,4(sp)
    262c:	dc000017 	ldw	r16,0(sp)
    2630:	dec00304 	addi	sp,sp,12
    2634:	f800283a 	ret

00002638 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2638:	deffff04 	addi	sp,sp,-4
    263c:	df000015 	stw	fp,0(sp)
    2640:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2644:	000170fa 	wrctl	ienable,zero
}
    2648:	e037883a 	mov	sp,fp
    264c:	df000017 	ldw	fp,0(sp)
    2650:	dec00104 	addi	sp,sp,4
    2654:	f800283a 	ret

00002658 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2658:	defffa04 	addi	sp,sp,-24
    265c:	dfc00515 	stw	ra,20(sp)
    2660:	df000415 	stw	fp,16(sp)
    2664:	df000404 	addi	fp,sp,16
    2668:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    266c:	00800034 	movhi	r2,0
    2670:	10917f04 	addi	r2,r2,17916
    2674:	10800017 	ldw	r2,0(r2)
    2678:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    267c:	00003306 	br	274c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    2680:	e0bffd17 	ldw	r2,-12(fp)
    2684:	11000217 	ldw	r4,8(r2)
    2688:	00029a80 	call	29a8 <strlen>
    268c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    2690:	e0bffd17 	ldw	r2,-12(fp)
    2694:	10c00217 	ldw	r3,8(r2)
    2698:	e0bffc17 	ldw	r2,-16(fp)
    269c:	1885883a 	add	r2,r3,r2
    26a0:	10bfffc4 	addi	r2,r2,-1
    26a4:	10800003 	ldbu	r2,0(r2)
    26a8:	10803fcc 	andi	r2,r2,255
    26ac:	1080201c 	xori	r2,r2,128
    26b0:	10bfe004 	addi	r2,r2,-128
    26b4:	10800bd8 	cmpnei	r2,r2,47
    26b8:	1000031e 	bne	r2,zero,26c8 <alt_find_file+0x70>
    {
      len -= 1;
    26bc:	e0bffc17 	ldw	r2,-16(fp)
    26c0:	10bfffc4 	addi	r2,r2,-1
    26c4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    26c8:	e0bffc17 	ldw	r2,-16(fp)
    26cc:	1007883a 	mov	r3,r2
    26d0:	e0bffe17 	ldw	r2,-8(fp)
    26d4:	1885883a 	add	r2,r3,r2
    26d8:	10800003 	ldbu	r2,0(r2)
    26dc:	10803fcc 	andi	r2,r2,255
    26e0:	1080201c 	xori	r2,r2,128
    26e4:	10bfe004 	addi	r2,r2,-128
    26e8:	10800be0 	cmpeqi	r2,r2,47
    26ec:	10000a1e 	bne	r2,zero,2718 <alt_find_file+0xc0>
    26f0:	e0bffc17 	ldw	r2,-16(fp)
    26f4:	1007883a 	mov	r3,r2
    26f8:	e0bffe17 	ldw	r2,-8(fp)
    26fc:	1885883a 	add	r2,r3,r2
    2700:	10800003 	ldbu	r2,0(r2)
    2704:	10803fcc 	andi	r2,r2,255
    2708:	1080201c 	xori	r2,r2,128
    270c:	10bfe004 	addi	r2,r2,-128
    2710:	1004c03a 	cmpne	r2,r2,zero
    2714:	10000a1e 	bne	r2,zero,2740 <alt_find_file+0xe8>
    2718:	e0bffd17 	ldw	r2,-12(fp)
    271c:	11000217 	ldw	r4,8(r2)
    2720:	e1bffc17 	ldw	r6,-16(fp)
    2724:	e17ffe17 	ldw	r5,-8(fp)
    2728:	00028940 	call	2894 <memcmp>
    272c:	1004c03a 	cmpne	r2,r2,zero
    2730:	1000031e 	bne	r2,zero,2740 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2734:	e0bffd17 	ldw	r2,-12(fp)
    2738:	e0bfff15 	stw	r2,-4(fp)
    273c:	00000806 	br	2760 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    2740:	e0bffd17 	ldw	r2,-12(fp)
    2744:	10800017 	ldw	r2,0(r2)
    2748:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    274c:	00c00034 	movhi	r3,0
    2750:	18d17f04 	addi	r3,r3,17916
    2754:	e0bffd17 	ldw	r2,-12(fp)
    2758:	10ffc91e 	bne	r2,r3,2680 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    275c:	e03fff15 	stw	zero,-4(fp)
    2760:	e0bfff17 	ldw	r2,-4(fp)
}
    2764:	e037883a 	mov	sp,fp
    2768:	dfc00117 	ldw	ra,4(sp)
    276c:	df000017 	ldw	fp,0(sp)
    2770:	dec00204 	addi	sp,sp,8
    2774:	f800283a 	ret

00002778 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2778:	defffa04 	addi	sp,sp,-24
    277c:	dfc00515 	stw	ra,20(sp)
    2780:	df000415 	stw	fp,16(sp)
    2784:	dc000315 	stw	r16,12(sp)
    2788:	df000304 	addi	fp,sp,12
    278c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2790:	00bffa04 	movi	r2,-24
    2794:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2798:	e03ffe15 	stw	zero,-8(fp)
    279c:	00002006 	br	2820 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    27a0:	e13ffe17 	ldw	r4,-8(fp)
    27a4:	04000034 	movhi	r16,0
    27a8:	84101704 	addi	r16,r16,16476
    27ac:	01400304 	movi	r5,12
    27b0:	0002d040 	call	2d04 <__mulsi3>
    27b4:	1405883a 	add	r2,r2,r16
    27b8:	10800017 	ldw	r2,0(r2)
    27bc:	1004c03a 	cmpne	r2,r2,zero
    27c0:	1000141e 	bne	r2,zero,2814 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    27c4:	e13ffe17 	ldw	r4,-8(fp)
    27c8:	04000034 	movhi	r16,0
    27cc:	84101704 	addi	r16,r16,16476
    27d0:	01400304 	movi	r5,12
    27d4:	0002d040 	call	2d04 <__mulsi3>
    27d8:	1407883a 	add	r3,r2,r16
    27dc:	e0bfff17 	ldw	r2,-4(fp)
    27e0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    27e4:	00800034 	movhi	r2,0
    27e8:	10918304 	addi	r2,r2,17932
    27ec:	10c00017 	ldw	r3,0(r2)
    27f0:	e0bffe17 	ldw	r2,-8(fp)
    27f4:	1880040e 	bge	r3,r2,2808 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    27f8:	00c00034 	movhi	r3,0
    27fc:	18d18304 	addi	r3,r3,17932
    2800:	e0bffe17 	ldw	r2,-8(fp)
    2804:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    2808:	e0bffe17 	ldw	r2,-8(fp)
    280c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2810:	00000606 	br	282c <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2814:	e0bffe17 	ldw	r2,-8(fp)
    2818:	10800044 	addi	r2,r2,1
    281c:	e0bffe15 	stw	r2,-8(fp)
    2820:	e0bffe17 	ldw	r2,-8(fp)
    2824:	10800810 	cmplti	r2,r2,32
    2828:	103fdd1e 	bne	r2,zero,27a0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    282c:	e0bffd17 	ldw	r2,-12(fp)
}
    2830:	e037883a 	mov	sp,fp
    2834:	dfc00217 	ldw	ra,8(sp)
    2838:	df000117 	ldw	fp,4(sp)
    283c:	dc000017 	ldw	r16,0(sp)
    2840:	dec00304 	addi	sp,sp,12
    2844:	f800283a 	ret

00002848 <atexit>:
    2848:	200b883a 	mov	r5,r4
    284c:	000d883a 	mov	r6,zero
    2850:	0009883a 	mov	r4,zero
    2854:	000f883a 	mov	r7,zero
    2858:	0002a1c1 	jmpi	2a1c <__register_exitproc>

0000285c <exit>:
    285c:	defffe04 	addi	sp,sp,-8
    2860:	000b883a 	mov	r5,zero
    2864:	dc000015 	stw	r16,0(sp)
    2868:	dfc00115 	stw	ra,4(sp)
    286c:	2021883a 	mov	r16,r4
    2870:	0002b540 	call	2b54 <__call_exitprocs>
    2874:	00800034 	movhi	r2,0
    2878:	10918604 	addi	r2,r2,17944
    287c:	11000017 	ldw	r4,0(r2)
    2880:	20800f17 	ldw	r2,60(r4)
    2884:	10000126 	beq	r2,zero,288c <exit+0x30>
    2888:	103ee83a 	callr	r2
    288c:	8009883a 	mov	r4,r16
    2890:	0002d7c0 	call	2d7c <_exit>

00002894 <memcmp>:
    2894:	00c000c4 	movi	r3,3
    2898:	1980032e 	bgeu	r3,r6,28a8 <memcmp+0x14>
    289c:	2144b03a 	or	r2,r4,r5
    28a0:	10c4703a 	and	r2,r2,r3
    28a4:	10000f26 	beq	r2,zero,28e4 <memcmp+0x50>
    28a8:	31ffffc4 	addi	r7,r6,-1
    28ac:	3000061e 	bne	r6,zero,28c8 <memcmp+0x34>
    28b0:	00000a06 	br	28dc <memcmp+0x48>
    28b4:	39ffffc4 	addi	r7,r7,-1
    28b8:	00bfffc4 	movi	r2,-1
    28bc:	21000044 	addi	r4,r4,1
    28c0:	29400044 	addi	r5,r5,1
    28c4:	38800526 	beq	r7,r2,28dc <memcmp+0x48>
    28c8:	20c00003 	ldbu	r3,0(r4)
    28cc:	28800003 	ldbu	r2,0(r5)
    28d0:	18bff826 	beq	r3,r2,28b4 <memcmp+0x20>
    28d4:	1885c83a 	sub	r2,r3,r2
    28d8:	f800283a 	ret
    28dc:	0005883a 	mov	r2,zero
    28e0:	f800283a 	ret
    28e4:	180f883a 	mov	r7,r3
    28e8:	20c00017 	ldw	r3,0(r4)
    28ec:	28800017 	ldw	r2,0(r5)
    28f0:	18bfed1e 	bne	r3,r2,28a8 <memcmp+0x14>
    28f4:	31bfff04 	addi	r6,r6,-4
    28f8:	21000104 	addi	r4,r4,4
    28fc:	29400104 	addi	r5,r5,4
    2900:	39bff936 	bltu	r7,r6,28e8 <memcmp+0x54>
    2904:	003fe806 	br	28a8 <memcmp+0x14>

00002908 <memcpy>:
    2908:	01c003c4 	movi	r7,15
    290c:	2007883a 	mov	r3,r4
    2910:	3980032e 	bgeu	r7,r6,2920 <memcpy+0x18>
    2914:	2904b03a 	or	r2,r5,r4
    2918:	108000cc 	andi	r2,r2,3
    291c:	10000926 	beq	r2,zero,2944 <memcpy+0x3c>
    2920:	30000626 	beq	r6,zero,293c <memcpy+0x34>
    2924:	30cd883a 	add	r6,r6,r3
    2928:	28800003 	ldbu	r2,0(r5)
    292c:	29400044 	addi	r5,r5,1
    2930:	18800005 	stb	r2,0(r3)
    2934:	18c00044 	addi	r3,r3,1
    2938:	30fffb1e 	bne	r6,r3,2928 <memcpy+0x20>
    293c:	2005883a 	mov	r2,r4
    2940:	f800283a 	ret
    2944:	3811883a 	mov	r8,r7
    2948:	200f883a 	mov	r7,r4
    294c:	28c00017 	ldw	r3,0(r5)
    2950:	31bffc04 	addi	r6,r6,-16
    2954:	38c00015 	stw	r3,0(r7)
    2958:	28800117 	ldw	r2,4(r5)
    295c:	38800115 	stw	r2,4(r7)
    2960:	28c00217 	ldw	r3,8(r5)
    2964:	38c00215 	stw	r3,8(r7)
    2968:	28800317 	ldw	r2,12(r5)
    296c:	29400404 	addi	r5,r5,16
    2970:	38800315 	stw	r2,12(r7)
    2974:	39c00404 	addi	r7,r7,16
    2978:	41bff436 	bltu	r8,r6,294c <memcpy+0x44>
    297c:	008000c4 	movi	r2,3
    2980:	1180072e 	bgeu	r2,r6,29a0 <memcpy+0x98>
    2984:	1007883a 	mov	r3,r2
    2988:	28800017 	ldw	r2,0(r5)
    298c:	31bfff04 	addi	r6,r6,-4
    2990:	29400104 	addi	r5,r5,4
    2994:	38800015 	stw	r2,0(r7)
    2998:	39c00104 	addi	r7,r7,4
    299c:	19bffa36 	bltu	r3,r6,2988 <memcpy+0x80>
    29a0:	3807883a 	mov	r3,r7
    29a4:	003fde06 	br	2920 <memcpy+0x18>

000029a8 <strlen>:
    29a8:	208000cc 	andi	r2,r4,3
    29ac:	2011883a 	mov	r8,r4
    29b0:	1000161e 	bne	r2,zero,2a0c <strlen+0x64>
    29b4:	20c00017 	ldw	r3,0(r4)
    29b8:	017fbff4 	movhi	r5,65279
    29bc:	297fbfc4 	addi	r5,r5,-257
    29c0:	01e02074 	movhi	r7,32897
    29c4:	39e02004 	addi	r7,r7,-32640
    29c8:	1945883a 	add	r2,r3,r5
    29cc:	11c4703a 	and	r2,r2,r7
    29d0:	00c6303a 	nor	r3,zero,r3
    29d4:	1886703a 	and	r3,r3,r2
    29d8:	18000c1e 	bne	r3,zero,2a0c <strlen+0x64>
    29dc:	280d883a 	mov	r6,r5
    29e0:	380b883a 	mov	r5,r7
    29e4:	21000104 	addi	r4,r4,4
    29e8:	20800017 	ldw	r2,0(r4)
    29ec:	1187883a 	add	r3,r2,r6
    29f0:	1946703a 	and	r3,r3,r5
    29f4:	0084303a 	nor	r2,zero,r2
    29f8:	10c4703a 	and	r2,r2,r3
    29fc:	103ff926 	beq	r2,zero,29e4 <strlen+0x3c>
    2a00:	20800007 	ldb	r2,0(r4)
    2a04:	10000326 	beq	r2,zero,2a14 <strlen+0x6c>
    2a08:	21000044 	addi	r4,r4,1
    2a0c:	20800007 	ldb	r2,0(r4)
    2a10:	103ffd1e 	bne	r2,zero,2a08 <strlen+0x60>
    2a14:	2205c83a 	sub	r2,r4,r8
    2a18:	f800283a 	ret

00002a1c <__register_exitproc>:
    2a1c:	defffa04 	addi	sp,sp,-24
    2a20:	00800034 	movhi	r2,0
    2a24:	10918604 	addi	r2,r2,17944
    2a28:	dc000015 	stw	r16,0(sp)
    2a2c:	14000017 	ldw	r16,0(r2)
    2a30:	dd000415 	stw	r20,16(sp)
    2a34:	2829883a 	mov	r20,r5
    2a38:	81405217 	ldw	r5,328(r16)
    2a3c:	dcc00315 	stw	r19,12(sp)
    2a40:	dc800215 	stw	r18,8(sp)
    2a44:	dc400115 	stw	r17,4(sp)
    2a48:	dfc00515 	stw	ra,20(sp)
    2a4c:	2023883a 	mov	r17,r4
    2a50:	3027883a 	mov	r19,r6
    2a54:	3825883a 	mov	r18,r7
    2a58:	28002526 	beq	r5,zero,2af0 <__register_exitproc+0xd4>
    2a5c:	29000117 	ldw	r4,4(r5)
    2a60:	008007c4 	movi	r2,31
    2a64:	11002716 	blt	r2,r4,2b04 <__register_exitproc+0xe8>
    2a68:	8800101e 	bne	r17,zero,2aac <__register_exitproc+0x90>
    2a6c:	2105883a 	add	r2,r4,r4
    2a70:	1085883a 	add	r2,r2,r2
    2a74:	20c00044 	addi	r3,r4,1
    2a78:	1145883a 	add	r2,r2,r5
    2a7c:	0009883a 	mov	r4,zero
    2a80:	15000215 	stw	r20,8(r2)
    2a84:	28c00115 	stw	r3,4(r5)
    2a88:	2005883a 	mov	r2,r4
    2a8c:	dfc00517 	ldw	ra,20(sp)
    2a90:	dd000417 	ldw	r20,16(sp)
    2a94:	dcc00317 	ldw	r19,12(sp)
    2a98:	dc800217 	ldw	r18,8(sp)
    2a9c:	dc400117 	ldw	r17,4(sp)
    2aa0:	dc000017 	ldw	r16,0(sp)
    2aa4:	dec00604 	addi	sp,sp,24
    2aa8:	f800283a 	ret
    2aac:	29802204 	addi	r6,r5,136
    2ab0:	00800044 	movi	r2,1
    2ab4:	110e983a 	sll	r7,r2,r4
    2ab8:	30c04017 	ldw	r3,256(r6)
    2abc:	2105883a 	add	r2,r4,r4
    2ac0:	1085883a 	add	r2,r2,r2
    2ac4:	1185883a 	add	r2,r2,r6
    2ac8:	19c6b03a 	or	r3,r3,r7
    2acc:	14802015 	stw	r18,128(r2)
    2ad0:	14c00015 	stw	r19,0(r2)
    2ad4:	00800084 	movi	r2,2
    2ad8:	30c04015 	stw	r3,256(r6)
    2adc:	88bfe31e 	bne	r17,r2,2a6c <__register_exitproc+0x50>
    2ae0:	30804117 	ldw	r2,260(r6)
    2ae4:	11c4b03a 	or	r2,r2,r7
    2ae8:	30804115 	stw	r2,260(r6)
    2aec:	003fdf06 	br	2a6c <__register_exitproc+0x50>
    2af0:	00800034 	movhi	r2,0
    2af4:	1097b904 	addi	r2,r2,24292
    2af8:	100b883a 	mov	r5,r2
    2afc:	80805215 	stw	r2,328(r16)
    2b00:	003fd606 	br	2a5c <__register_exitproc+0x40>
    2b04:	00800034 	movhi	r2,0
    2b08:	10800004 	addi	r2,r2,0
    2b0c:	1000021e 	bne	r2,zero,2b18 <__register_exitproc+0xfc>
    2b10:	013fffc4 	movi	r4,-1
    2b14:	003fdc06 	br	2a88 <__register_exitproc+0x6c>
    2b18:	01006404 	movi	r4,400
    2b1c:	103ee83a 	callr	r2
    2b20:	1007883a 	mov	r3,r2
    2b24:	103ffa26 	beq	r2,zero,2b10 <__register_exitproc+0xf4>
    2b28:	80805217 	ldw	r2,328(r16)
    2b2c:	180b883a 	mov	r5,r3
    2b30:	18000115 	stw	zero,4(r3)
    2b34:	18800015 	stw	r2,0(r3)
    2b38:	80c05215 	stw	r3,328(r16)
    2b3c:	18006215 	stw	zero,392(r3)
    2b40:	18006315 	stw	zero,396(r3)
    2b44:	0009883a 	mov	r4,zero
    2b48:	883fc826 	beq	r17,zero,2a6c <__register_exitproc+0x50>
    2b4c:	003fd706 	br	2aac <__register_exitproc+0x90>

00002b50 <register_fini>:
    2b50:	f800283a 	ret

00002b54 <__call_exitprocs>:
    2b54:	00800034 	movhi	r2,0
    2b58:	10918604 	addi	r2,r2,17944
    2b5c:	10800017 	ldw	r2,0(r2)
    2b60:	defff304 	addi	sp,sp,-52
    2b64:	df000b15 	stw	fp,44(sp)
    2b68:	d8800115 	stw	r2,4(sp)
    2b6c:	00800034 	movhi	r2,0
    2b70:	10800004 	addi	r2,r2,0
    2b74:	1005003a 	cmpeq	r2,r2,zero
    2b78:	d8800215 	stw	r2,8(sp)
    2b7c:	d8800117 	ldw	r2,4(sp)
    2b80:	dd400815 	stw	r21,32(sp)
    2b84:	dd000715 	stw	r20,28(sp)
    2b88:	10805204 	addi	r2,r2,328
    2b8c:	dfc00c15 	stw	ra,48(sp)
    2b90:	ddc00a15 	stw	r23,40(sp)
    2b94:	dd800915 	stw	r22,36(sp)
    2b98:	dcc00615 	stw	r19,24(sp)
    2b9c:	dc800515 	stw	r18,20(sp)
    2ba0:	dc400415 	stw	r17,16(sp)
    2ba4:	dc000315 	stw	r16,12(sp)
    2ba8:	282b883a 	mov	r21,r5
    2bac:	2039883a 	mov	fp,r4
    2bb0:	d8800015 	stw	r2,0(sp)
    2bb4:	2829003a 	cmpeq	r20,r5,zero
    2bb8:	d8800117 	ldw	r2,4(sp)
    2bbc:	14405217 	ldw	r17,328(r2)
    2bc0:	88001026 	beq	r17,zero,2c04 <__call_exitprocs+0xb0>
    2bc4:	ddc00017 	ldw	r23,0(sp)
    2bc8:	88800117 	ldw	r2,4(r17)
    2bcc:	8c802204 	addi	r18,r17,136
    2bd0:	143fffc4 	addi	r16,r2,-1
    2bd4:	80000916 	blt	r16,zero,2bfc <__call_exitprocs+0xa8>
    2bd8:	05bfffc4 	movi	r22,-1
    2bdc:	a000151e 	bne	r20,zero,2c34 <__call_exitprocs+0xe0>
    2be0:	8409883a 	add	r4,r16,r16
    2be4:	2105883a 	add	r2,r4,r4
    2be8:	1485883a 	add	r2,r2,r18
    2bec:	10c02017 	ldw	r3,128(r2)
    2bf0:	a8c01126 	beq	r21,r3,2c38 <__call_exitprocs+0xe4>
    2bf4:	843fffc4 	addi	r16,r16,-1
    2bf8:	85bff81e 	bne	r16,r22,2bdc <__call_exitprocs+0x88>
    2bfc:	d8800217 	ldw	r2,8(sp)
    2c00:	10003126 	beq	r2,zero,2cc8 <__call_exitprocs+0x174>
    2c04:	dfc00c17 	ldw	ra,48(sp)
    2c08:	df000b17 	ldw	fp,44(sp)
    2c0c:	ddc00a17 	ldw	r23,40(sp)
    2c10:	dd800917 	ldw	r22,36(sp)
    2c14:	dd400817 	ldw	r21,32(sp)
    2c18:	dd000717 	ldw	r20,28(sp)
    2c1c:	dcc00617 	ldw	r19,24(sp)
    2c20:	dc800517 	ldw	r18,20(sp)
    2c24:	dc400417 	ldw	r17,16(sp)
    2c28:	dc000317 	ldw	r16,12(sp)
    2c2c:	dec00d04 	addi	sp,sp,52
    2c30:	f800283a 	ret
    2c34:	8409883a 	add	r4,r16,r16
    2c38:	88c00117 	ldw	r3,4(r17)
    2c3c:	2105883a 	add	r2,r4,r4
    2c40:	1445883a 	add	r2,r2,r17
    2c44:	18ffffc4 	addi	r3,r3,-1
    2c48:	11800217 	ldw	r6,8(r2)
    2c4c:	1c001526 	beq	r3,r16,2ca4 <__call_exitprocs+0x150>
    2c50:	10000215 	stw	zero,8(r2)
    2c54:	303fe726 	beq	r6,zero,2bf4 <__call_exitprocs+0xa0>
    2c58:	00c00044 	movi	r3,1
    2c5c:	1c06983a 	sll	r3,r3,r16
    2c60:	90804017 	ldw	r2,256(r18)
    2c64:	8cc00117 	ldw	r19,4(r17)
    2c68:	1884703a 	and	r2,r3,r2
    2c6c:	10001426 	beq	r2,zero,2cc0 <__call_exitprocs+0x16c>
    2c70:	90804117 	ldw	r2,260(r18)
    2c74:	1884703a 	and	r2,r3,r2
    2c78:	10000c1e 	bne	r2,zero,2cac <__call_exitprocs+0x158>
    2c7c:	2105883a 	add	r2,r4,r4
    2c80:	1485883a 	add	r2,r2,r18
    2c84:	11400017 	ldw	r5,0(r2)
    2c88:	e009883a 	mov	r4,fp
    2c8c:	303ee83a 	callr	r6
    2c90:	88800117 	ldw	r2,4(r17)
    2c94:	98bfc81e 	bne	r19,r2,2bb8 <__call_exitprocs+0x64>
    2c98:	b8800017 	ldw	r2,0(r23)
    2c9c:	147fd526 	beq	r2,r17,2bf4 <__call_exitprocs+0xa0>
    2ca0:	003fc506 	br	2bb8 <__call_exitprocs+0x64>
    2ca4:	8c000115 	stw	r16,4(r17)
    2ca8:	003fea06 	br	2c54 <__call_exitprocs+0x100>
    2cac:	2105883a 	add	r2,r4,r4
    2cb0:	1485883a 	add	r2,r2,r18
    2cb4:	11000017 	ldw	r4,0(r2)
    2cb8:	303ee83a 	callr	r6
    2cbc:	003ff406 	br	2c90 <__call_exitprocs+0x13c>
    2cc0:	303ee83a 	callr	r6
    2cc4:	003ff206 	br	2c90 <__call_exitprocs+0x13c>
    2cc8:	88800117 	ldw	r2,4(r17)
    2ccc:	1000081e 	bne	r2,zero,2cf0 <__call_exitprocs+0x19c>
    2cd0:	89000017 	ldw	r4,0(r17)
    2cd4:	20000726 	beq	r4,zero,2cf4 <__call_exitprocs+0x1a0>
    2cd8:	b9000015 	stw	r4,0(r23)
    2cdc:	8809883a 	mov	r4,r17
    2ce0:	00000000 	call	0 <__reset>
    2ce4:	bc400017 	ldw	r17,0(r23)
    2ce8:	883fb71e 	bne	r17,zero,2bc8 <__call_exitprocs+0x74>
    2cec:	003fc506 	br	2c04 <__call_exitprocs+0xb0>
    2cf0:	89000017 	ldw	r4,0(r17)
    2cf4:	882f883a 	mov	r23,r17
    2cf8:	2023883a 	mov	r17,r4
    2cfc:	883fb21e 	bne	r17,zero,2bc8 <__call_exitprocs+0x74>
    2d00:	003fc006 	br	2c04 <__call_exitprocs+0xb0>

00002d04 <__mulsi3>:
    2d04:	20000a26 	beq	r4,zero,2d30 <__mulsi3+0x2c>
    2d08:	0007883a 	mov	r3,zero
    2d0c:	2080004c 	andi	r2,r4,1
    2d10:	1005003a 	cmpeq	r2,r2,zero
    2d14:	2008d07a 	srli	r4,r4,1
    2d18:	1000011e 	bne	r2,zero,2d20 <__mulsi3+0x1c>
    2d1c:	1947883a 	add	r3,r3,r5
    2d20:	294b883a 	add	r5,r5,r5
    2d24:	203ff91e 	bne	r4,zero,2d0c <__mulsi3+0x8>
    2d28:	1805883a 	mov	r2,r3
    2d2c:	f800283a 	ret
    2d30:	0007883a 	mov	r3,zero
    2d34:	1805883a 	mov	r2,r3
    2d38:	f800283a 	ret

00002d3c <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    2d3c:	defffd04 	addi	sp,sp,-12
    2d40:	df000215 	stw	fp,8(sp)
    2d44:	df000204 	addi	fp,sp,8
    2d48:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    2d4c:	e0bfff17 	ldw	r2,-4(fp)
    2d50:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2d54:	e0bffe17 	ldw	r2,-8(fp)
    2d58:	1005003a 	cmpeq	r2,r2,zero
    2d5c:	1000021e 	bne	r2,zero,2d68 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    2d60:	002af070 	cmpltui	zero,zero,43969
    2d64:	00000106 	br	2d6c <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    2d68:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    2d6c:	e037883a 	mov	sp,fp
    2d70:	df000017 	ldw	fp,0(sp)
    2d74:	dec00104 	addi	sp,sp,4
    2d78:	f800283a 	ret

00002d7c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2d7c:	defffd04 	addi	sp,sp,-12
    2d80:	dfc00215 	stw	ra,8(sp)
    2d84:	df000115 	stw	fp,4(sp)
    2d88:	df000104 	addi	fp,sp,4
    2d8c:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    2d90:	e13fff17 	ldw	r4,-4(fp)
    2d94:	0002d3c0 	call	2d3c <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2d98:	003fff06 	br	2d98 <_exit+0x1c>
    2d9c:	00002b50 	cmplti	zero,zero,173
