
Drum_maschine_C_Prototype.elf:     file format elf32-littlenios2
Drum_maschine_C_Prototype.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003718 memsz 0x00003718 flags r-x
    LOAD off    0x00004738 vaddr 0x00003738 paddr 0x00004f94 align 2**12
         filesz 0x0000185c memsz 0x0000185c flags rw-
    LOAD off    0x000067f0 vaddr 0x000067f0 paddr 0x000067f0 align 2**12
         filesz 0x00000000 memsz 0x000002b4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003440  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000140  000035f8  000035f8  000045f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000185c  00003738  00004f94  00004738  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b4  000067f0  000067f0  000067f0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00005f94  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000005b8  00000000  00000000  00005fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000c44  00000000  00000000  00006578  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c979  00000000  00000000  000071bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002a5a  00000000  00000000  00013b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000741c  00000000  00000000  0001658f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c40  00000000  00000000  0001d9ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c56  00000000  00000000  0001e5ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001327  00000000  00000000  0001f242  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0002056c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00020590  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00022965  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00022968  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0002296b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0002296c  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0002296d  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00022971  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00022975  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00022979  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00022982  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0002298b  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00022994  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  0002299f  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ecd  00000000  00000000  000229da  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00091a83  00000000  00000000  000278a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
000035f8 l    d  .rodata	00000000 .rodata
00003738 l    d  .rwdata	00000000 .rwdata
000067f0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00003738 l     O .rwdata	0000000a digit_data.1473
000067f0 l     O .bss	00000001 digit3.1472
000067f1 l     O .bss	00000001 digit2.1471
000067f2 l     O .bss	00000001 digit1.1470
000067f3 l     O .bss	00000001 playState.1465
00004f64 l     O .rwdata	00000002 currentBPM.1464
000067f4 l     O .bss	00000004 currentBank.1463
00000000 l    df *ABS*	00000000 alt_load.c
00000678 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00003744 l     O .rwdata	00001060 JTAG_UART
000047a4 l     O .rwdata	0000002c Char_LCD_16x2
000047d0 l     O .rwdata	0000002c IrDA
000047fc l     O .rwdata	0000002c Expansion_JP5
00004828 l     O .rwdata	0000002c Green_LEDs
00004854 l     O .rwdata	0000002c HEX3_HEX0
00004880 l     O .rwdata	0000002c HEX7_HEX4
000048ac l     O .rwdata	0000002c Pushbuttons
000048d8 l     O .rwdata	0000002c Red_LEDs
00004904 l     O .rwdata	0000002c Slider_Switches
00004930 l     O .rwdata	0000002c Serial_Port
0000495c l     O .rwdata	00000034 USB
00004990 l     O .rwdata	0000002c SD_Card
0000087c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000ab4 l     F .text	0000022c altera_avalon_jtag_uart_irq
00000ce0 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000135c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00002344 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000023c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000024a0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000268c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00002988 l     F .text	000000dc alt_file_locked
00002bec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00004b64 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000033e0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00003594 l     F .text	00000040 alt_sim_halt
000006e4 g     F .text	0000006c alt_main
00006814 g     O .bss	00000100 alt_irq
00004f94 g       *ABS*	00000000 __flash_rwdata_start
000014d4 g     F .text	00000034 alt_up_character_lcd_send_cmd
00001f90 g     F .text	00000090 alt_up_rs232_read_fd
00000000  w      *UND*	00000000 __errno
00001458 g     F .text	0000007c get_DDRAM_addr
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00006810 g     O .bss	00000004 errno
000067fc g     O .bss	00000004 alt_argv
0000cf64 g       *ABS*	00000000 _gp
000049e4 g     O .rwdata	00000180 alt_fd_list
000025c8 g     F .text	00000094 alt_find_dev
00003198 g     F .text	000000a0 memcpy
0000166c g     F .text	0000004c alt_up_character_lcd_write_fd
00002750 g     F .text	00000078 alt_io_redirect
000035f8 g       *ABS*	00000000 __DTOR_END__
00001c4c g     F .text	00000090 alt_up_irda_write_fd
00001f1c g     F .text	00000074 alt_up_rs232_read_data
00001a34 g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
00000ef8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000019dc g     F .text	00000058 alt_up_irda_disable_read_interrupt
00003048 g     F .text	00000090 alt_icache_flush
00004f78 g     O .rwdata	00000004 alt_max_fd
00001e84 g     F .text	00000050 alt_up_rs232_check_parity
000027c8 g     F .text	000001c0 alt_irq_register
00004f90 g     O .rwdata	00000004 _global_impure_ptr
00006aa4 g       *ABS*	00000000 __bss_end
00002d44 g     F .text	0000010c alt_tick
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00002cac g     F .text	00000098 alt_alarm_stop
00006804 g     O .bss	00000004 alt_irq_active
00001a70 g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
000049bc g     O .rwdata	00000028 alt_dev_null
00001954 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00001d1c g     F .text	00000040 alt_up_parallel_port_open_dev
000023a4 g     F .text	0000001c alt_dcache_flush_all
00004f94 g       *ABS*	00000000 __ram_rwdata_end
00004f70 g     O .rwdata	00000008 alt_dev_list
00003738 g       *ABS*	00000000 __ram_rodata_end
00002020 g     F .text	00000094 alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00006aa4 g       *ABS*	00000000 end
00001ab0 g     F .text	00000050 alt_up_irda_check_parity
000009fc g     F .text	000000b8 altera_avalon_jtag_uart_init
000035f4 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
000013d0 g     F .text	00000088 alt_avalon_timer_sc_init
0000111c g     F .text	00000240 altera_avalon_jtag_uart_write
0000157c g     F .text	00000078 alt_up_character_lcd_write
000033e4 g     F .text	000001b0 __call_exitprocs
000001b8 g     F .text	0000003c _start
00006808 g     O .bss	00000004 _alt_tick_rate
0000680c g     O .bss	00000004 _alt_nticks
00000784 g     F .text	000000f8 alt_sys_init
000017e0 g     F .text	000000b0 alt_up_character_lcd_shift_display
000032ac g     F .text	00000134 __register_exitproc
00001e44 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
00001890 g     F .text	00000090 alt_up_character_lcd_erase_pos
00000d90 g     F .text	00000074 altera_avalon_jtag_uart_close
00003738 g       *ABS*	00000000 __ram_rwdata_start
000035f8 g       *ABS*	00000000 __ram_rodata_start
000008b4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00002f90 g     F .text	000000b8 alt_get_fd
00003124 g     F .text	00000074 memcmp
00000964 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00006aa4 g       *ABS*	00000000 __alt_stack_base
000009ac g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00001988 g     F .text	00000054 alt_up_irda_enable_read_interrupt
000001f4 g     F .text	0000003c init
00001db0 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
00002e70 g     F .text	00000120 alt_find_file
000023ec g     F .text	000000b4 alt_dev_llist_insert
000067f0 g       *ABS*	00000000 __bss_start
00000230 g     F .text	000003c8 main
00006800 g     O .bss	00000004 alt_envp
0000090c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00001730 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
00006914 g     O .bss	00000190 _atexit0
00004f7c g     O .rwdata	00000004 alt_errno
00001b00 g     F .text	00000048 alt_up_irda_write_data
0000153c g     F .text	00000040 alt_up_character_lcd_open_dev
000035f8 g       *ABS*	00000000 __CTOR_END__
00001508 g     F .text	00000034 alt_up_character_lcd_init
000035f8 g       *ABS*	00000000 __flash_rodata_start
000035f8 g       *ABS*	00000000 __DTOR_LIST__
000020b4 g     F .text	00000040 alt_up_rs232_open_dev
00000750 g     F .text	00000034 alt_irq_init
00002c4c g     F .text	00000060 alt_release_fd
00001920 g     F .text	00000034 alt_up_character_lcd_cursor_off
000030d8 g     F .text	00000014 atexit
00004f8c g     O .rwdata	00000004 _impure_ptr
000067f8 g     O .bss	00000004 alt_argc
00002564 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00004f68 g     O .rwdata	00000008 alt_fs_list
00001d5c g     F .text	00000054 alt_up_rs232_enable_read_interrupt
00001ed4 g     F .text	00000048 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004f94 g       *ABS*	00000000 _edata
00006aa4 g       *ABS*	00000000 _end
000001b8 g       *ABS*	00000000 __ram_exceptions_end
00000e04 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00002e50 g     F .text	00000020 altera_nios2_qsys_irq_init
000030ec g     F .text	00000038 exit
00001b48 g     F .text	00000074 alt_up_irda_read_data
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000015f4 g     F .text	00000078 alt_up_character_lcd_string
00001cdc g     F .text	00000040 alt_up_irda_open_dev
000035d4 g     F .text	00000020 _exit
000020f4 g     F .text	00000154 alt_alarm_start
00003238 g     F .text	00000074 strlen
00002a64 g     F .text	00000188 open
0000265c g     F .text	00000030 alt_icache_flush_all
000016b8 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00004f80 g     O .rwdata	00000004 alt_priority_mask
00001bbc g     F .text	00000090 alt_up_irda_read_fd
00004f84 g     O .rwdata	00000008 alt_alarm_list
00002500 g     F .text	00000064 _do_ctors
00001e08 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
00002248 g     F .text	000000fc close
000005f8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00034 	movhi	r3,0
 134:	18da0504 	addi	r3,r3,26644
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00034 	movhi	r3,0
 14c:	18da0504 	addi	r3,r3,26644
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1c0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1c4:	d6b3d914 	ori	gp,gp,53092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1cc:	1099fc14 	ori	r2,r2,26608

    movhi r3, %hi(__bss_end)
     1d0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1d4:	18daa914 	ori	r3,r3,27300

    beq r2, r3, 1f
     1d8:	10c00326 	beq	r2,r3,1e8 <_start+0x30>

0:
    stw zero, (r2)
     1dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e4:	10fffd36 	bltu	r2,r3,1dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e8:	00005f80 	call	5f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ec:	00006e40 	call	6e4 <alt_main>

000001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1f0:	003fff06 	br	1f0 <alt_after_alt_main>

000001f4 <init>:

void init(
    alt_up_parallel_port_dev *greenLEDs,
    alt_up_parallel_port_dev *redLEDs,
    alt_up_parallel_port_dev *hex3to0,
    alt_up_parallel_port_dev *hex7to4) {
     1f4:	defffb04 	addi	sp,sp,-20
     1f8:	df000415 	stw	fp,16(sp)
     1fc:	df000404 	addi	fp,sp,16
     200:	e13ffc15 	stw	r4,-16(fp)
     204:	e17ffd15 	stw	r5,-12(fp)
     208:	e1bffe15 	stw	r6,-8(fp)
     20c:	e1ffff15 	stw	r7,-4(fp)

        IOWR_ALT_UP_PARALLEL_PORT_DATA(GREEN_LEDS_BASE, (1<<0));
     210:	00c40034 	movhi	r3,4096
     214:	18c00404 	addi	r3,r3,16
     218:	00800044 	movi	r2,1
     21c:	18800035 	stwio	r2,0(r3)
}
     220:	e037883a 	mov	sp,fp
     224:	df000017 	ldw	fp,0(sp)
     228:	dec00104 	addi	sp,sp,4
     22c:	f800283a 	ret

00000230 <main>:


int main(void) {
     230:	defff204 	addi	sp,sp,-56
     234:	dfc00d15 	stw	ra,52(sp)
     238:	df000c15 	stw	fp,48(sp)
     23c:	df000c04 	addi	fp,sp,48
    alt_up_parallel_port_dev *greenLEDs, *redLEDs, *hex3to0, *hex7to4;

    static int currentBank = 0;
    static alt_u16 currentBPM = 120;
    static alt_u8 playState = 0; // Data which indicates if the maschine is generating an output signal
    alt_u8 keys = 0; // Data that contains the current loops pushbutton setting
     240:	e03ff705 	stb	zero,-36(fp)
    alt_u32 switches = 0; // Data that contains the current loops switch setting
     244:	e03ff615 	stw	zero,-40(fp)
    alt_u32 pattern[4] = {0}; // Data which contains all Patterns, created from switches
     248:	e03ffc15 	stw	zero,-16(fp)
     24c:	e03ffd15 	stw	zero,-12(fp)
     250:	e03ffe15 	stw	zero,-8(fp)
     254:	e03fff15 	stw	zero,-4(fp)
    alt_u32 BPMData = 0; // Data that will be written to HEX3to0
     258:	e03ff515 	stw	zero,-44(fp)
    static unsigned char digit1 = 0, digit2 = 0, digit3 = 0; // Variables for computing Digit by Digit of the BPM Value
    static unsigned char digit_data[10] = {191, 134, 219, 207, 230, 237, 253, 135, 255, 239}; // Bit-Data for 7-Segment Digits

    // Initialization of HAL Ports
    greenLEDs = alt_up_parallel_port_open_dev(GREEN_LEDS_NAME);
     25c:	01000034 	movhi	r4,0
     260:	210d7e04 	addi	r4,r4,13816
     264:	0001d1c0 	call	1d1c <alt_up_parallel_port_open_dev>
     268:	e0bffb15 	stw	r2,-20(fp)
    redLEDs = alt_up_parallel_port_open_dev(RED_LEDS_NAME);
     26c:	01000034 	movhi	r4,0
     270:	210d8204 	addi	r4,r4,13832
     274:	0001d1c0 	call	1d1c <alt_up_parallel_port_open_dev>
     278:	e0bffa15 	stw	r2,-24(fp)
    hex3to0 = alt_up_parallel_port_open_dev(HEX3_HEX0_NAME);
     27c:	01000034 	movhi	r4,0
     280:	210d8604 	addi	r4,r4,13848
     284:	0001d1c0 	call	1d1c <alt_up_parallel_port_open_dev>
     288:	e0bff915 	stw	r2,-28(fp)
    hex7to4 = alt_up_parallel_port_open_dev(HEX7_HEX4_NAME);
     28c:	01000034 	movhi	r4,0
     290:	210d8a04 	addi	r4,r4,13864
     294:	0001d1c0 	call	1d1c <alt_up_parallel_port_open_dev>
     298:	e0bff815 	stw	r2,-32(fp)

    //Initiating functions
    init(greenLEDs, redLEDs, hex3to0, hex7to4);
     29c:	e13ffb17 	ldw	r4,-20(fp)
     2a0:	e17ffa17 	ldw	r5,-24(fp)
     2a4:	e1bff917 	ldw	r6,-28(fp)
     2a8:	e1fff817 	ldw	r7,-32(fp)
     2ac:	00001f40 	call	1f4 <init>
    // MAIN LOOP //
    ///////////////

    while(1){
        //Grab Inputs
    	keys = IORD_ALT_UP_PARALLEL_PORT_DATA(PUSHBUTTONS_BASE);
     2b0:	00840034 	movhi	r2,4096
     2b4:	10801404 	addi	r2,r2,80
     2b8:	10800037 	ldwio	r2,0(r2)
     2bc:	e0bff705 	stb	r2,-36(fp)
        switches = IORD_ALT_UP_PARALLEL_PORT_DATA(SLIDER_SWITCHES_BASE);
     2c0:	00840034 	movhi	r2,4096
     2c4:	10801004 	addi	r2,r2,64
     2c8:	10800037 	ldwio	r2,0(r2)
     2cc:	e0bff615 	stw	r2,-40(fp)

        //Play/Pause Button
        if(keys & (1<<1)){ // ^ => XOR
     2d0:	e0bff703 	ldbu	r2,-36(fp)
     2d4:	1080008c 	andi	r2,r2,2
     2d8:	1005003a 	cmpeq	r2,r2,zero
     2dc:	1000111e 	bne	r2,zero,324 <main+0xf4>
            if(playState != 0) playState = 0;
     2e0:	d0a623c3 	ldbu	r2,-26481(gp)
     2e4:	10803fcc 	andi	r2,r2,255
     2e8:	1005003a 	cmpeq	r2,r2,zero
     2ec:	1000021e 	bne	r2,zero,2f8 <main+0xc8>
     2f0:	d02623c5 	stb	zero,-26481(gp)
     2f4:	00000706 	br	314 <main+0xe4>
            else playState = 255;
     2f8:	00bfffc4 	movi	r2,-1
     2fc:	d0a623c5 	stb	r2,-26481(gp)
            while(keys & (1<<1)){keys = IORD_ALT_UP_PARALLEL_PORT_DATA(PUSHBUTTONS_BASE);}
     300:	00000406 	br	314 <main+0xe4>
     304:	00840034 	movhi	r2,4096
     308:	10801404 	addi	r2,r2,80
     30c:	10800037 	ldwio	r2,0(r2)
     310:	e0bff705 	stb	r2,-36(fp)
     314:	e0bff703 	ldbu	r2,-36(fp)
     318:	1080008c 	andi	r2,r2,2
     31c:	1004c03a 	cmpne	r2,r2,zero
     320:	103ff81e 	bne	r2,zero,304 <main+0xd4>
        }

        //BPM Up/Down
        if (keys & (1<<2)){
     324:	e0bff703 	ldbu	r2,-36(fp)
     328:	1080010c 	andi	r2,r2,4
     32c:	1005003a 	cmpeq	r2,r2,zero
     330:	1000211e 	bne	r2,zero,3b8 <main+0x188>
            if(switches & (1<<0)){
     334:	e0bff617 	ldw	r2,-40(fp)
     338:	1080004c 	andi	r2,r2,1
     33c:	10803fcc 	andi	r2,r2,255
     340:	1005003a 	cmpeq	r2,r2,zero
     344:	1000041e 	bne	r2,zero,358 <main+0x128>
                currentBPM = currentBPM + STEP_BPM;
     348:	d0a0000b 	ldhu	r2,-32768(gp)
     34c:	10800284 	addi	r2,r2,10
     350:	d0a0000d 	sth	r2,-32768(gp)
     354:	00000306 	br	364 <main+0x134>
            }
            else{
                currentBPM = currentBPM - STEP_BPM;
     358:	d0a0000b 	ldhu	r2,-32768(gp)
     35c:	10bffd84 	addi	r2,r2,-10
     360:	d0a0000d 	sth	r2,-32768(gp)
            }

            if(currentBPM >= (MAX_BPM + STEP_BPM)) currentBPM = MAX_BPM;
     364:	d0a0000b 	ldhu	r2,-32768(gp)
     368:	10bfffcc 	andi	r2,r2,65535
     36c:	10803eb0 	cmpltui	r2,r2,250
     370:	1000021e 	bne	r2,zero,37c <main+0x14c>
     374:	00803c04 	movi	r2,240
     378:	d0a0000d 	sth	r2,-32768(gp)
            if(currentBPM <= (MIN_BPM - STEP_BPM))  currentBPM = MIN_BPM;
     37c:	d0a0000b 	ldhu	r2,-32768(gp)
     380:	10bfffcc 	andi	r2,r2,65535
     384:	10800ce8 	cmpgeui	r2,r2,51
     388:	1000071e 	bne	r2,zero,3a8 <main+0x178>
     38c:	00800f04 	movi	r2,60
     390:	d0a0000d 	sth	r2,-32768(gp)
            while(keys & (1<<2)){keys = IORD_ALT_UP_PARALLEL_PORT_DATA(PUSHBUTTONS_BASE);}
     394:	00000406 	br	3a8 <main+0x178>
     398:	00840034 	movhi	r2,4096
     39c:	10801404 	addi	r2,r2,80
     3a0:	10800037 	ldwio	r2,0(r2)
     3a4:	e0bff705 	stb	r2,-36(fp)
     3a8:	e0bff703 	ldbu	r2,-36(fp)
     3ac:	1080010c 	andi	r2,r2,4
     3b0:	1004c03a 	cmpne	r2,r2,zero
     3b4:	103ff81e 	bne	r2,zero,398 <main+0x168>
        }

        //Process Bank Change and save pattern
        if(keys & (1<<3)){
     3b8:	e0bff703 	ldbu	r2,-36(fp)
     3bc:	1080020c 	andi	r2,r2,8
     3c0:	1005003a 	cmpeq	r2,r2,zero
     3c4:	1000181e 	bne	r2,zero,428 <main+0x1f8>
            pattern[currentBank] = switches;
     3c8:	d0a62417 	ldw	r2,-26480(gp)
     3cc:	1085883a 	add	r2,r2,r2
     3d0:	1085883a 	add	r2,r2,r2
     3d4:	e0fff404 	addi	r3,fp,-48
     3d8:	10c5883a 	add	r2,r2,r3
     3dc:	10c00804 	addi	r3,r2,32
     3e0:	e0bff617 	ldw	r2,-40(fp)
     3e4:	18800015 	stw	r2,0(r3)
            currentBank++;
     3e8:	d0a62417 	ldw	r2,-26480(gp)
     3ec:	10800044 	addi	r2,r2,1
     3f0:	d0a62415 	stw	r2,-26480(gp)
            if (currentBank > 3) currentBank = 0;
     3f4:	d0a62417 	ldw	r2,-26480(gp)
     3f8:	10800110 	cmplti	r2,r2,4
     3fc:	1000061e 	bne	r2,zero,418 <main+0x1e8>
     400:	d0262415 	stw	zero,-26480(gp)
            while(keys & (1<<3)){keys = IORD_ALT_UP_PARALLEL_PORT_DATA(PUSHBUTTONS_BASE);}
     404:	00000406 	br	418 <main+0x1e8>
     408:	00840034 	movhi	r2,4096
     40c:	10801404 	addi	r2,r2,80
     410:	10800037 	ldwio	r2,0(r2)
     414:	e0bff705 	stb	r2,-36(fp)
     418:	e0bff703 	ldbu	r2,-36(fp)
     41c:	1080020c 	andi	r2,r2,8
     420:	1004c03a 	cmpne	r2,r2,zero
     424:	103ff81e 	bne	r2,zero,408 <main+0x1d8>

        /////////////////////////
        //    Output to RAM    //
        /////////////////////////

        int i = 0;
     428:	e03ff415 	stw	zero,-48(fp)
        for(i = 0; i<=3; i++){
     42c:	e03ff415 	stw	zero,-48(fp)
     430:	00001206 	br	47c <main+0x24c>
            IOWR_ALT_UP_PARALLEL_PORT_DATA(SRAM_BASE + OFFSET_PATTERN + (i*16), pattern[i]);
     434:	e0bff417 	ldw	r2,-48(fp)
     438:	1006913a 	slli	r3,r2,4
     43c:	00820034 	movhi	r2,2048
     440:	1885883a 	add	r2,r3,r2
     444:	1009883a 	mov	r4,r2
     448:	e0bff417 	ldw	r2,-48(fp)
     44c:	1085883a 	add	r2,r2,r2
     450:	1085883a 	add	r2,r2,r2
     454:	e0fff404 	addi	r3,fp,-48
     458:	10c5883a 	add	r2,r2,r3
     45c:	10800804 	addi	r2,r2,32
     460:	10800017 	ldw	r2,0(r2)
     464:	1007883a 	mov	r3,r2
     468:	2005883a 	mov	r2,r4
     46c:	10c00035 	stwio	r3,0(r2)
        /////////////////////////
        //    Output to RAM    //
        /////////////////////////

        int i = 0;
        for(i = 0; i<=3; i++){
     470:	e0bff417 	ldw	r2,-48(fp)
     474:	10800044 	addi	r2,r2,1
     478:	e0bff415 	stw	r2,-48(fp)
     47c:	e0bff417 	ldw	r2,-48(fp)
     480:	10800110 	cmplti	r2,r2,4
     484:	103feb1e 	bne	r2,zero,434 <main+0x204>
            IOWR_ALT_UP_PARALLEL_PORT_DATA(SRAM_BASE + OFFSET_PATTERN + (i*16), pattern[i]);
        }
        IOWR_ALT_UP_PARALLEL_PORT_DATA(SRAM_BASE + OFFSET_BPM, currentBPM);
     488:	d0a0000b 	ldhu	r2,-32768(gp)
     48c:	10ffffcc 	andi	r3,r2,65535
     490:	00820034 	movhi	r2,2048
     494:	10801004 	addi	r2,r2,64
     498:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_UP_PARALLEL_PORT_DATA(SRAM_BASE + OFFSET_PLAYPAUSE, playState);
     49c:	d0a623c3 	ldbu	r2,-26481(gp)
     4a0:	10c03fcc 	andi	r3,r2,255
     4a4:	00820034 	movhi	r2,2048
     4a8:	10801404 	addi	r2,r2,80
     4ac:	10c00035 	stwio	r3,0(r2)

        //Output to red LEDs
        IOWR_ALT_UP_PARALLEL_PORT_DATA(RED_LEDS_BASE, pattern[currentBank]);
     4b0:	d0a62417 	ldw	r2,-26480(gp)
     4b4:	1085883a 	add	r2,r2,r2
     4b8:	1085883a 	add	r2,r2,r2
     4bc:	e0fff404 	addi	r3,fp,-48
     4c0:	10c5883a 	add	r2,r2,r3
     4c4:	10800804 	addi	r2,r2,32
     4c8:	10800017 	ldw	r2,0(r2)
     4cc:	1007883a 	mov	r3,r2
     4d0:	00840034 	movhi	r2,4096
     4d4:	10c00035 	stwio	r3,0(r2)


        //Output to green LEDs
        IOWR_ALT_UP_PARALLEL_PORT_DATA(GREEN_LEDS_BASE, playState);
     4d8:	d0a623c3 	ldbu	r2,-26481(gp)
     4dc:	10c03fcc 	andi	r3,r2,255
     4e0:	00840034 	movhi	r2,4096
     4e4:	10800404 	addi	r2,r2,16
     4e8:	10c00035 	stwio	r3,0(r2)

        //Output to 7Segment Display
        digit1 = currentBPM / 100;
     4ec:	d0a0000b 	ldhu	r2,-32768(gp)
     4f0:	10ffffcc 	andi	r3,r2,65535
     4f4:	00801904 	movi	r2,100
     4f8:	1885203a 	divu	r2,r3,r2
     4fc:	d0a62385 	stb	r2,-26482(gp)
        digit2 = (currentBPM % 100) / 10;
     500:	d0a0000b 	ldhu	r2,-32768(gp)
     504:	10ffffcc 	andi	r3,r2,65535
     508:	00801904 	movi	r2,100
     50c:	1885203a 	divu	r2,r3,r2
     510:	10801924 	muli	r2,r2,100
     514:	1885c83a 	sub	r2,r3,r2
     518:	10ffffcc 	andi	r3,r2,65535
     51c:	00800284 	movi	r2,10
     520:	1885203a 	divu	r2,r3,r2
     524:	d0a62345 	stb	r2,-26483(gp)
        digit3 = ((currentBPM % 100) % 10);
     528:	d0a0000b 	ldhu	r2,-32768(gp)
     52c:	10ffffcc 	andi	r3,r2,65535
     530:	00801904 	movi	r2,100
     534:	1885203a 	divu	r2,r3,r2
     538:	10801924 	muli	r2,r2,100
     53c:	1885c83a 	sub	r2,r3,r2
     540:	10ffffcc 	andi	r3,r2,65535
     544:	00800284 	movi	r2,10
     548:	1885203a 	divu	r2,r3,r2
     54c:	108002a4 	muli	r2,r2,10
     550:	1885c83a 	sub	r2,r3,r2
     554:	d0a62305 	stb	r2,-26484(gp)

        BPMData = (digit_data[digit1]<<16) + (digit_data[digit2]<<8) + (digit_data[digit3]<<0);
     558:	d0a62383 	ldbu	r2,-26482(gp)
     55c:	10c03fcc 	andi	r3,r2,255
     560:	00800034 	movhi	r2,0
     564:	108dce04 	addi	r2,r2,14136
     568:	10c5883a 	add	r2,r2,r3
     56c:	10800003 	ldbu	r2,0(r2)
     570:	10803fcc 	andi	r2,r2,255
     574:	1008943a 	slli	r4,r2,16
     578:	d0a62343 	ldbu	r2,-26483(gp)
     57c:	10c03fcc 	andi	r3,r2,255
     580:	00800034 	movhi	r2,0
     584:	108dce04 	addi	r2,r2,14136
     588:	10c5883a 	add	r2,r2,r3
     58c:	10800003 	ldbu	r2,0(r2)
     590:	10803fcc 	andi	r2,r2,255
     594:	1004923a 	slli	r2,r2,8
     598:	2089883a 	add	r4,r4,r2
     59c:	d0a62303 	ldbu	r2,-26484(gp)
     5a0:	10c03fcc 	andi	r3,r2,255
     5a4:	00800034 	movhi	r2,0
     5a8:	108dce04 	addi	r2,r2,14136
     5ac:	10c5883a 	add	r2,r2,r3
     5b0:	10800003 	ldbu	r2,0(r2)
     5b4:	10803fcc 	andi	r2,r2,255
     5b8:	2085883a 	add	r2,r4,r2
     5bc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALT_UP_PARALLEL_PORT_DATA(HEX3_HEX0_BASE,BPMData);
     5c0:	e0fff517 	ldw	r3,-44(fp)
     5c4:	00840034 	movhi	r2,4096
     5c8:	10800804 	addi	r2,r2,32
     5cc:	10c00035 	stwio	r3,0(r2)

        IOWR_ALT_UP_PARALLEL_PORT_DATA(HEX7_HEX4_BASE,digit_data[currentBank]<<0);
     5d0:	d0e62417 	ldw	r3,-26480(gp)
     5d4:	00800034 	movhi	r2,0
     5d8:	108dce04 	addi	r2,r2,14136
     5dc:	10c5883a 	add	r2,r2,r3
     5e0:	10800003 	ldbu	r2,0(r2)
     5e4:	10c03fcc 	andi	r3,r2,255
     5e8:	00840034 	movhi	r2,4096
     5ec:	10800c04 	addi	r2,r2,48
     5f0:	10c00035 	stwio	r3,0(r2)
    }
     5f4:	003f2e06 	br	2b0 <main+0x80>

000005f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     5f8:	defffe04 	addi	sp,sp,-8
     5fc:	dfc00115 	stw	ra,4(sp)
     600:	df000015 	stw	fp,0(sp)
     604:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     608:	01000034 	movhi	r4,0
     60c:	2113e504 	addi	r4,r4,20372
     610:	01400034 	movhi	r5,0
     614:	294dce04 	addi	r5,r5,14136
     618:	01800034 	movhi	r6,0
     61c:	3193e504 	addi	r6,r6,20372
     620:	00006780 	call	678 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     624:	01000034 	movhi	r4,0
     628:	21000804 	addi	r4,r4,32
     62c:	01400034 	movhi	r5,0
     630:	29400804 	addi	r5,r5,32
     634:	01800034 	movhi	r6,0
     638:	31806e04 	addi	r6,r6,440
     63c:	00006780 	call	678 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     640:	01000034 	movhi	r4,0
     644:	210d7e04 	addi	r4,r4,13816
     648:	01400034 	movhi	r5,0
     64c:	294d7e04 	addi	r5,r5,13816
     650:	01800034 	movhi	r6,0
     654:	318dce04 	addi	r6,r6,14136
     658:	00006780 	call	678 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     65c:	00023a40 	call	23a4 <alt_dcache_flush_all>
  alt_icache_flush_all();
     660:	000265c0 	call	265c <alt_icache_flush_all>
}
     664:	e037883a 	mov	sp,fp
     668:	dfc00117 	ldw	ra,4(sp)
     66c:	df000017 	ldw	fp,0(sp)
     670:	dec00204 	addi	sp,sp,8
     674:	f800283a 	ret

00000678 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     678:	defffc04 	addi	sp,sp,-16
     67c:	df000315 	stw	fp,12(sp)
     680:	df000304 	addi	fp,sp,12
     684:	e13ffd15 	stw	r4,-12(fp)
     688:	e17ffe15 	stw	r5,-8(fp)
     68c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     690:	e0fffe17 	ldw	r3,-8(fp)
     694:	e0bffd17 	ldw	r2,-12(fp)
     698:	18800e26 	beq	r3,r2,6d4 <alt_load_section+0x5c>
  {
    while( to != end )
     69c:	00000a06 	br	6c8 <alt_load_section+0x50>
    {
      *to++ = *from++;
     6a0:	e0bffd17 	ldw	r2,-12(fp)
     6a4:	10c00017 	ldw	r3,0(r2)
     6a8:	e0bffe17 	ldw	r2,-8(fp)
     6ac:	10c00015 	stw	r3,0(r2)
     6b0:	e0bffe17 	ldw	r2,-8(fp)
     6b4:	10800104 	addi	r2,r2,4
     6b8:	e0bffe15 	stw	r2,-8(fp)
     6bc:	e0bffd17 	ldw	r2,-12(fp)
     6c0:	10800104 	addi	r2,r2,4
     6c4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     6c8:	e0fffe17 	ldw	r3,-8(fp)
     6cc:	e0bfff17 	ldw	r2,-4(fp)
     6d0:	18bff31e 	bne	r3,r2,6a0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
     6d4:	e037883a 	mov	sp,fp
     6d8:	df000017 	ldw	fp,0(sp)
     6dc:	dec00104 	addi	sp,sp,4
     6e0:	f800283a 	ret

000006e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     6e4:	defffd04 	addi	sp,sp,-12
     6e8:	dfc00215 	stw	ra,8(sp)
     6ec:	df000115 	stw	fp,4(sp)
     6f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     6f4:	0009883a 	mov	r4,zero
     6f8:	00007500 	call	750 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     6fc:	00007840 	call	784 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     700:	01000034 	movhi	r4,0
     704:	210d8e04 	addi	r4,r4,13880
     708:	01400034 	movhi	r5,0
     70c:	294d8e04 	addi	r5,r5,13880
     710:	01800034 	movhi	r6,0
     714:	318d8e04 	addi	r6,r6,13880
     718:	00027500 	call	2750 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     71c:	00025000 	call	2500 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     720:	01000034 	movhi	r4,0
     724:	21095904 	addi	r4,r4,9572
     728:	00030d80 	call	30d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     72c:	d1262517 	ldw	r4,-26476(gp)
     730:	d1662617 	ldw	r5,-26472(gp)
     734:	d1a62717 	ldw	r6,-26468(gp)
     738:	00002300 	call	230 <main>
     73c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     740:	01000044 	movi	r4,1
     744:	00022480 	call	2248 <close>
  exit (result);
     748:	e13fff17 	ldw	r4,-4(fp)
     74c:	00030ec0 	call	30ec <exit>

00000750 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     750:	defffd04 	addi	sp,sp,-12
     754:	dfc00215 	stw	ra,8(sp)
     758:	df000115 	stw	fp,4(sp)
     75c:	df000104 	addi	fp,sp,4
     760:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     764:	0002e500 	call	2e50 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     768:	00800044 	movi	r2,1
     76c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     770:	e037883a 	mov	sp,fp
     774:	dfc00117 	ldw	ra,4(sp)
     778:	df000017 	ldw	fp,0(sp)
     77c:	dec00204 	addi	sp,sp,8
     780:	f800283a 	ret

00000784 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     784:	defffe04 	addi	sp,sp,-8
     788:	dfc00115 	stw	ra,4(sp)
     78c:	df000015 	stw	fp,0(sp)
     790:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     794:	01040034 	movhi	r4,4096
     798:	21080004 	addi	r4,r4,8192
     79c:	000b883a 	mov	r5,zero
     7a0:	000d883a 	mov	r6,zero
     7a4:	01c00204 	movi	r7,8
     7a8:	00013d00 	call	13d0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     7ac:	01000034 	movhi	r4,0
     7b0:	210ddb04 	addi	r4,r4,14188
     7b4:	000b883a 	mov	r5,zero
     7b8:	01800204 	movi	r6,8
     7bc:	00009fc0 	call	9fc <altera_avalon_jtag_uart_init>
     7c0:	01000034 	movhi	r4,0
     7c4:	210dd104 	addi	r4,r4,14148
     7c8:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     7cc:	01000034 	movhi	r4,0
     7d0:	2111e904 	addi	r4,r4,18340
     7d4:	00015080 	call	1508 <alt_up_character_lcd_init>
     7d8:	01000034 	movhi	r4,0
     7dc:	2111e904 	addi	r4,r4,18340
     7e0:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
     7e4:	01000034 	movhi	r4,0
     7e8:	2111f404 	addi	r4,r4,18384
     7ec:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
     7f0:	01000034 	movhi	r4,0
     7f4:	2111ff04 	addi	r4,r4,18428
     7f8:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
     7fc:	01000034 	movhi	r4,0
     800:	21120a04 	addi	r4,r4,18472
     804:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
     808:	01000034 	movhi	r4,0
     80c:	21121504 	addi	r4,r4,18516
     810:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
     814:	01000034 	movhi	r4,0
     818:	21122004 	addi	r4,r4,18560
     81c:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
     820:	01000034 	movhi	r4,0
     824:	21122b04 	addi	r4,r4,18604
     828:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
     82c:	01000034 	movhi	r4,0
     830:	21123604 	addi	r4,r4,18648
     834:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
     838:	01000034 	movhi	r4,0
     83c:	21124104 	addi	r4,r4,18692
     840:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
     844:	01000034 	movhi	r4,0
     848:	21124c04 	addi	r4,r4,18736
     84c:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
     850:	01000034 	movhi	r4,0
     854:	21125704 	addi	r4,r4,18780
     858:	000087c0 	call	87c <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
     85c:	01000034 	movhi	r4,0
     860:	21126404 	addi	r4,r4,18832
     864:	000087c0 	call	87c <alt_dev_reg>
}
     868:	e037883a 	mov	sp,fp
     86c:	dfc00117 	ldw	ra,4(sp)
     870:	df000017 	ldw	fp,0(sp)
     874:	dec00204 	addi	sp,sp,8
     878:	f800283a 	ret

0000087c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     87c:	defffd04 	addi	sp,sp,-12
     880:	dfc00215 	stw	ra,8(sp)
     884:	df000115 	stw	fp,4(sp)
     888:	df000104 	addi	fp,sp,4
     88c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     890:	e13fff17 	ldw	r4,-4(fp)
     894:	01400034 	movhi	r5,0
     898:	2953dc04 	addi	r5,r5,20336
     89c:	00023ec0 	call	23ec <alt_dev_llist_insert>
}
     8a0:	e037883a 	mov	sp,fp
     8a4:	dfc00117 	ldw	ra,4(sp)
     8a8:	df000017 	ldw	fp,0(sp)
     8ac:	dec00204 	addi	sp,sp,8
     8b0:	f800283a 	ret

000008b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     8b4:	defffa04 	addi	sp,sp,-24
     8b8:	dfc00515 	stw	ra,20(sp)
     8bc:	df000415 	stw	fp,16(sp)
     8c0:	df000404 	addi	fp,sp,16
     8c4:	e13ffd15 	stw	r4,-12(fp)
     8c8:	e17ffe15 	stw	r5,-8(fp)
     8cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     8d0:	e0bffd17 	ldw	r2,-12(fp)
     8d4:	10800017 	ldw	r2,0(r2)
     8d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     8dc:	e0bffc17 	ldw	r2,-16(fp)
     8e0:	11000a04 	addi	r4,r2,40
     8e4:	e0bffd17 	ldw	r2,-12(fp)
     8e8:	11c00217 	ldw	r7,8(r2)
     8ec:	e17ffe17 	ldw	r5,-8(fp)
     8f0:	e1bfff17 	ldw	r6,-4(fp)
     8f4:	0000ef80 	call	ef8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     8f8:	e037883a 	mov	sp,fp
     8fc:	dfc00117 	ldw	ra,4(sp)
     900:	df000017 	ldw	fp,0(sp)
     904:	dec00204 	addi	sp,sp,8
     908:	f800283a 	ret

0000090c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     90c:	defffa04 	addi	sp,sp,-24
     910:	dfc00515 	stw	ra,20(sp)
     914:	df000415 	stw	fp,16(sp)
     918:	df000404 	addi	fp,sp,16
     91c:	e13ffd15 	stw	r4,-12(fp)
     920:	e17ffe15 	stw	r5,-8(fp)
     924:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     928:	e0bffd17 	ldw	r2,-12(fp)
     92c:	10800017 	ldw	r2,0(r2)
     930:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     934:	e0bffc17 	ldw	r2,-16(fp)
     938:	11000a04 	addi	r4,r2,40
     93c:	e0bffd17 	ldw	r2,-12(fp)
     940:	11c00217 	ldw	r7,8(r2)
     944:	e17ffe17 	ldw	r5,-8(fp)
     948:	e1bfff17 	ldw	r6,-4(fp)
     94c:	000111c0 	call	111c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     950:	e037883a 	mov	sp,fp
     954:	dfc00117 	ldw	ra,4(sp)
     958:	df000017 	ldw	fp,0(sp)
     95c:	dec00204 	addi	sp,sp,8
     960:	f800283a 	ret

00000964 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     964:	defffc04 	addi	sp,sp,-16
     968:	dfc00315 	stw	ra,12(sp)
     96c:	df000215 	stw	fp,8(sp)
     970:	df000204 	addi	fp,sp,8
     974:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     978:	e0bfff17 	ldw	r2,-4(fp)
     97c:	10800017 	ldw	r2,0(r2)
     980:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     984:	e0bffe17 	ldw	r2,-8(fp)
     988:	11000a04 	addi	r4,r2,40
     98c:	e0bfff17 	ldw	r2,-4(fp)
     990:	11400217 	ldw	r5,8(r2)
     994:	0000d900 	call	d90 <altera_avalon_jtag_uart_close>
}
     998:	e037883a 	mov	sp,fp
     99c:	dfc00117 	ldw	ra,4(sp)
     9a0:	df000017 	ldw	fp,0(sp)
     9a4:	dec00204 	addi	sp,sp,8
     9a8:	f800283a 	ret

000009ac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     9ac:	defffa04 	addi	sp,sp,-24
     9b0:	dfc00515 	stw	ra,20(sp)
     9b4:	df000415 	stw	fp,16(sp)
     9b8:	df000404 	addi	fp,sp,16
     9bc:	e13ffd15 	stw	r4,-12(fp)
     9c0:	e17ffe15 	stw	r5,-8(fp)
     9c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     9c8:	e0bffd17 	ldw	r2,-12(fp)
     9cc:	10800017 	ldw	r2,0(r2)
     9d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     9d4:	e0bffc17 	ldw	r2,-16(fp)
     9d8:	11000a04 	addi	r4,r2,40
     9dc:	e17ffe17 	ldw	r5,-8(fp)
     9e0:	e1bfff17 	ldw	r6,-4(fp)
     9e4:	0000e040 	call	e04 <altera_avalon_jtag_uart_ioctl>
}
     9e8:	e037883a 	mov	sp,fp
     9ec:	dfc00117 	ldw	ra,4(sp)
     9f0:	df000017 	ldw	fp,0(sp)
     9f4:	dec00204 	addi	sp,sp,8
     9f8:	f800283a 	ret

000009fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     9fc:	defffb04 	addi	sp,sp,-20
     a00:	dfc00415 	stw	ra,16(sp)
     a04:	df000315 	stw	fp,12(sp)
     a08:	df000304 	addi	fp,sp,12
     a0c:	e13ffd15 	stw	r4,-12(fp)
     a10:	e17ffe15 	stw	r5,-8(fp)
     a14:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     a18:	e0fffd17 	ldw	r3,-12(fp)
     a1c:	00800044 	movi	r2,1
     a20:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     a24:	e0bffd17 	ldw	r2,-12(fp)
     a28:	10800017 	ldw	r2,0(r2)
     a2c:	11000104 	addi	r4,r2,4
     a30:	e0bffd17 	ldw	r2,-12(fp)
     a34:	10800817 	ldw	r2,32(r2)
     a38:	1007883a 	mov	r3,r2
     a3c:	2005883a 	mov	r2,r4
     a40:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
     a44:	e13fff17 	ldw	r4,-4(fp)
     a48:	e17ffd17 	ldw	r5,-12(fp)
     a4c:	01800034 	movhi	r6,0
     a50:	3182ad04 	addi	r6,r6,2740
     a54:	00027c80 	call	27c8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     a58:	e0bffd17 	ldw	r2,-12(fp)
     a5c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     a60:	e0bffd17 	ldw	r2,-12(fp)
     a64:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     a68:	00800034 	movhi	r2,0
     a6c:	109a0204 	addi	r2,r2,26632
     a70:	10800017 	ldw	r2,0(r2)
     a74:	100b883a 	mov	r5,r2
     a78:	01800034 	movhi	r6,0
     a7c:	31833804 	addi	r6,r6,3296
     a80:	e1fffd17 	ldw	r7,-12(fp)
     a84:	00020f40 	call	20f4 <alt_alarm_start>
     a88:	1004403a 	cmpge	r2,r2,zero
     a8c:	1000041e 	bne	r2,zero,aa0 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     a90:	e0fffd17 	ldw	r3,-12(fp)
     a94:	00a00034 	movhi	r2,32768
     a98:	10bfffc4 	addi	r2,r2,-1
     a9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     aa0:	e037883a 	mov	sp,fp
     aa4:	dfc00117 	ldw	ra,4(sp)
     aa8:	df000017 	ldw	fp,0(sp)
     aac:	dec00204 	addi	sp,sp,8
     ab0:	f800283a 	ret

00000ab4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     ab4:	defff704 	addi	sp,sp,-36
     ab8:	df000815 	stw	fp,32(sp)
     abc:	df000804 	addi	fp,sp,32
     ac0:	e13ffe15 	stw	r4,-8(fp)
     ac4:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     ac8:	e0bffe17 	ldw	r2,-8(fp)
     acc:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
     ad0:	e0bffd17 	ldw	r2,-12(fp)
     ad4:	10800017 	ldw	r2,0(r2)
     ad8:	e0bffc15 	stw	r2,-16(fp)
     adc:	00000006 	br	ae0 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ae0:	e0bffc17 	ldw	r2,-16(fp)
     ae4:	10800104 	addi	r2,r2,4
     ae8:	10800037 	ldwio	r2,0(r2)
     aec:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     af0:	e0bffb17 	ldw	r2,-20(fp)
     af4:	1080c00c 	andi	r2,r2,768
     af8:	1005003a 	cmpeq	r2,r2,zero
     afc:	1000741e 	bne	r2,zero,cd0 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     b00:	e0bffb17 	ldw	r2,-20(fp)
     b04:	1080400c 	andi	r2,r2,256
     b08:	1005003a 	cmpeq	r2,r2,zero
     b0c:	1000351e 	bne	r2,zero,be4 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     b10:	00800074 	movhi	r2,1
     b14:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     b18:	e0bffd17 	ldw	r2,-12(fp)
     b1c:	10800a17 	ldw	r2,40(r2)
     b20:	10800044 	addi	r2,r2,1
     b24:	1081ffcc 	andi	r2,r2,2047
     b28:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
     b2c:	e0bffd17 	ldw	r2,-12(fp)
     b30:	10c00b17 	ldw	r3,44(r2)
     b34:	e0bff917 	ldw	r2,-28(fp)
     b38:	18801626 	beq	r3,r2,b94 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     b3c:	e0bffc17 	ldw	r2,-16(fp)
     b40:	10800037 	ldwio	r2,0(r2)
     b44:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     b48:	e0bffa17 	ldw	r2,-24(fp)
     b4c:	10a0000c 	andi	r2,r2,32768
     b50:	1005003a 	cmpeq	r2,r2,zero
     b54:	10000f1e 	bne	r2,zero,b94 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     b58:	e0bffd17 	ldw	r2,-12(fp)
     b5c:	10c00a17 	ldw	r3,40(r2)
     b60:	e0bffa17 	ldw	r2,-24(fp)
     b64:	1009883a 	mov	r4,r2
     b68:	e0bffd17 	ldw	r2,-12(fp)
     b6c:	1885883a 	add	r2,r3,r2
     b70:	10800e04 	addi	r2,r2,56
     b74:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     b78:	e0bffd17 	ldw	r2,-12(fp)
     b7c:	10800a17 	ldw	r2,40(r2)
     b80:	10800044 	addi	r2,r2,1
     b84:	10c1ffcc 	andi	r3,r2,2047
     b88:	e0bffd17 	ldw	r2,-12(fp)
     b8c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     b90:	003fe106 	br	b18 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
     b94:	e0bffa17 	ldw	r2,-24(fp)
     b98:	10bfffec 	andhi	r2,r2,65535
     b9c:	1005003a 	cmpeq	r2,r2,zero
     ba0:	1000101e 	bne	r2,zero,be4 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     ba4:	e0bffd17 	ldw	r2,-12(fp)
     ba8:	10c00817 	ldw	r3,32(r2)
     bac:	00bfff84 	movi	r2,-2
     bb0:	1886703a 	and	r3,r3,r2
     bb4:	e0bffd17 	ldw	r2,-12(fp)
     bb8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
     bbc:	e0bffc17 	ldw	r2,-16(fp)
     bc0:	11000104 	addi	r4,r2,4
     bc4:	e0bffd17 	ldw	r2,-12(fp)
     bc8:	10800817 	ldw	r2,32(r2)
     bcc:	1007883a 	mov	r3,r2
     bd0:	2005883a 	mov	r2,r4
     bd4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     bd8:	e0bffc17 	ldw	r2,-16(fp)
     bdc:	10800104 	addi	r2,r2,4
     be0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
     be4:	e0bffb17 	ldw	r2,-20(fp)
     be8:	1080800c 	andi	r2,r2,512
     bec:	1005003a 	cmpeq	r2,r2,zero
     bf0:	103fbb1e 	bne	r2,zero,ae0 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
     bf4:	e0bffb17 	ldw	r2,-20(fp)
     bf8:	10bfffec 	andhi	r2,r2,65535
     bfc:	1004d43a 	srli	r2,r2,16
     c00:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
     c04:	00001506 	br	c5c <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
     c08:	e13ffc17 	ldw	r4,-16(fp)
     c0c:	e0bffd17 	ldw	r2,-12(fp)
     c10:	10c00d17 	ldw	r3,52(r2)
     c14:	e0bffd17 	ldw	r2,-12(fp)
     c18:	1885883a 	add	r2,r3,r2
     c1c:	10820e04 	addi	r2,r2,2104
     c20:	10800003 	ldbu	r2,0(r2)
     c24:	10c03fcc 	andi	r3,r2,255
     c28:	18c0201c 	xori	r3,r3,128
     c2c:	18ffe004 	addi	r3,r3,-128
     c30:	2005883a 	mov	r2,r4
     c34:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     c38:	e0bffd17 	ldw	r2,-12(fp)
     c3c:	10800d17 	ldw	r2,52(r2)
     c40:	10800044 	addi	r2,r2,1
     c44:	10c1ffcc 	andi	r3,r2,2047
     c48:	e0bffd17 	ldw	r2,-12(fp)
     c4c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
     c50:	e0bff817 	ldw	r2,-32(fp)
     c54:	10bfffc4 	addi	r2,r2,-1
     c58:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
     c5c:	e0bff817 	ldw	r2,-32(fp)
     c60:	1005003a 	cmpeq	r2,r2,zero
     c64:	1000051e 	bne	r2,zero,c7c <altera_avalon_jtag_uart_irq+0x1c8>
     c68:	e0bffd17 	ldw	r2,-12(fp)
     c6c:	10c00d17 	ldw	r3,52(r2)
     c70:	e0bffd17 	ldw	r2,-12(fp)
     c74:	10800c17 	ldw	r2,48(r2)
     c78:	18bfe31e 	bne	r3,r2,c08 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
     c7c:	e0bff817 	ldw	r2,-32(fp)
     c80:	1005003a 	cmpeq	r2,r2,zero
     c84:	103f961e 	bne	r2,zero,ae0 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     c88:	e0bffd17 	ldw	r2,-12(fp)
     c8c:	10c00817 	ldw	r3,32(r2)
     c90:	00bfff44 	movi	r2,-3
     c94:	1886703a 	and	r3,r3,r2
     c98:	e0bffd17 	ldw	r2,-12(fp)
     c9c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
     ca0:	e0bffd17 	ldw	r2,-12(fp)
     ca4:	10800017 	ldw	r2,0(r2)
     ca8:	11000104 	addi	r4,r2,4
     cac:	e0bffd17 	ldw	r2,-12(fp)
     cb0:	10800817 	ldw	r2,32(r2)
     cb4:	1007883a 	mov	r3,r2
     cb8:	2005883a 	mov	r2,r4
     cbc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     cc0:	e0bffc17 	ldw	r2,-16(fp)
     cc4:	10800104 	addi	r2,r2,4
     cc8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
     ccc:	003f8406 	br	ae0 <altera_avalon_jtag_uart_irq+0x2c>
}
     cd0:	e037883a 	mov	sp,fp
     cd4:	df000017 	ldw	fp,0(sp)
     cd8:	dec00104 	addi	sp,sp,4
     cdc:	f800283a 	ret

00000ce0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
     ce0:	defffc04 	addi	sp,sp,-16
     ce4:	df000315 	stw	fp,12(sp)
     ce8:	df000304 	addi	fp,sp,12
     cec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
     cf0:	e0bfff17 	ldw	r2,-4(fp)
     cf4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     cf8:	e0bffe17 	ldw	r2,-8(fp)
     cfc:	10800017 	ldw	r2,0(r2)
     d00:	10800104 	addi	r2,r2,4
     d04:	10800037 	ldwio	r2,0(r2)
     d08:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     d0c:	e0bffd17 	ldw	r2,-12(fp)
     d10:	1081000c 	andi	r2,r2,1024
     d14:	1005003a 	cmpeq	r2,r2,zero
     d18:	10000c1e 	bne	r2,zero,d4c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     d1c:	e0bffe17 	ldw	r2,-8(fp)
     d20:	10800017 	ldw	r2,0(r2)
     d24:	11000104 	addi	r4,r2,4
     d28:	e0bffe17 	ldw	r2,-8(fp)
     d2c:	10800817 	ldw	r2,32(r2)
     d30:	10810014 	ori	r2,r2,1024
     d34:	1007883a 	mov	r3,r2
     d38:	2005883a 	mov	r2,r4
     d3c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
     d40:	e0bffe17 	ldw	r2,-8(fp)
     d44:	10000915 	stw	zero,36(r2)
     d48:	00000a06 	br	d74 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     d4c:	e0bffe17 	ldw	r2,-8(fp)
     d50:	10c00917 	ldw	r3,36(r2)
     d54:	00a00034 	movhi	r2,32768
     d58:	10bfff04 	addi	r2,r2,-4
     d5c:	10c00536 	bltu	r2,r3,d74 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
     d60:	e0bffe17 	ldw	r2,-8(fp)
     d64:	10800917 	ldw	r2,36(r2)
     d68:	10c00044 	addi	r3,r2,1
     d6c:	e0bffe17 	ldw	r2,-8(fp)
     d70:	10c00915 	stw	r3,36(r2)
     d74:	00800034 	movhi	r2,0
     d78:	109a0204 	addi	r2,r2,26632
     d7c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     d80:	e037883a 	mov	sp,fp
     d84:	df000017 	ldw	fp,0(sp)
     d88:	dec00104 	addi	sp,sp,4
     d8c:	f800283a 	ret

00000d90 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
     d90:	defffc04 	addi	sp,sp,-16
     d94:	df000315 	stw	fp,12(sp)
     d98:	df000304 	addi	fp,sp,12
     d9c:	e13ffd15 	stw	r4,-12(fp)
     da0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     da4:	00000706 	br	dc4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
     da8:	e0bffe17 	ldw	r2,-8(fp)
     dac:	1090000c 	andi	r2,r2,16384
     db0:	1005003a 	cmpeq	r2,r2,zero
     db4:	1000031e 	bne	r2,zero,dc4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
     db8:	00bffd44 	movi	r2,-11
     dbc:	e0bfff15 	stw	r2,-4(fp)
     dc0:	00000b06 	br	df0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
     dc4:	e0bffd17 	ldw	r2,-12(fp)
     dc8:	10c00d17 	ldw	r3,52(r2)
     dcc:	e0bffd17 	ldw	r2,-12(fp)
     dd0:	10800c17 	ldw	r2,48(r2)
     dd4:	18800526 	beq	r3,r2,dec <altera_avalon_jtag_uart_close+0x5c>
     dd8:	e0bffd17 	ldw	r2,-12(fp)
     ddc:	10c00917 	ldw	r3,36(r2)
     de0:	e0bffd17 	ldw	r2,-12(fp)
     de4:	10800117 	ldw	r2,4(r2)
     de8:	18bfef36 	bltu	r3,r2,da8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
     dec:	e03fff15 	stw	zero,-4(fp)
     df0:	e0bfff17 	ldw	r2,-4(fp)
}
     df4:	e037883a 	mov	sp,fp
     df8:	df000017 	ldw	fp,0(sp)
     dfc:	dec00104 	addi	sp,sp,4
     e00:	f800283a 	ret

00000e04 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
     e04:	defff804 	addi	sp,sp,-32
     e08:	df000715 	stw	fp,28(sp)
     e0c:	df000704 	addi	fp,sp,28
     e10:	e13ffb15 	stw	r4,-20(fp)
     e14:	e17ffc15 	stw	r5,-16(fp)
     e18:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
     e1c:	00bff9c4 	movi	r2,-25
     e20:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
     e24:	e0bffc17 	ldw	r2,-16(fp)
     e28:	e0bfff15 	stw	r2,-4(fp)
     e2c:	e0ffff17 	ldw	r3,-4(fp)
     e30:	189a8060 	cmpeqi	r2,r3,27137
     e34:	1000041e 	bne	r2,zero,e48 <altera_avalon_jtag_uart_ioctl+0x44>
     e38:	e0ffff17 	ldw	r3,-4(fp)
     e3c:	189a80a0 	cmpeqi	r2,r3,27138
     e40:	10001b1e 	bne	r2,zero,eb0 <altera_avalon_jtag_uart_ioctl+0xac>
     e44:	00002706 	br	ee4 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
     e48:	e0bffb17 	ldw	r2,-20(fp)
     e4c:	10c00117 	ldw	r3,4(r2)
     e50:	00a00034 	movhi	r2,32768
     e54:	10bfffc4 	addi	r2,r2,-1
     e58:	18802226 	beq	r3,r2,ee4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
     e5c:	e0bffd17 	ldw	r2,-12(fp)
     e60:	10800017 	ldw	r2,0(r2)
     e64:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
     e68:	e0bff917 	ldw	r2,-28(fp)
     e6c:	10800090 	cmplti	r2,r2,2
     e70:	1000071e 	bne	r2,zero,e90 <altera_avalon_jtag_uart_ioctl+0x8c>
     e74:	e0fff917 	ldw	r3,-28(fp)
     e78:	00a00034 	movhi	r2,32768
     e7c:	10bfffc4 	addi	r2,r2,-1
     e80:	18800326 	beq	r3,r2,e90 <altera_avalon_jtag_uart_ioctl+0x8c>
     e84:	e0bff917 	ldw	r2,-28(fp)
     e88:	e0bffe15 	stw	r2,-8(fp)
     e8c:	00000306 	br	e9c <altera_avalon_jtag_uart_ioctl+0x98>
     e90:	00e00034 	movhi	r3,32768
     e94:	18ffff84 	addi	r3,r3,-2
     e98:	e0fffe15 	stw	r3,-8(fp)
     e9c:	e0bffb17 	ldw	r2,-20(fp)
     ea0:	e0fffe17 	ldw	r3,-8(fp)
     ea4:	10c00115 	stw	r3,4(r2)
      rc = 0;
     ea8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
     eac:	00000d06 	br	ee4 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
     eb0:	e0bffb17 	ldw	r2,-20(fp)
     eb4:	10c00117 	ldw	r3,4(r2)
     eb8:	00a00034 	movhi	r2,32768
     ebc:	10bfffc4 	addi	r2,r2,-1
     ec0:	18800826 	beq	r3,r2,ee4 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
     ec4:	e13ffd17 	ldw	r4,-12(fp)
     ec8:	e0bffb17 	ldw	r2,-20(fp)
     ecc:	10c00917 	ldw	r3,36(r2)
     ed0:	e0bffb17 	ldw	r2,-20(fp)
     ed4:	10800117 	ldw	r2,4(r2)
     ed8:	1885803a 	cmpltu	r2,r3,r2
     edc:	20800015 	stw	r2,0(r4)
      rc = 0;
     ee0:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
     ee4:	e0bffa17 	ldw	r2,-24(fp)
}
     ee8:	e037883a 	mov	sp,fp
     eec:	df000017 	ldw	fp,0(sp)
     ef0:	dec00104 	addi	sp,sp,4
     ef4:	f800283a 	ret

00000ef8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
     ef8:	defff204 	addi	sp,sp,-56
     efc:	dfc00d15 	stw	ra,52(sp)
     f00:	df000c15 	stw	fp,48(sp)
     f04:	df000c04 	addi	fp,sp,48
     f08:	e13ffb15 	stw	r4,-20(fp)
     f0c:	e17ffc15 	stw	r5,-16(fp)
     f10:	e1bffd15 	stw	r6,-12(fp)
     f14:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
     f18:	e0bffc17 	ldw	r2,-16(fp)
     f1c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
     f20:	00004806 	br	1044 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
     f24:	e0bffb17 	ldw	r2,-20(fp)
     f28:	10800a17 	ldw	r2,40(r2)
     f2c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
     f30:	e0bffb17 	ldw	r2,-20(fp)
     f34:	10800b17 	ldw	r2,44(r2)
     f38:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
     f3c:	e0fff717 	ldw	r3,-36(fp)
     f40:	e0bff617 	ldw	r2,-40(fp)
     f44:	18800536 	bltu	r3,r2,f5c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
     f48:	e0bff717 	ldw	r2,-36(fp)
     f4c:	e0fff617 	ldw	r3,-40(fp)
     f50:	10c5c83a 	sub	r2,r2,r3
     f54:	e0bff815 	stw	r2,-32(fp)
     f58:	00000406 	br	f6c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
     f5c:	00820004 	movi	r2,2048
     f60:	e0fff617 	ldw	r3,-40(fp)
     f64:	10c5c83a 	sub	r2,r2,r3
     f68:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
     f6c:	e0bff817 	ldw	r2,-32(fp)
     f70:	1005003a 	cmpeq	r2,r2,zero
     f74:	10001f1e 	bne	r2,zero,ff4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
     f78:	e0fffd17 	ldw	r3,-12(fp)
     f7c:	e0bff817 	ldw	r2,-32(fp)
     f80:	1880022e 	bgeu	r3,r2,f8c <altera_avalon_jtag_uart_read+0x94>
        n = space;
     f84:	e0bffd17 	ldw	r2,-12(fp)
     f88:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
     f8c:	e0bffb17 	ldw	r2,-20(fp)
     f90:	10c00e04 	addi	r3,r2,56
     f94:	e0bff617 	ldw	r2,-40(fp)
     f98:	1887883a 	add	r3,r3,r2
     f9c:	e0bffa17 	ldw	r2,-24(fp)
     fa0:	1009883a 	mov	r4,r2
     fa4:	180b883a 	mov	r5,r3
     fa8:	e1bff817 	ldw	r6,-32(fp)
     fac:	00031980 	call	3198 <memcpy>
      ptr   += n;
     fb0:	e0fff817 	ldw	r3,-32(fp)
     fb4:	e0bffa17 	ldw	r2,-24(fp)
     fb8:	10c5883a 	add	r2,r2,r3
     fbc:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
     fc0:	e0fffd17 	ldw	r3,-12(fp)
     fc4:	e0bff817 	ldw	r2,-32(fp)
     fc8:	1885c83a 	sub	r2,r3,r2
     fcc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     fd0:	e0fff617 	ldw	r3,-40(fp)
     fd4:	e0bff817 	ldw	r2,-32(fp)
     fd8:	1885883a 	add	r2,r3,r2
     fdc:	10c1ffcc 	andi	r3,r2,2047
     fe0:	e0bffb17 	ldw	r2,-20(fp)
     fe4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
     fe8:	e0bffd17 	ldw	r2,-12(fp)
     fec:	10800048 	cmpgei	r2,r2,1
     ff0:	103fcc1e 	bne	r2,zero,f24 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
     ff4:	e0fffa17 	ldw	r3,-24(fp)
     ff8:	e0bffc17 	ldw	r2,-16(fp)
     ffc:	1880141e 	bne	r3,r2,1050 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    1000:	e0bffe17 	ldw	r2,-8(fp)
    1004:	1090000c 	andi	r2,r2,16384
    1008:	1004c03a 	cmpne	r2,r2,zero
    100c:	1000101e 	bne	r2,zero,1050 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1010:	e0bffb17 	ldw	r2,-20(fp)
    1014:	10c00a17 	ldw	r3,40(r2)
    1018:	e0bff717 	ldw	r2,-36(fp)
    101c:	1880051e 	bne	r3,r2,1034 <altera_avalon_jtag_uart_read+0x13c>
    1020:	e0bffb17 	ldw	r2,-20(fp)
    1024:	10c00917 	ldw	r3,36(r2)
    1028:	e0bffb17 	ldw	r2,-20(fp)
    102c:	10800117 	ldw	r2,4(r2)
    1030:	18bff736 	bltu	r3,r2,1010 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1034:	e0bffb17 	ldw	r2,-20(fp)
    1038:	10c00a17 	ldw	r3,40(r2)
    103c:	e0bff717 	ldw	r2,-36(fp)
    1040:	18800326 	beq	r3,r2,1050 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1044:	e0bffd17 	ldw	r2,-12(fp)
    1048:	10800048 	cmpgei	r2,r2,1
    104c:	103fb51e 	bne	r2,zero,f24 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    1050:	e0fffa17 	ldw	r3,-24(fp)
    1054:	e0bffc17 	ldw	r2,-16(fp)
    1058:	18801926 	beq	r3,r2,10c0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    105c:	0005303a 	rdctl	r2,status
    1060:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1064:	e0fff517 	ldw	r3,-44(fp)
    1068:	00bfff84 	movi	r2,-2
    106c:	1884703a 	and	r2,r3,r2
    1070:	1001703a 	wrctl	status,r2
  
  return context;
    1074:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    1078:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    107c:	e0bffb17 	ldw	r2,-20(fp)
    1080:	10800817 	ldw	r2,32(r2)
    1084:	10c00054 	ori	r3,r2,1
    1088:	e0bffb17 	ldw	r2,-20(fp)
    108c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1090:	e0bffb17 	ldw	r2,-20(fp)
    1094:	10800017 	ldw	r2,0(r2)
    1098:	11000104 	addi	r4,r2,4
    109c:	e0bffb17 	ldw	r2,-20(fp)
    10a0:	10800817 	ldw	r2,32(r2)
    10a4:	1007883a 	mov	r3,r2
    10a8:	2005883a 	mov	r2,r4
    10ac:	10c00035 	stwio	r3,0(r2)
    10b0:	e0bff917 	ldw	r2,-28(fp)
    10b4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    10b8:	e0bff417 	ldw	r2,-48(fp)
    10bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    10c0:	e0fffa17 	ldw	r3,-24(fp)
    10c4:	e0bffc17 	ldw	r2,-16(fp)
    10c8:	18800526 	beq	r3,r2,10e0 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    10cc:	e0fffa17 	ldw	r3,-24(fp)
    10d0:	e0bffc17 	ldw	r2,-16(fp)
    10d4:	1887c83a 	sub	r3,r3,r2
    10d8:	e0ffff15 	stw	r3,-4(fp)
    10dc:	00000906 	br	1104 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    10e0:	e0bffe17 	ldw	r2,-8(fp)
    10e4:	1090000c 	andi	r2,r2,16384
    10e8:	1005003a 	cmpeq	r2,r2,zero
    10ec:	1000031e 	bne	r2,zero,10fc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    10f0:	00bffd44 	movi	r2,-11
    10f4:	e0bfff15 	stw	r2,-4(fp)
    10f8:	00000206 	br	1104 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    10fc:	00bffec4 	movi	r2,-5
    1100:	e0bfff15 	stw	r2,-4(fp)
    1104:	e0bfff17 	ldw	r2,-4(fp)
}
    1108:	e037883a 	mov	sp,fp
    110c:	dfc00117 	ldw	ra,4(sp)
    1110:	df000017 	ldw	fp,0(sp)
    1114:	dec00204 	addi	sp,sp,8
    1118:	f800283a 	ret

0000111c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    111c:	defff204 	addi	sp,sp,-56
    1120:	dfc00d15 	stw	ra,52(sp)
    1124:	df000c15 	stw	fp,48(sp)
    1128:	df000c04 	addi	fp,sp,48
    112c:	e13ffb15 	stw	r4,-20(fp)
    1130:	e17ffc15 	stw	r5,-16(fp)
    1134:	e1bffd15 	stw	r6,-12(fp)
    1138:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    113c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1140:	e0bffc17 	ldw	r2,-16(fp)
    1144:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1148:	00003a06 	br	1234 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    114c:	e0bffb17 	ldw	r2,-20(fp)
    1150:	10800c17 	ldw	r2,48(r2)
    1154:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    1158:	e0bffb17 	ldw	r2,-20(fp)
    115c:	10800d17 	ldw	r2,52(r2)
    1160:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    1164:	e0fffa17 	ldw	r3,-24(fp)
    1168:	e0bff917 	ldw	r2,-28(fp)
    116c:	1880062e 	bgeu	r3,r2,1188 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    1170:	e0fff917 	ldw	r3,-28(fp)
    1174:	e0bffa17 	ldw	r2,-24(fp)
    1178:	1885c83a 	sub	r2,r3,r2
    117c:	10bfffc4 	addi	r2,r2,-1
    1180:	e0bff815 	stw	r2,-32(fp)
    1184:	00000c06 	br	11b8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    1188:	e0bff917 	ldw	r2,-28(fp)
    118c:	1005003a 	cmpeq	r2,r2,zero
    1190:	1000051e 	bne	r2,zero,11a8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    1194:	00820004 	movi	r2,2048
    1198:	e0fffa17 	ldw	r3,-24(fp)
    119c:	10c5c83a 	sub	r2,r2,r3
    11a0:	e0bff815 	stw	r2,-32(fp)
    11a4:	00000406 	br	11b8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    11a8:	0081ffc4 	movi	r2,2047
    11ac:	e0fffa17 	ldw	r3,-24(fp)
    11b0:	10c5c83a 	sub	r2,r2,r3
    11b4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    11b8:	e0bff817 	ldw	r2,-32(fp)
    11bc:	1005003a 	cmpeq	r2,r2,zero
    11c0:	10001f1e 	bne	r2,zero,1240 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    11c4:	e0fffd17 	ldw	r3,-12(fp)
    11c8:	e0bff817 	ldw	r2,-32(fp)
    11cc:	1880022e 	bgeu	r3,r2,11d8 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    11d0:	e0bffd17 	ldw	r2,-12(fp)
    11d4:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    11d8:	e0bffb17 	ldw	r2,-20(fp)
    11dc:	10c20e04 	addi	r3,r2,2104
    11e0:	e0bffa17 	ldw	r2,-24(fp)
    11e4:	1885883a 	add	r2,r3,r2
    11e8:	e0fffc17 	ldw	r3,-16(fp)
    11ec:	1009883a 	mov	r4,r2
    11f0:	180b883a 	mov	r5,r3
    11f4:	e1bff817 	ldw	r6,-32(fp)
    11f8:	00031980 	call	3198 <memcpy>
      ptr   += n;
    11fc:	e0fff817 	ldw	r3,-32(fp)
    1200:	e0bffc17 	ldw	r2,-16(fp)
    1204:	10c5883a 	add	r2,r2,r3
    1208:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    120c:	e0fffd17 	ldw	r3,-12(fp)
    1210:	e0bff817 	ldw	r2,-32(fp)
    1214:	1885c83a 	sub	r2,r3,r2
    1218:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    121c:	e0fffa17 	ldw	r3,-24(fp)
    1220:	e0bff817 	ldw	r2,-32(fp)
    1224:	1885883a 	add	r2,r3,r2
    1228:	10c1ffcc 	andi	r3,r2,2047
    122c:	e0bffb17 	ldw	r2,-20(fp)
    1230:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1234:	e0bffd17 	ldw	r2,-12(fp)
    1238:	10800048 	cmpgei	r2,r2,1
    123c:	103fc31e 	bne	r2,zero,114c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1240:	0005303a 	rdctl	r2,status
    1244:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1248:	e0fff517 	ldw	r3,-44(fp)
    124c:	00bfff84 	movi	r2,-2
    1250:	1884703a 	and	r2,r3,r2
    1254:	1001703a 	wrctl	status,r2
  
  return context;
    1258:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    125c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1260:	e0bffb17 	ldw	r2,-20(fp)
    1264:	10800817 	ldw	r2,32(r2)
    1268:	10c00094 	ori	r3,r2,2
    126c:	e0bffb17 	ldw	r2,-20(fp)
    1270:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1274:	e0bffb17 	ldw	r2,-20(fp)
    1278:	10800017 	ldw	r2,0(r2)
    127c:	11000104 	addi	r4,r2,4
    1280:	e0bffb17 	ldw	r2,-20(fp)
    1284:	10800817 	ldw	r2,32(r2)
    1288:	1007883a 	mov	r3,r2
    128c:	2005883a 	mov	r2,r4
    1290:	10c00035 	stwio	r3,0(r2)
    1294:	e0bff717 	ldw	r2,-36(fp)
    1298:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    129c:	e0bff417 	ldw	r2,-48(fp)
    12a0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    12a4:	e0bffd17 	ldw	r2,-12(fp)
    12a8:	10800050 	cmplti	r2,r2,1
    12ac:	1000111e 	bne	r2,zero,12f4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    12b0:	e0bffe17 	ldw	r2,-8(fp)
    12b4:	1090000c 	andi	r2,r2,16384
    12b8:	1004c03a 	cmpne	r2,r2,zero
    12bc:	1000101e 	bne	r2,zero,1300 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    12c0:	e0bffb17 	ldw	r2,-20(fp)
    12c4:	10c00d17 	ldw	r3,52(r2)
    12c8:	e0bff917 	ldw	r2,-28(fp)
    12cc:	1880051e 	bne	r3,r2,12e4 <altera_avalon_jtag_uart_write+0x1c8>
    12d0:	e0bffb17 	ldw	r2,-20(fp)
    12d4:	10c00917 	ldw	r3,36(r2)
    12d8:	e0bffb17 	ldw	r2,-20(fp)
    12dc:	10800117 	ldw	r2,4(r2)
    12e0:	18bff736 	bltu	r3,r2,12c0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    12e4:	e0bffb17 	ldw	r2,-20(fp)
    12e8:	10c00d17 	ldw	r3,52(r2)
    12ec:	e0bff917 	ldw	r2,-28(fp)
    12f0:	18800326 	beq	r3,r2,1300 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    12f4:	e0bffd17 	ldw	r2,-12(fp)
    12f8:	10800048 	cmpgei	r2,r2,1
    12fc:	103fcd1e 	bne	r2,zero,1234 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1300:	e0fffc17 	ldw	r3,-16(fp)
    1304:	e0bff617 	ldw	r2,-40(fp)
    1308:	18800526 	beq	r3,r2,1320 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    130c:	e0fffc17 	ldw	r3,-16(fp)
    1310:	e0bff617 	ldw	r2,-40(fp)
    1314:	1887c83a 	sub	r3,r3,r2
    1318:	e0ffff15 	stw	r3,-4(fp)
    131c:	00000906 	br	1344 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    1320:	e0bffe17 	ldw	r2,-8(fp)
    1324:	1090000c 	andi	r2,r2,16384
    1328:	1005003a 	cmpeq	r2,r2,zero
    132c:	1000031e 	bne	r2,zero,133c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    1330:	00bffd44 	movi	r2,-11
    1334:	e0bfff15 	stw	r2,-4(fp)
    1338:	00000206 	br	1344 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    133c:	00bffec4 	movi	r2,-5
    1340:	e0bfff15 	stw	r2,-4(fp)
    1344:	e0bfff17 	ldw	r2,-4(fp)
}
    1348:	e037883a 	mov	sp,fp
    134c:	dfc00117 	ldw	ra,4(sp)
    1350:	df000017 	ldw	fp,0(sp)
    1354:	dec00204 	addi	sp,sp,8
    1358:	f800283a 	ret

0000135c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    135c:	defff904 	addi	sp,sp,-28
    1360:	dfc00615 	stw	ra,24(sp)
    1364:	df000515 	stw	fp,20(sp)
    1368:	df000504 	addi	fp,sp,20
    136c:	e13ffe15 	stw	r4,-8(fp)
    1370:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1374:	e0bffe17 	ldw	r2,-8(fp)
    1378:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    137c:	e0bffe17 	ldw	r2,-8(fp)
    1380:	10800104 	addi	r2,r2,4
    1384:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1388:	0005303a 	rdctl	r2,status
    138c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1390:	e0fffc17 	ldw	r3,-16(fp)
    1394:	00bfff84 	movi	r2,-2
    1398:	1884703a 	and	r2,r3,r2
    139c:	1001703a 	wrctl	status,r2
  
  return context;
    13a0:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    13a4:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
    13a8:	0002d440 	call	2d44 <alt_tick>
    13ac:	e0bffd17 	ldw	r2,-12(fp)
    13b0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    13b4:	e0bffb17 	ldw	r2,-20(fp)
    13b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    13bc:	e037883a 	mov	sp,fp
    13c0:	dfc00117 	ldw	ra,4(sp)
    13c4:	df000017 	ldw	fp,0(sp)
    13c8:	dec00204 	addi	sp,sp,8
    13cc:	f800283a 	ret

000013d0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    13d0:	defff904 	addi	sp,sp,-28
    13d4:	dfc00615 	stw	ra,24(sp)
    13d8:	df000515 	stw	fp,20(sp)
    13dc:	df000504 	addi	fp,sp,20
    13e0:	e13ffc15 	stw	r4,-16(fp)
    13e4:	e17ffd15 	stw	r5,-12(fp)
    13e8:	e1bffe15 	stw	r6,-8(fp)
    13ec:	e1ffff15 	stw	r7,-4(fp)
    13f0:	e0bfff17 	ldw	r2,-4(fp)
    13f4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    13f8:	00800034 	movhi	r2,0
    13fc:	109a0204 	addi	r2,r2,26632
    1400:	10800017 	ldw	r2,0(r2)
    1404:	1004c03a 	cmpne	r2,r2,zero
    1408:	1000041e 	bne	r2,zero,141c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    140c:	00c00034 	movhi	r3,0
    1410:	18da0204 	addi	r3,r3,26632
    1414:	e0bffb17 	ldw	r2,-20(fp)
    1418:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    141c:	e0bffc17 	ldw	r2,-16(fp)
    1420:	10800104 	addi	r2,r2,4
    1424:	1007883a 	mov	r3,r2
    1428:	008001c4 	movi	r2,7
    142c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1430:	e13ffe17 	ldw	r4,-8(fp)
    1434:	e17ffc17 	ldw	r5,-16(fp)
    1438:	01800034 	movhi	r6,0
    143c:	3184d704 	addi	r6,r6,4956
    1440:	00027c80 	call	27c8 <alt_irq_register>
#endif  
}
    1444:	e037883a 	mov	sp,fp
    1448:	dfc00117 	ldw	ra,4(sp)
    144c:	df000017 	ldw	fp,0(sp)
    1450:	dec00204 	addi	sp,sp,8
    1454:	f800283a 	ret

00001458 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
    1458:	defffc04 	addi	sp,sp,-16
    145c:	df000315 	stw	fp,12(sp)
    1460:	df000304 	addi	fp,sp,12
    1464:	e13ffe15 	stw	r4,-8(fp)
    1468:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
    146c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
    1470:	e0bfff17 	ldw	r2,-4(fp)
    1474:	1004c03a 	cmpne	r2,r2,zero
    1478:	1000061e 	bne	r2,zero,1494 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
    147c:	e0bffe17 	ldw	r2,-8(fp)
    1480:	1007883a 	mov	r3,r2
    1484:	e0bffd03 	ldbu	r2,-12(fp)
    1488:	10c4b03a 	or	r2,r2,r3
    148c:	e0bffd05 	stb	r2,-12(fp)
    1490:	00000806 	br	14b4 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
    1494:	e0bffe17 	ldw	r2,-8(fp)
    1498:	1007883a 	mov	r3,r2
    149c:	e0bffd03 	ldbu	r2,-12(fp)
    14a0:	10c4b03a 	or	r2,r2,r3
    14a4:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
    14a8:	e0bffd03 	ldbu	r2,-12(fp)
    14ac:	10801014 	ori	r2,r2,64
    14b0:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    14b4:	e0fffd03 	ldbu	r3,-12(fp)
    14b8:	00bfe004 	movi	r2,-128
    14bc:	1884b03a 	or	r2,r3,r2
    14c0:	10803fcc 	andi	r2,r2,255
}
    14c4:	e037883a 	mov	sp,fp
    14c8:	df000017 	ldw	fp,0(sp)
    14cc:	dec00104 	addi	sp,sp,4
    14d0:	f800283a 	ret

000014d4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
    14d4:	defffd04 	addi	sp,sp,-12
    14d8:	df000215 	stw	fp,8(sp)
    14dc:	df000204 	addi	fp,sp,8
    14e0:	e13ffe15 	stw	r4,-8(fp)
    14e4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    14e8:	e0bffe17 	ldw	r2,-8(fp)
    14ec:	10800a17 	ldw	r2,40(r2)
    14f0:	e0ffff03 	ldbu	r3,-4(fp)
    14f4:	10c00025 	stbio	r3,0(r2)
}
    14f8:	e037883a 	mov	sp,fp
    14fc:	df000017 	ldw	fp,0(sp)
    1500:	dec00104 	addi	sp,sp,4
    1504:	f800283a 	ret

00001508 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
    1508:	defffe04 	addi	sp,sp,-8
    150c:	df000115 	stw	fp,4(sp)
    1510:	df000104 	addi	fp,sp,4
    1514:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    1518:	e0bfff17 	ldw	r2,-4(fp)
    151c:	10800a17 	ldw	r2,40(r2)
    1520:	1007883a 	mov	r3,r2
    1524:	00800044 	movi	r2,1
    1528:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
    152c:	e037883a 	mov	sp,fp
    1530:	df000017 	ldw	fp,0(sp)
    1534:	dec00104 	addi	sp,sp,4
    1538:	f800283a 	ret

0000153c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    153c:	defffc04 	addi	sp,sp,-16
    1540:	dfc00315 	stw	ra,12(sp)
    1544:	df000215 	stw	fp,8(sp)
    1548:	df000204 	addi	fp,sp,8
    154c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    1550:	e13fff17 	ldw	r4,-4(fp)
    1554:	01400034 	movhi	r5,0
    1558:	2953dc04 	addi	r5,r5,20336
    155c:	00025c80 	call	25c8 <alt_find_dev>
    1560:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1564:	e0bffe17 	ldw	r2,-8(fp)
}
    1568:	e037883a 	mov	sp,fp
    156c:	dfc00117 	ldw	ra,4(sp)
    1570:	df000017 	ldw	fp,0(sp)
    1574:	dec00204 	addi	sp,sp,8
    1578:	f800283a 	ret

0000157c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
    157c:	defffb04 	addi	sp,sp,-20
    1580:	df000415 	stw	fp,16(sp)
    1584:	df000404 	addi	fp,sp,16
    1588:	e13ffd15 	stw	r4,-12(fp)
    158c:	e17ffe15 	stw	r5,-8(fp)
    1590:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
    1594:	e03ffc15 	stw	zero,-16(fp)
    1598:	00000f06 	br	15d8 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    159c:	e0bffd17 	ldw	r2,-12(fp)
    15a0:	10800a17 	ldw	r2,40(r2)
    15a4:	11000044 	addi	r4,r2,1
    15a8:	e0fffc17 	ldw	r3,-16(fp)
    15ac:	e0bffe17 	ldw	r2,-8(fp)
    15b0:	1885883a 	add	r2,r3,r2
    15b4:	10800003 	ldbu	r2,0(r2)
    15b8:	10c03fcc 	andi	r3,r2,255
    15bc:	18c0201c 	xori	r3,r3,128
    15c0:	18ffe004 	addi	r3,r3,-128
    15c4:	2005883a 	mov	r2,r4
    15c8:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    15cc:	e0bffc17 	ldw	r2,-16(fp)
    15d0:	10800044 	addi	r2,r2,1
    15d4:	e0bffc15 	stw	r2,-16(fp)
    15d8:	e0fffc17 	ldw	r3,-16(fp)
    15dc:	e0bfff17 	ldw	r2,-4(fp)
    15e0:	18bfee36 	bltu	r3,r2,159c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
    15e4:	e037883a 	mov	sp,fp
    15e8:	df000017 	ldw	fp,0(sp)
    15ec:	dec00104 	addi	sp,sp,4
    15f0:	f800283a 	ret

000015f4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
    15f4:	defffd04 	addi	sp,sp,-12
    15f8:	df000215 	stw	fp,8(sp)
    15fc:	df000204 	addi	fp,sp,8
    1600:	e13ffe15 	stw	r4,-8(fp)
    1604:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
    1608:	00000d06 	br	1640 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    160c:	e0bffe17 	ldw	r2,-8(fp)
    1610:	10800a17 	ldw	r2,40(r2)
    1614:	11000044 	addi	r4,r2,1
    1618:	e0bfff17 	ldw	r2,-4(fp)
    161c:	10800003 	ldbu	r2,0(r2)
    1620:	10c03fcc 	andi	r3,r2,255
    1624:	18c0201c 	xori	r3,r3,128
    1628:	18ffe004 	addi	r3,r3,-128
    162c:	2005883a 	mov	r2,r4
    1630:	10c00025 	stbio	r3,0(r2)
		++ptr;
    1634:	e0bfff17 	ldw	r2,-4(fp)
    1638:	10800044 	addi	r2,r2,1
    163c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1640:	e0bfff17 	ldw	r2,-4(fp)
    1644:	10800003 	ldbu	r2,0(r2)
    1648:	10803fcc 	andi	r2,r2,255
    164c:	1080201c 	xori	r2,r2,128
    1650:	10bfe004 	addi	r2,r2,-128
    1654:	1004c03a 	cmpne	r2,r2,zero
    1658:	103fec1e 	bne	r2,zero,160c <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
    165c:	e037883a 	mov	sp,fp
    1660:	df000017 	ldw	fp,0(sp)
    1664:	dec00104 	addi	sp,sp,4
    1668:	f800283a 	ret

0000166c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    166c:	defffb04 	addi	sp,sp,-20
    1670:	dfc00415 	stw	ra,16(sp)
    1674:	df000315 	stw	fp,12(sp)
    1678:	df000304 	addi	fp,sp,12
    167c:	e13ffd15 	stw	r4,-12(fp)
    1680:	e17ffe15 	stw	r5,-8(fp)
    1684:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    1688:	e0bffd17 	ldw	r2,-12(fp)
    168c:	10800017 	ldw	r2,0(r2)
    1690:	1009883a 	mov	r4,r2
    1694:	e1bfff17 	ldw	r6,-4(fp)
    1698:	e17ffe17 	ldw	r5,-8(fp)
    169c:	000157c0 	call	157c <alt_up_character_lcd_write>
	return 0;
    16a0:	0005883a 	mov	r2,zero
}
    16a4:	e037883a 	mov	sp,fp
    16a8:	dfc00117 	ldw	ra,4(sp)
    16ac:	df000017 	ldw	fp,0(sp)
    16b0:	dec00204 	addi	sp,sp,8
    16b4:	f800283a 	ret

000016b8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
    16b8:	defff904 	addi	sp,sp,-28
    16bc:	dfc00615 	stw	ra,24(sp)
    16c0:	df000515 	stw	fp,20(sp)
    16c4:	df000504 	addi	fp,sp,20
    16c8:	e13ffc15 	stw	r4,-16(fp)
    16cc:	e17ffd15 	stw	r5,-12(fp)
    16d0:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    16d4:	e0bffd17 	ldw	r2,-12(fp)
    16d8:	10800a28 	cmpgeui	r2,r2,40
    16dc:	1000031e 	bne	r2,zero,16ec <alt_up_character_lcd_set_cursor_pos+0x34>
    16e0:	e0bffe17 	ldw	r2,-8(fp)
    16e4:	108000b0 	cmpltui	r2,r2,2
    16e8:	1000031e 	bne	r2,zero,16f8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
    16ec:	00bfffc4 	movi	r2,-1
    16f0:	e0bfff15 	stw	r2,-4(fp)
    16f4:	00000806 	br	1718 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    16f8:	e13ffd17 	ldw	r4,-12(fp)
    16fc:	e17ffe17 	ldw	r5,-8(fp)
    1700:	00014580 	call	1458 <get_DDRAM_addr>
    1704:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
    1708:	e17ffb03 	ldbu	r5,-20(fp)
    170c:	e13ffc17 	ldw	r4,-16(fp)
    1710:	00014d40 	call	14d4 <alt_up_character_lcd_send_cmd>
	return 0;
    1714:	e03fff15 	stw	zero,-4(fp)
    1718:	e0bfff17 	ldw	r2,-4(fp)
}
    171c:	e037883a 	mov	sp,fp
    1720:	dfc00117 	ldw	ra,4(sp)
    1724:	df000017 	ldw	fp,0(sp)
    1728:	dec00204 	addi	sp,sp,8
    172c:	f800283a 	ret

00001730 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    1730:	defff904 	addi	sp,sp,-28
    1734:	dfc00615 	stw	ra,24(sp)
    1738:	df000515 	stw	fp,20(sp)
    173c:	df000504 	addi	fp,sp,20
    1740:	e13ffc15 	stw	r4,-16(fp)
    1744:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    1748:	e0bffd17 	ldw	r2,-12(fp)
    174c:	1005003a 	cmpeq	r2,r2,zero
    1750:	10001e1e 	bne	r2,zero,17cc <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
    1754:	e0bffd17 	ldw	r2,-12(fp)
    1758:	10800050 	cmplti	r2,r2,1
    175c:	1000031e 	bne	r2,zero,176c <alt_up_character_lcd_shift_cursor+0x3c>
    1760:	00800504 	movi	r2,20
    1764:	e0bfff05 	stb	r2,-4(fp)
    1768:	00000206 	br	1774 <alt_up_character_lcd_shift_cursor+0x44>
    176c:	00c00404 	movi	r3,16
    1770:	e0ffff05 	stb	r3,-4(fp)
    1774:	e0bfff03 	ldbu	r2,-4(fp)
    1778:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    177c:	e0fffd17 	ldw	r3,-12(fp)
    1780:	e0fffe15 	stw	r3,-8(fp)
    1784:	e0fffe17 	ldw	r3,-8(fp)
    1788:	1804403a 	cmpge	r2,r3,zero
    178c:	1000031e 	bne	r2,zero,179c <alt_up_character_lcd_shift_cursor+0x6c>
    1790:	e0bffe17 	ldw	r2,-8(fp)
    1794:	0085c83a 	sub	r2,zero,r2
    1798:	e0bffe15 	stw	r2,-8(fp)
    179c:	e0fffe17 	ldw	r3,-8(fp)
    17a0:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    17a4:	00000306 	br	17b4 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    17a8:	e17ffb43 	ldbu	r5,-19(fp)
    17ac:	e13ffc17 	ldw	r4,-16(fp)
    17b0:	00014d40 	call	14d4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    17b4:	e0bffb03 	ldbu	r2,-20(fp)
    17b8:	10bfffc4 	addi	r2,r2,-1
    17bc:	e0bffb05 	stb	r2,-20(fp)
    17c0:	e0bffb03 	ldbu	r2,-20(fp)
    17c4:	10803fd8 	cmpnei	r2,r2,255
    17c8:	103ff71e 	bne	r2,zero,17a8 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    17cc:	e037883a 	mov	sp,fp
    17d0:	dfc00117 	ldw	ra,4(sp)
    17d4:	df000017 	ldw	fp,0(sp)
    17d8:	dec00204 	addi	sp,sp,8
    17dc:	f800283a 	ret

000017e0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
    17e0:	defff904 	addi	sp,sp,-28
    17e4:	dfc00615 	stw	ra,24(sp)
    17e8:	df000515 	stw	fp,20(sp)
    17ec:	df000504 	addi	fp,sp,20
    17f0:	e13ffc15 	stw	r4,-16(fp)
    17f4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
    17f8:	e0bffd17 	ldw	r2,-12(fp)
    17fc:	1005003a 	cmpeq	r2,r2,zero
    1800:	10001e1e 	bne	r2,zero,187c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
    1804:	e0bffd17 	ldw	r2,-12(fp)
    1808:	10800050 	cmplti	r2,r2,1
    180c:	1000031e 	bne	r2,zero,181c <alt_up_character_lcd_shift_display+0x3c>
    1810:	00800704 	movi	r2,28
    1814:	e0bfff05 	stb	r2,-4(fp)
    1818:	00000206 	br	1824 <alt_up_character_lcd_shift_display+0x44>
    181c:	00c00604 	movi	r3,24
    1820:	e0ffff05 	stb	r3,-4(fp)
    1824:	e0bfff03 	ldbu	r2,-4(fp)
    1828:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
    182c:	e0fffd17 	ldw	r3,-12(fp)
    1830:	e0fffe15 	stw	r3,-8(fp)
    1834:	e0fffe17 	ldw	r3,-8(fp)
    1838:	1804403a 	cmpge	r2,r3,zero
    183c:	1000031e 	bne	r2,zero,184c <alt_up_character_lcd_shift_display+0x6c>
    1840:	e0bffe17 	ldw	r2,-8(fp)
    1844:	0085c83a 	sub	r2,zero,r2
    1848:	e0bffe15 	stw	r2,-8(fp)
    184c:	e0fffe17 	ldw	r3,-8(fp)
    1850:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
    1854:	00000306 	br	1864 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
    1858:	e17ffb43 	ldbu	r5,-19(fp)
    185c:	e13ffc17 	ldw	r4,-16(fp)
    1860:	00014d40 	call	14d4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1864:	e0bffb03 	ldbu	r2,-20(fp)
    1868:	10bfffc4 	addi	r2,r2,-1
    186c:	e0bffb05 	stb	r2,-20(fp)
    1870:	e0bffb03 	ldbu	r2,-20(fp)
    1874:	10803fd8 	cmpnei	r2,r2,255
    1878:	103ff71e 	bne	r2,zero,1858 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
    187c:	e037883a 	mov	sp,fp
    1880:	dfc00117 	ldw	ra,4(sp)
    1884:	df000017 	ldw	fp,0(sp)
    1888:	dec00204 	addi	sp,sp,8
    188c:	f800283a 	ret

00001890 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
    1890:	defff904 	addi	sp,sp,-28
    1894:	dfc00615 	stw	ra,24(sp)
    1898:	df000515 	stw	fp,20(sp)
    189c:	df000504 	addi	fp,sp,20
    18a0:	e13ffc15 	stw	r4,-16(fp)
    18a4:	e17ffd15 	stw	r5,-12(fp)
    18a8:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    18ac:	e0bffd17 	ldw	r2,-12(fp)
    18b0:	10800a28 	cmpgeui	r2,r2,40
    18b4:	1000031e 	bne	r2,zero,18c4 <alt_up_character_lcd_erase_pos+0x34>
    18b8:	e0bffe17 	ldw	r2,-8(fp)
    18bc:	108000b0 	cmpltui	r2,r2,2
    18c0:	1000031e 	bne	r2,zero,18d0 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
    18c4:	00bfffc4 	movi	r2,-1
    18c8:	e0bfff15 	stw	r2,-4(fp)
    18cc:	00000e06 	br	1908 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
    18d0:	e13ffd17 	ldw	r4,-12(fp)
    18d4:	e17ffe17 	ldw	r5,-8(fp)
    18d8:	00014580 	call	1458 <get_DDRAM_addr>
    18dc:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
    18e0:	e17ffb03 	ldbu	r5,-20(fp)
    18e4:	e13ffc17 	ldw	r4,-16(fp)
    18e8:	00014d40 	call	14d4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    18ec:	e0bffc17 	ldw	r2,-16(fp)
    18f0:	10800a17 	ldw	r2,40(r2)
    18f4:	10800044 	addi	r2,r2,1
    18f8:	1007883a 	mov	r3,r2
    18fc:	00800084 	movi	r2,2
    1900:	18800025 	stbio	r2,0(r3)
	return 0;
    1904:	e03fff15 	stw	zero,-4(fp)
    1908:	e0bfff17 	ldw	r2,-4(fp)
}
    190c:	e037883a 	mov	sp,fp
    1910:	dfc00117 	ldw	ra,4(sp)
    1914:	df000017 	ldw	fp,0(sp)
    1918:	dec00204 	addi	sp,sp,8
    191c:	f800283a 	ret

00001920 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
    1920:	defffd04 	addi	sp,sp,-12
    1924:	dfc00215 	stw	ra,8(sp)
    1928:	df000115 	stw	fp,4(sp)
    192c:	df000104 	addi	fp,sp,4
    1930:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
    1934:	e13fff17 	ldw	r4,-4(fp)
    1938:	01400304 	movi	r5,12
    193c:	00014d40 	call	14d4 <alt_up_character_lcd_send_cmd>
}
    1940:	e037883a 	mov	sp,fp
    1944:	dfc00117 	ldw	ra,4(sp)
    1948:	df000017 	ldw	fp,0(sp)
    194c:	dec00204 	addi	sp,sp,8
    1950:	f800283a 	ret

00001954 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
    1954:	defffd04 	addi	sp,sp,-12
    1958:	dfc00215 	stw	ra,8(sp)
    195c:	df000115 	stw	fp,4(sp)
    1960:	df000104 	addi	fp,sp,4
    1964:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
    1968:	e13fff17 	ldw	r4,-4(fp)
    196c:	014003c4 	movi	r5,15
    1970:	00014d40 	call	14d4 <alt_up_character_lcd_send_cmd>
}
    1974:	e037883a 	mov	sp,fp
    1978:	dfc00117 	ldw	ra,4(sp)
    197c:	df000017 	ldw	fp,0(sp)
    1980:	dec00204 	addi	sp,sp,8
    1984:	f800283a 	ret

00001988 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
    1988:	defffd04 	addi	sp,sp,-12
    198c:	df000215 	stw	fp,8(sp)
    1990:	df000204 	addi	fp,sp,8
    1994:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1998:	e0bfff17 	ldw	r2,-4(fp)
    199c:	10800a17 	ldw	r2,40(r2)
    19a0:	10800104 	addi	r2,r2,4
    19a4:	10800037 	ldwio	r2,0(r2)
    19a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    19ac:	e0bffe17 	ldw	r2,-8(fp)
    19b0:	10800054 	ori	r2,r2,1
    19b4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    19b8:	e0bfff17 	ldw	r2,-4(fp)
    19bc:	10800a17 	ldw	r2,40(r2)
    19c0:	10800104 	addi	r2,r2,4
    19c4:	e0fffe17 	ldw	r3,-8(fp)
    19c8:	10c00035 	stwio	r3,0(r2)
}
    19cc:	e037883a 	mov	sp,fp
    19d0:	df000017 	ldw	fp,0(sp)
    19d4:	dec00104 	addi	sp,sp,4
    19d8:	f800283a 	ret

000019dc <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
    19dc:	defffd04 	addi	sp,sp,-12
    19e0:	df000215 	stw	fp,8(sp)
    19e4:	df000204 	addi	fp,sp,8
    19e8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    19ec:	e0bfff17 	ldw	r2,-4(fp)
    19f0:	10800a17 	ldw	r2,40(r2)
    19f4:	10800104 	addi	r2,r2,4
    19f8:	10800037 	ldwio	r2,0(r2)
    19fc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    1a00:	e0fffe17 	ldw	r3,-8(fp)
    1a04:	00bfff84 	movi	r2,-2
    1a08:	1884703a 	and	r2,r3,r2
    1a0c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    1a10:	e0bfff17 	ldw	r2,-4(fp)
    1a14:	10800a17 	ldw	r2,40(r2)
    1a18:	10800104 	addi	r2,r2,4
    1a1c:	e0fffe17 	ldw	r3,-8(fp)
    1a20:	10c00035 	stwio	r3,0(r2)
}
    1a24:	e037883a 	mov	sp,fp
    1a28:	df000017 	ldw	fp,0(sp)
    1a2c:	dec00104 	addi	sp,sp,4
    1a30:	f800283a 	ret

00001a34 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
    1a34:	defffd04 	addi	sp,sp,-12
    1a38:	df000215 	stw	fp,8(sp)
    1a3c:	df000204 	addi	fp,sp,8
    1a40:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    1a44:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    1a48:	e0bfff17 	ldw	r2,-4(fp)
    1a4c:	10800a17 	ldw	r2,40(r2)
    1a50:	10800084 	addi	r2,r2,2
    1a54:	1080002b 	ldhuio	r2,0(r2)
    1a58:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
    1a5c:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1a60:	e037883a 	mov	sp,fp
    1a64:	df000017 	ldw	fp,0(sp)
    1a68:	dec00104 	addi	sp,sp,4
    1a6c:	f800283a 	ret

00001a70 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
    1a70:	defffd04 	addi	sp,sp,-12
    1a74:	df000215 	stw	fp,8(sp)
    1a78:	df000204 	addi	fp,sp,8
    1a7c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    1a80:	e0bfff17 	ldw	r2,-4(fp)
    1a84:	10800a17 	ldw	r2,40(r2)
    1a88:	10800104 	addi	r2,r2,4
    1a8c:	10800037 	ldwio	r2,0(r2)
    1a90:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
    1a94:	e0bffe17 	ldw	r2,-8(fp)
    1a98:	10bfffec 	andhi	r2,r2,65535
    1a9c:	1004d43a 	srli	r2,r2,16
}
    1aa0:	e037883a 	mov	sp,fp
    1aa4:	df000017 	ldw	fp,0(sp)
    1aa8:	dec00104 	addi	sp,sp,4
    1aac:	f800283a 	ret

00001ab0 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
    1ab0:	defffc04 	addi	sp,sp,-16
    1ab4:	df000315 	stw	fp,12(sp)
    1ab8:	df000304 	addi	fp,sp,12
    1abc:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    1ac0:	e0bffe17 	ldw	r2,-8(fp)
    1ac4:	1080800c 	andi	r2,r2,512
    1ac8:	1004d27a 	srli	r2,r2,9
    1acc:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    1ad0:	e0bffd17 	ldw	r2,-12(fp)
    1ad4:	1005003a 	cmpeq	r2,r2,zero
    1ad8:	1000031e 	bne	r2,zero,1ae8 <alt_up_irda_check_parity+0x38>
    1adc:	00bfffc4 	movi	r2,-1
    1ae0:	e0bfff15 	stw	r2,-4(fp)
    1ae4:	00000106 	br	1aec <alt_up_irda_check_parity+0x3c>
    1ae8:	e03fff15 	stw	zero,-4(fp)
    1aec:	e0bfff17 	ldw	r2,-4(fp)
}
    1af0:	e037883a 	mov	sp,fp
    1af4:	df000017 	ldw	fp,0(sp)
    1af8:	dec00104 	addi	sp,sp,4
    1afc:	f800283a 	ret

00001b00 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
    1b00:	defffc04 	addi	sp,sp,-16
    1b04:	df000315 	stw	fp,12(sp)
    1b08:	df000304 	addi	fp,sp,12
    1b0c:	e13ffe15 	stw	r4,-8(fp)
    1b10:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    1b14:	e0bffe17 	ldw	r2,-8(fp)
    1b18:	10800a17 	ldw	r2,40(r2)
    1b1c:	10800037 	ldwio	r2,0(r2)
    1b20:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    1b24:	e0bffe17 	ldw	r2,-8(fp)
    1b28:	10800a17 	ldw	r2,40(r2)
    1b2c:	e0ffff03 	ldbu	r3,-4(fp)
    1b30:	10c00035 	stwio	r3,0(r2)
	return 0;
    1b34:	0005883a 	mov	r2,zero
}
    1b38:	e037883a 	mov	sp,fp
    1b3c:	df000017 	ldw	fp,0(sp)
    1b40:	dec00104 	addi	sp,sp,4
    1b44:	f800283a 	ret

00001b48 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    1b48:	defffa04 	addi	sp,sp,-24
    1b4c:	dfc00515 	stw	ra,20(sp)
    1b50:	df000415 	stw	fp,16(sp)
    1b54:	df000404 	addi	fp,sp,16
    1b58:	e13ffd15 	stw	r4,-12(fp)
    1b5c:	e17ffe15 	stw	r5,-8(fp)
    1b60:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    1b64:	e0bffd17 	ldw	r2,-12(fp)
    1b68:	10800a17 	ldw	r2,40(r2)
    1b6c:	10800037 	ldwio	r2,0(r2)
    1b70:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    1b74:	e0bffc17 	ldw	r2,-16(fp)
    1b78:	1007883a 	mov	r3,r2
    1b7c:	e0bffe17 	ldw	r2,-8(fp)
    1b80:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
    1b84:	e13ffc17 	ldw	r4,-16(fp)
    1b88:	0001ab00 	call	1ab0 <alt_up_irda_check_parity>
    1b8c:	1007883a 	mov	r3,r2
    1b90:	e0bfff17 	ldw	r2,-4(fp)
    1b94:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    1b98:	e0bffc17 	ldw	r2,-16(fp)
    1b9c:	10a0000c 	andi	r2,r2,32768
    1ba0:	1004d3fa 	srli	r2,r2,15
    1ba4:	10bfffc4 	addi	r2,r2,-1
}
    1ba8:	e037883a 	mov	sp,fp
    1bac:	dfc00117 	ldw	ra,4(sp)
    1bb0:	df000017 	ldw	fp,0(sp)
    1bb4:	dec00204 	addi	sp,sp,8
    1bb8:	f800283a 	ret

00001bbc <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    1bbc:	defff804 	addi	sp,sp,-32
    1bc0:	dfc00715 	stw	ra,28(sp)
    1bc4:	df000615 	stw	fp,24(sp)
    1bc8:	df000604 	addi	fp,sp,24
    1bcc:	e13ffd15 	stw	r4,-12(fp)
    1bd0:	e17ffe15 	stw	r5,-8(fp)
    1bd4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    1bd8:	e0bffd17 	ldw	r2,-12(fp)
    1bdc:	10800017 	ldw	r2,0(r2)
    1be0:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    1be4:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    1be8:	00000c06 	br	1c1c <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
    1bec:	e17ffe17 	ldw	r5,-8(fp)
    1bf0:	e0bffe17 	ldw	r2,-8(fp)
    1bf4:	10800044 	addi	r2,r2,1
    1bf8:	e0bffe15 	stw	r2,-8(fp)
    1bfc:	e1bffc04 	addi	r6,fp,-16
    1c00:	e13ffb17 	ldw	r4,-20(fp)
    1c04:	0001b480 	call	1b48 <alt_up_irda_read_data>
    1c08:	1004c03a 	cmpne	r2,r2,zero
    1c0c:	1000091e 	bne	r2,zero,1c34 <alt_up_irda_read_fd+0x78>
			count++;
    1c10:	e0bffa17 	ldw	r2,-24(fp)
    1c14:	10800044 	addi	r2,r2,1
    1c18:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1c1c:	e0bfff17 	ldw	r2,-4(fp)
    1c20:	10bfffc4 	addi	r2,r2,-1
    1c24:	e0bfff15 	stw	r2,-4(fp)
    1c28:	e0bfff17 	ldw	r2,-4(fp)
    1c2c:	10bfffd8 	cmpnei	r2,r2,-1
    1c30:	103fee1e 	bne	r2,zero,1bec <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    1c34:	e0bffa17 	ldw	r2,-24(fp)
}
    1c38:	e037883a 	mov	sp,fp
    1c3c:	dfc00117 	ldw	ra,4(sp)
    1c40:	df000017 	ldw	fp,0(sp)
    1c44:	dec00204 	addi	sp,sp,8
    1c48:	f800283a 	ret

00001c4c <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1c4c:	defff904 	addi	sp,sp,-28
    1c50:	dfc00615 	stw	ra,24(sp)
    1c54:	df000515 	stw	fp,20(sp)
    1c58:	df000504 	addi	fp,sp,20
    1c5c:	e13ffd15 	stw	r4,-12(fp)
    1c60:	e17ffe15 	stw	r5,-8(fp)
    1c64:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    1c68:	e0bffd17 	ldw	r2,-12(fp)
    1c6c:	10800017 	ldw	r2,0(r2)
    1c70:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    1c74:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    1c78:	00000c06 	br	1cac <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
    1c7c:	e0bffe17 	ldw	r2,-8(fp)
    1c80:	11403fcc 	andi	r5,r2,255
    1c84:	e0bffe17 	ldw	r2,-8(fp)
    1c88:	10800044 	addi	r2,r2,1
    1c8c:	e0bffe15 	stw	r2,-8(fp)
    1c90:	e13ffc17 	ldw	r4,-16(fp)
    1c94:	0001b000 	call	1b00 <alt_up_irda_write_data>
    1c98:	1004c03a 	cmpne	r2,r2,zero
    1c9c:	1000091e 	bne	r2,zero,1cc4 <alt_up_irda_write_fd+0x78>
			count++;
    1ca0:	e0bffb17 	ldw	r2,-20(fp)
    1ca4:	10800044 	addi	r2,r2,1
    1ca8:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    1cac:	e0bfff17 	ldw	r2,-4(fp)
    1cb0:	10bfffc4 	addi	r2,r2,-1
    1cb4:	e0bfff15 	stw	r2,-4(fp)
    1cb8:	e0bfff17 	ldw	r2,-4(fp)
    1cbc:	10bfffd8 	cmpnei	r2,r2,-1
    1cc0:	103fee1e 	bne	r2,zero,1c7c <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
    1cc4:	e0bffb17 	ldw	r2,-20(fp)
}
    1cc8:	e037883a 	mov	sp,fp
    1ccc:	dfc00117 	ldw	ra,4(sp)
    1cd0:	df000017 	ldw	fp,0(sp)
    1cd4:	dec00204 	addi	sp,sp,8
    1cd8:	f800283a 	ret

00001cdc <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    1cdc:	defffc04 	addi	sp,sp,-16
    1ce0:	dfc00315 	stw	ra,12(sp)
    1ce4:	df000215 	stw	fp,8(sp)
    1ce8:	df000204 	addi	fp,sp,8
    1cec:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    1cf0:	e13fff17 	ldw	r4,-4(fp)
    1cf4:	01400034 	movhi	r5,0
    1cf8:	2953dc04 	addi	r5,r5,20336
    1cfc:	00025c80 	call	25c8 <alt_find_dev>
    1d00:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1d04:	e0bffe17 	ldw	r2,-8(fp)
}
    1d08:	e037883a 	mov	sp,fp
    1d0c:	dfc00117 	ldw	ra,4(sp)
    1d10:	df000017 	ldw	fp,0(sp)
    1d14:	dec00204 	addi	sp,sp,8
    1d18:	f800283a 	ret

00001d1c <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
    1d1c:	defffc04 	addi	sp,sp,-16
    1d20:	dfc00315 	stw	ra,12(sp)
    1d24:	df000215 	stw	fp,8(sp)
    1d28:	df000204 	addi	fp,sp,8
    1d2c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
    1d30:	e13fff17 	ldw	r4,-4(fp)
    1d34:	01400034 	movhi	r5,0
    1d38:	2953dc04 	addi	r5,r5,20336
    1d3c:	00025c80 	call	25c8 <alt_find_dev>
    1d40:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    1d44:	e0bffe17 	ldw	r2,-8(fp)
}
    1d48:	e037883a 	mov	sp,fp
    1d4c:	dfc00117 	ldw	ra,4(sp)
    1d50:	df000017 	ldw	fp,0(sp)
    1d54:	dec00204 	addi	sp,sp,8
    1d58:	f800283a 	ret

00001d5c <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
    1d5c:	defffd04 	addi	sp,sp,-12
    1d60:	df000215 	stw	fp,8(sp)
    1d64:	df000204 	addi	fp,sp,8
    1d68:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1d6c:	e0bfff17 	ldw	r2,-4(fp)
    1d70:	10800a17 	ldw	r2,40(r2)
    1d74:	10800104 	addi	r2,r2,4
    1d78:	10800037 	ldwio	r2,0(r2)
    1d7c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    1d80:	e0bffe17 	ldw	r2,-8(fp)
    1d84:	10800054 	ori	r2,r2,1
    1d88:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1d8c:	e0bfff17 	ldw	r2,-4(fp)
    1d90:	10800a17 	ldw	r2,40(r2)
    1d94:	10800104 	addi	r2,r2,4
    1d98:	e0fffe17 	ldw	r3,-8(fp)
    1d9c:	10c00035 	stwio	r3,0(r2)
}
    1da0:	e037883a 	mov	sp,fp
    1da4:	df000017 	ldw	fp,0(sp)
    1da8:	dec00104 	addi	sp,sp,4
    1dac:	f800283a 	ret

00001db0 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
    1db0:	defffd04 	addi	sp,sp,-12
    1db4:	df000215 	stw	fp,8(sp)
    1db8:	df000204 	addi	fp,sp,8
    1dbc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1dc0:	e0bfff17 	ldw	r2,-4(fp)
    1dc4:	10800a17 	ldw	r2,40(r2)
    1dc8:	10800104 	addi	r2,r2,4
    1dcc:	10800037 	ldwio	r2,0(r2)
    1dd0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    1dd4:	e0fffe17 	ldw	r3,-8(fp)
    1dd8:	00bfff84 	movi	r2,-2
    1ddc:	1884703a 	and	r2,r3,r2
    1de0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1de4:	e0bfff17 	ldw	r2,-4(fp)
    1de8:	10800a17 	ldw	r2,40(r2)
    1dec:	10800104 	addi	r2,r2,4
    1df0:	e0fffe17 	ldw	r3,-8(fp)
    1df4:	10c00035 	stwio	r3,0(r2)
}
    1df8:	e037883a 	mov	sp,fp
    1dfc:	df000017 	ldw	fp,0(sp)
    1e00:	dec00104 	addi	sp,sp,4
    1e04:	f800283a 	ret

00001e08 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
    1e08:	defffd04 	addi	sp,sp,-12
    1e0c:	df000215 	stw	fp,8(sp)
    1e10:	df000204 	addi	fp,sp,8
    1e14:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
    1e18:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1e1c:	e0bfff17 	ldw	r2,-4(fp)
    1e20:	10800a17 	ldw	r2,40(r2)
    1e24:	10800084 	addi	r2,r2,2
    1e28:	1080002b 	ldhuio	r2,0(r2)
    1e2c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
    1e30:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1e34:	e037883a 	mov	sp,fp
    1e38:	df000017 	ldw	fp,0(sp)
    1e3c:	dec00104 	addi	sp,sp,4
    1e40:	f800283a 	ret

00001e44 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
    1e44:	defffd04 	addi	sp,sp,-12
    1e48:	df000215 	stw	fp,8(sp)
    1e4c:	df000204 	addi	fp,sp,8
    1e50:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1e54:	e0bfff17 	ldw	r2,-4(fp)
    1e58:	10800a17 	ldw	r2,40(r2)
    1e5c:	10800104 	addi	r2,r2,4
    1e60:	10800037 	ldwio	r2,0(r2)
    1e64:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
    1e68:	e0bffe17 	ldw	r2,-8(fp)
    1e6c:	10bfffec 	andhi	r2,r2,65535
    1e70:	1004d43a 	srli	r2,r2,16
}
    1e74:	e037883a 	mov	sp,fp
    1e78:	df000017 	ldw	fp,0(sp)
    1e7c:	dec00104 	addi	sp,sp,4
    1e80:	f800283a 	ret

00001e84 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
    1e84:	defffc04 	addi	sp,sp,-16
    1e88:	df000315 	stw	fp,12(sp)
    1e8c:	df000304 	addi	fp,sp,12
    1e90:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    1e94:	e0bffe17 	ldw	r2,-8(fp)
    1e98:	1080800c 	andi	r2,r2,512
    1e9c:	1004d27a 	srli	r2,r2,9
    1ea0:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
    1ea4:	e0bffd17 	ldw	r2,-12(fp)
    1ea8:	1005003a 	cmpeq	r2,r2,zero
    1eac:	1000031e 	bne	r2,zero,1ebc <alt_up_rs232_check_parity+0x38>
    1eb0:	00bfffc4 	movi	r2,-1
    1eb4:	e0bfff15 	stw	r2,-4(fp)
    1eb8:	00000106 	br	1ec0 <alt_up_rs232_check_parity+0x3c>
    1ebc:	e03fff15 	stw	zero,-4(fp)
    1ec0:	e0bfff17 	ldw	r2,-4(fp)
}
    1ec4:	e037883a 	mov	sp,fp
    1ec8:	df000017 	ldw	fp,0(sp)
    1ecc:	dec00104 	addi	sp,sp,4
    1ed0:	f800283a 	ret

00001ed4 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
    1ed4:	defffc04 	addi	sp,sp,-16
    1ed8:	df000315 	stw	fp,12(sp)
    1edc:	df000304 	addi	fp,sp,12
    1ee0:	e13ffe15 	stw	r4,-8(fp)
    1ee4:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1ee8:	e0bffe17 	ldw	r2,-8(fp)
    1eec:	10800a17 	ldw	r2,40(r2)
    1ef0:	10800037 	ldwio	r2,0(r2)
    1ef4:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1ef8:	e0bffe17 	ldw	r2,-8(fp)
    1efc:	10800a17 	ldw	r2,40(r2)
    1f00:	e0ffff03 	ldbu	r3,-4(fp)
    1f04:	10c00035 	stwio	r3,0(r2)
	return 0;
    1f08:	0005883a 	mov	r2,zero
}
    1f0c:	e037883a 	mov	sp,fp
    1f10:	df000017 	ldw	fp,0(sp)
    1f14:	dec00104 	addi	sp,sp,4
    1f18:	f800283a 	ret

00001f1c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1f1c:	defffa04 	addi	sp,sp,-24
    1f20:	dfc00515 	stw	ra,20(sp)
    1f24:	df000415 	stw	fp,16(sp)
    1f28:	df000404 	addi	fp,sp,16
    1f2c:	e13ffd15 	stw	r4,-12(fp)
    1f30:	e17ffe15 	stw	r5,-8(fp)
    1f34:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1f38:	e0bffd17 	ldw	r2,-12(fp)
    1f3c:	10800a17 	ldw	r2,40(r2)
    1f40:	10800037 	ldwio	r2,0(r2)
    1f44:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1f48:	e0bffc17 	ldw	r2,-16(fp)
    1f4c:	1007883a 	mov	r3,r2
    1f50:	e0bffe17 	ldw	r2,-8(fp)
    1f54:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1f58:	e13ffc17 	ldw	r4,-16(fp)
    1f5c:	0001e840 	call	1e84 <alt_up_rs232_check_parity>
    1f60:	1007883a 	mov	r3,r2
    1f64:	e0bfff17 	ldw	r2,-4(fp)
    1f68:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    1f6c:	e0bffc17 	ldw	r2,-16(fp)
    1f70:	10a0000c 	andi	r2,r2,32768
    1f74:	1004d3fa 	srli	r2,r2,15
    1f78:	10bfffc4 	addi	r2,r2,-1
}
    1f7c:	e037883a 	mov	sp,fp
    1f80:	dfc00117 	ldw	ra,4(sp)
    1f84:	df000017 	ldw	fp,0(sp)
    1f88:	dec00204 	addi	sp,sp,8
    1f8c:	f800283a 	ret

00001f90 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1f90:	defff804 	addi	sp,sp,-32
    1f94:	dfc00715 	stw	ra,28(sp)
    1f98:	df000615 	stw	fp,24(sp)
    1f9c:	df000604 	addi	fp,sp,24
    1fa0:	e13ffd15 	stw	r4,-12(fp)
    1fa4:	e17ffe15 	stw	r5,-8(fp)
    1fa8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1fac:	e0bffd17 	ldw	r2,-12(fp)
    1fb0:	10800017 	ldw	r2,0(r2)
    1fb4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
    1fb8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
    1fbc:	00000c06 	br	1ff0 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
    1fc0:	e17ffe17 	ldw	r5,-8(fp)
    1fc4:	e0bffe17 	ldw	r2,-8(fp)
    1fc8:	10800044 	addi	r2,r2,1
    1fcc:	e0bffe15 	stw	r2,-8(fp)
    1fd0:	e1bffc04 	addi	r6,fp,-16
    1fd4:	e13ffb17 	ldw	r4,-20(fp)
    1fd8:	0001f1c0 	call	1f1c <alt_up_rs232_read_data>
    1fdc:	1004c03a 	cmpne	r2,r2,zero
    1fe0:	1000091e 	bne	r2,zero,2008 <alt_up_rs232_read_fd+0x78>
			count++;
    1fe4:	e0bffa17 	ldw	r2,-24(fp)
    1fe8:	10800044 	addi	r2,r2,1
    1fec:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1ff0:	e0bfff17 	ldw	r2,-4(fp)
    1ff4:	10bfffc4 	addi	r2,r2,-1
    1ff8:	e0bfff15 	stw	r2,-4(fp)
    1ffc:	e0bfff17 	ldw	r2,-4(fp)
    2000:	10bfffd8 	cmpnei	r2,r2,-1
    2004:	103fee1e 	bne	r2,zero,1fc0 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
    2008:	e0bffa17 	ldw	r2,-24(fp)
}
    200c:	e037883a 	mov	sp,fp
    2010:	dfc00117 	ldw	ra,4(sp)
    2014:	df000017 	ldw	fp,0(sp)
    2018:	dec00204 	addi	sp,sp,8
    201c:	f800283a 	ret

00002020 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    2020:	defff904 	addi	sp,sp,-28
    2024:	dfc00615 	stw	ra,24(sp)
    2028:	df000515 	stw	fp,20(sp)
    202c:	df000504 	addi	fp,sp,20
    2030:	e13ffd15 	stw	r4,-12(fp)
    2034:	e17ffe15 	stw	r5,-8(fp)
    2038:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    203c:	e0bffd17 	ldw	r2,-12(fp)
    2040:	10800017 	ldw	r2,0(r2)
    2044:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
    2048:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
    204c:	00000d06 	br	2084 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
    2050:	e0bffe17 	ldw	r2,-8(fp)
    2054:	10800003 	ldbu	r2,0(r2)
    2058:	11403fcc 	andi	r5,r2,255
    205c:	e13ffc17 	ldw	r4,-16(fp)
    2060:	0001ed40 	call	1ed4 <alt_up_rs232_write_data>
    2064:	1004c03a 	cmpne	r2,r2,zero
    2068:	10000c1e 	bne	r2,zero,209c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
    206c:	e0bffb17 	ldw	r2,-20(fp)
    2070:	10800044 	addi	r2,r2,1
    2074:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
    2078:	e0bffe17 	ldw	r2,-8(fp)
    207c:	10800044 	addi	r2,r2,1
    2080:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    2084:	e0bfff17 	ldw	r2,-4(fp)
    2088:	10bfffc4 	addi	r2,r2,-1
    208c:	e0bfff15 	stw	r2,-4(fp)
    2090:	e0bfff17 	ldw	r2,-4(fp)
    2094:	10bfffd8 	cmpnei	r2,r2,-1
    2098:	103fed1e 	bne	r2,zero,2050 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
    209c:	e0bffb17 	ldw	r2,-20(fp)
}
    20a0:	e037883a 	mov	sp,fp
    20a4:	dfc00117 	ldw	ra,4(sp)
    20a8:	df000017 	ldw	fp,0(sp)
    20ac:	dec00204 	addi	sp,sp,8
    20b0:	f800283a 	ret

000020b4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    20b4:	defffc04 	addi	sp,sp,-16
    20b8:	dfc00315 	stw	ra,12(sp)
    20bc:	df000215 	stw	fp,8(sp)
    20c0:	df000204 	addi	fp,sp,8
    20c4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    20c8:	e13fff17 	ldw	r4,-4(fp)
    20cc:	01400034 	movhi	r5,0
    20d0:	2953dc04 	addi	r5,r5,20336
    20d4:	00025c80 	call	25c8 <alt_find_dev>
    20d8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
    20dc:	e0bffe17 	ldw	r2,-8(fp)
}
    20e0:	e037883a 	mov	sp,fp
    20e4:	dfc00117 	ldw	ra,4(sp)
    20e8:	df000017 	ldw	fp,0(sp)
    20ec:	dec00204 	addi	sp,sp,8
    20f0:	f800283a 	ret

000020f4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    20f4:	defff404 	addi	sp,sp,-48
    20f8:	df000b15 	stw	fp,44(sp)
    20fc:	df000b04 	addi	fp,sp,44
    2100:	e13ffb15 	stw	r4,-20(fp)
    2104:	e17ffc15 	stw	r5,-16(fp)
    2108:	e1bffd15 	stw	r6,-12(fp)
    210c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    2110:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    2114:	00800034 	movhi	r2,0
    2118:	109a0204 	addi	r2,r2,26632
    211c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    2120:	1005003a 	cmpeq	r2,r2,zero
    2124:	1000411e 	bne	r2,zero,222c <alt_alarm_start+0x138>
  {
    if (alarm)
    2128:	e0bffb17 	ldw	r2,-20(fp)
    212c:	1005003a 	cmpeq	r2,r2,zero
    2130:	10003b1e 	bne	r2,zero,2220 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    2134:	e0fffb17 	ldw	r3,-20(fp)
    2138:	e0bffd17 	ldw	r2,-12(fp)
    213c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    2140:	e0fffb17 	ldw	r3,-20(fp)
    2144:	e0bffe17 	ldw	r2,-8(fp)
    2148:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    214c:	0005303a 	rdctl	r2,status
    2150:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2154:	e0fff817 	ldw	r3,-32(fp)
    2158:	00bfff84 	movi	r2,-2
    215c:	1884703a 	and	r2,r3,r2
    2160:	1001703a 	wrctl	status,r2
  
  return context;
    2164:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    2168:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    216c:	00800034 	movhi	r2,0
    2170:	109a0304 	addi	r2,r2,26636
    2174:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    2178:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    217c:	e0fffc17 	ldw	r3,-16(fp)
    2180:	e0bff917 	ldw	r2,-28(fp)
    2184:	1885883a 	add	r2,r3,r2
    2188:	10c00044 	addi	r3,r2,1
    218c:	e0bffb17 	ldw	r2,-20(fp)
    2190:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2194:	e0bffb17 	ldw	r2,-20(fp)
    2198:	10c00217 	ldw	r3,8(r2)
    219c:	e0bff917 	ldw	r2,-28(fp)
    21a0:	1880042e 	bgeu	r3,r2,21b4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    21a4:	e0fffb17 	ldw	r3,-20(fp)
    21a8:	00800044 	movi	r2,1
    21ac:	18800405 	stb	r2,16(r3)
    21b0:	00000206 	br	21bc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    21b4:	e0bffb17 	ldw	r2,-20(fp)
    21b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    21bc:	e0fffb17 	ldw	r3,-20(fp)
    21c0:	00800034 	movhi	r2,0
    21c4:	1093e104 	addi	r2,r2,20356
    21c8:	e0bff615 	stw	r2,-40(fp)
    21cc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    21d0:	e0fff717 	ldw	r3,-36(fp)
    21d4:	e0bff617 	ldw	r2,-40(fp)
    21d8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    21dc:	e0bff617 	ldw	r2,-40(fp)
    21e0:	10c00017 	ldw	r3,0(r2)
    21e4:	e0bff717 	ldw	r2,-36(fp)
    21e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    21ec:	e0bff617 	ldw	r2,-40(fp)
    21f0:	10c00017 	ldw	r3,0(r2)
    21f4:	e0bff717 	ldw	r2,-36(fp)
    21f8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    21fc:	e0fff617 	ldw	r3,-40(fp)
    2200:	e0bff717 	ldw	r2,-36(fp)
    2204:	18800015 	stw	r2,0(r3)
    2208:	e0bffa17 	ldw	r2,-24(fp)
    220c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2210:	e0bff517 	ldw	r2,-44(fp)
    2214:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    2218:	e03fff15 	stw	zero,-4(fp)
    221c:	00000506 	br	2234 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    2220:	00bffa84 	movi	r2,-22
    2224:	e0bfff15 	stw	r2,-4(fp)
    2228:	00000206 	br	2234 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    222c:	00bfde84 	movi	r2,-134
    2230:	e0bfff15 	stw	r2,-4(fp)
    2234:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    2238:	e037883a 	mov	sp,fp
    223c:	df000017 	ldw	fp,0(sp)
    2240:	dec00104 	addi	sp,sp,4
    2244:	f800283a 	ret

00002248 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2248:	defff804 	addi	sp,sp,-32
    224c:	dfc00715 	stw	ra,28(sp)
    2250:	df000615 	stw	fp,24(sp)
    2254:	df000604 	addi	fp,sp,24
    2258:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    225c:	e0bffc17 	ldw	r2,-16(fp)
    2260:	1004803a 	cmplt	r2,r2,zero
    2264:	1000081e 	bne	r2,zero,2288 <close+0x40>
    2268:	e0bffc17 	ldw	r2,-16(fp)
    226c:	10800324 	muli	r2,r2,12
    2270:	1007883a 	mov	r3,r2
    2274:	00800034 	movhi	r2,0
    2278:	10927904 	addi	r2,r2,18916
    227c:	1887883a 	add	r3,r3,r2
    2280:	e0ffff15 	stw	r3,-4(fp)
    2284:	00000106 	br	228c <close+0x44>
    2288:	e03fff15 	stw	zero,-4(fp)
    228c:	e0bfff17 	ldw	r2,-4(fp)
    2290:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    2294:	e0bffb17 	ldw	r2,-20(fp)
    2298:	1005003a 	cmpeq	r2,r2,zero
    229c:	10001d1e 	bne	r2,zero,2314 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    22a0:	e0bffb17 	ldw	r2,-20(fp)
    22a4:	10800017 	ldw	r2,0(r2)
    22a8:	10800417 	ldw	r2,16(r2)
    22ac:	1005003a 	cmpeq	r2,r2,zero
    22b0:	1000071e 	bne	r2,zero,22d0 <close+0x88>
    22b4:	e0bffb17 	ldw	r2,-20(fp)
    22b8:	10800017 	ldw	r2,0(r2)
    22bc:	10800417 	ldw	r2,16(r2)
    22c0:	e13ffb17 	ldw	r4,-20(fp)
    22c4:	103ee83a 	callr	r2
    22c8:	e0bffe15 	stw	r2,-8(fp)
    22cc:	00000106 	br	22d4 <close+0x8c>
    22d0:	e03ffe15 	stw	zero,-8(fp)
    22d4:	e0bffe17 	ldw	r2,-8(fp)
    22d8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    22dc:	e13ffc17 	ldw	r4,-16(fp)
    22e0:	0002c4c0 	call	2c4c <alt_release_fd>
    if (rval < 0)
    22e4:	e0bffa17 	ldw	r2,-24(fp)
    22e8:	1004403a 	cmpge	r2,r2,zero
    22ec:	1000071e 	bne	r2,zero,230c <close+0xc4>
    {
      ALT_ERRNO = -rval;
    22f0:	00023440 	call	2344 <alt_get_errno>
    22f4:	e0fffa17 	ldw	r3,-24(fp)
    22f8:	00c7c83a 	sub	r3,zero,r3
    22fc:	10c00015 	stw	r3,0(r2)
      return -1;
    2300:	00bfffc4 	movi	r2,-1
    2304:	e0bffd15 	stw	r2,-12(fp)
    2308:	00000806 	br	232c <close+0xe4>
    }
    return 0;
    230c:	e03ffd15 	stw	zero,-12(fp)
    2310:	00000606 	br	232c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2314:	00023440 	call	2344 <alt_get_errno>
    2318:	1007883a 	mov	r3,r2
    231c:	00801444 	movi	r2,81
    2320:	18800015 	stw	r2,0(r3)
    return -1;
    2324:	00bfffc4 	movi	r2,-1
    2328:	e0bffd15 	stw	r2,-12(fp)
    232c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    2330:	e037883a 	mov	sp,fp
    2334:	dfc00117 	ldw	ra,4(sp)
    2338:	df000017 	ldw	fp,0(sp)
    233c:	dec00204 	addi	sp,sp,8
    2340:	f800283a 	ret

00002344 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2344:	defffd04 	addi	sp,sp,-12
    2348:	dfc00215 	stw	ra,8(sp)
    234c:	df000115 	stw	fp,4(sp)
    2350:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2354:	00800034 	movhi	r2,0
    2358:	1093df04 	addi	r2,r2,20348
    235c:	10800017 	ldw	r2,0(r2)
    2360:	1005003a 	cmpeq	r2,r2,zero
    2364:	1000061e 	bne	r2,zero,2380 <alt_get_errno+0x3c>
    2368:	00800034 	movhi	r2,0
    236c:	1093df04 	addi	r2,r2,20348
    2370:	10800017 	ldw	r2,0(r2)
    2374:	103ee83a 	callr	r2
    2378:	e0bfff15 	stw	r2,-4(fp)
    237c:	00000306 	br	238c <alt_get_errno+0x48>
    2380:	00800034 	movhi	r2,0
    2384:	109a0404 	addi	r2,r2,26640
    2388:	e0bfff15 	stw	r2,-4(fp)
    238c:	e0bfff17 	ldw	r2,-4(fp)
}
    2390:	e037883a 	mov	sp,fp
    2394:	dfc00117 	ldw	ra,4(sp)
    2398:	df000017 	ldw	fp,0(sp)
    239c:	dec00204 	addi	sp,sp,8
    23a0:	f800283a 	ret

000023a4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    23a4:	deffff04 	addi	sp,sp,-4
    23a8:	df000015 	stw	fp,0(sp)
    23ac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    23b0:	e037883a 	mov	sp,fp
    23b4:	df000017 	ldw	fp,0(sp)
    23b8:	dec00104 	addi	sp,sp,4
    23bc:	f800283a 	ret

000023c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    23c0:	defffc04 	addi	sp,sp,-16
    23c4:	df000315 	stw	fp,12(sp)
    23c8:	df000304 	addi	fp,sp,12
    23cc:	e13ffd15 	stw	r4,-12(fp)
    23d0:	e17ffe15 	stw	r5,-8(fp)
    23d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    23d8:	e0bfff17 	ldw	r2,-4(fp)
}
    23dc:	e037883a 	mov	sp,fp
    23e0:	df000017 	ldw	fp,0(sp)
    23e4:	dec00104 	addi	sp,sp,4
    23e8:	f800283a 	ret

000023ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    23ec:	defff904 	addi	sp,sp,-28
    23f0:	dfc00615 	stw	ra,24(sp)
    23f4:	df000515 	stw	fp,20(sp)
    23f8:	df000504 	addi	fp,sp,20
    23fc:	e13ffd15 	stw	r4,-12(fp)
    2400:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2404:	e0bffd17 	ldw	r2,-12(fp)
    2408:	1005003a 	cmpeq	r2,r2,zero
    240c:	1000041e 	bne	r2,zero,2420 <alt_dev_llist_insert+0x34>
    2410:	e0bffd17 	ldw	r2,-12(fp)
    2414:	10800217 	ldw	r2,8(r2)
    2418:	1004c03a 	cmpne	r2,r2,zero
    241c:	1000071e 	bne	r2,zero,243c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    2420:	00024a00 	call	24a0 <alt_get_errno>
    2424:	1007883a 	mov	r3,r2
    2428:	00800584 	movi	r2,22
    242c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    2430:	00bffa84 	movi	r2,-22
    2434:	e0bfff15 	stw	r2,-4(fp)
    2438:	00001306 	br	2488 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    243c:	e0fffd17 	ldw	r3,-12(fp)
    2440:	e0bffe17 	ldw	r2,-8(fp)
    2444:	e0bffb15 	stw	r2,-20(fp)
    2448:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    244c:	e0fffc17 	ldw	r3,-16(fp)
    2450:	e0bffb17 	ldw	r2,-20(fp)
    2454:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    2458:	e0bffb17 	ldw	r2,-20(fp)
    245c:	10c00017 	ldw	r3,0(r2)
    2460:	e0bffc17 	ldw	r2,-16(fp)
    2464:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2468:	e0bffb17 	ldw	r2,-20(fp)
    246c:	10c00017 	ldw	r3,0(r2)
    2470:	e0bffc17 	ldw	r2,-16(fp)
    2474:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    2478:	e0fffb17 	ldw	r3,-20(fp)
    247c:	e0bffc17 	ldw	r2,-16(fp)
    2480:	18800015 	stw	r2,0(r3)

  return 0;  
    2484:	e03fff15 	stw	zero,-4(fp)
    2488:	e0bfff17 	ldw	r2,-4(fp)
}
    248c:	e037883a 	mov	sp,fp
    2490:	dfc00117 	ldw	ra,4(sp)
    2494:	df000017 	ldw	fp,0(sp)
    2498:	dec00204 	addi	sp,sp,8
    249c:	f800283a 	ret

000024a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    24a0:	defffd04 	addi	sp,sp,-12
    24a4:	dfc00215 	stw	ra,8(sp)
    24a8:	df000115 	stw	fp,4(sp)
    24ac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    24b0:	00800034 	movhi	r2,0
    24b4:	1093df04 	addi	r2,r2,20348
    24b8:	10800017 	ldw	r2,0(r2)
    24bc:	1005003a 	cmpeq	r2,r2,zero
    24c0:	1000061e 	bne	r2,zero,24dc <alt_get_errno+0x3c>
    24c4:	00800034 	movhi	r2,0
    24c8:	1093df04 	addi	r2,r2,20348
    24cc:	10800017 	ldw	r2,0(r2)
    24d0:	103ee83a 	callr	r2
    24d4:	e0bfff15 	stw	r2,-4(fp)
    24d8:	00000306 	br	24e8 <alt_get_errno+0x48>
    24dc:	00800034 	movhi	r2,0
    24e0:	109a0404 	addi	r2,r2,26640
    24e4:	e0bfff15 	stw	r2,-4(fp)
    24e8:	e0bfff17 	ldw	r2,-4(fp)
}
    24ec:	e037883a 	mov	sp,fp
    24f0:	dfc00117 	ldw	ra,4(sp)
    24f4:	df000017 	ldw	fp,0(sp)
    24f8:	dec00204 	addi	sp,sp,8
    24fc:	f800283a 	ret

00002500 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2500:	defffd04 	addi	sp,sp,-12
    2504:	dfc00215 	stw	ra,8(sp)
    2508:	df000115 	stw	fp,4(sp)
    250c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2510:	00bfff04 	movi	r2,-4
    2514:	00c00034 	movhi	r3,0
    2518:	18cd7e04 	addi	r3,r3,13816
    251c:	1885883a 	add	r2,r3,r2
    2520:	e0bfff15 	stw	r2,-4(fp)
    2524:	00000606 	br	2540 <_do_ctors+0x40>
        (*ctor) (); 
    2528:	e0bfff17 	ldw	r2,-4(fp)
    252c:	10800017 	ldw	r2,0(r2)
    2530:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2534:	e0bfff17 	ldw	r2,-4(fp)
    2538:	10bfff04 	addi	r2,r2,-4
    253c:	e0bfff15 	stw	r2,-4(fp)
    2540:	e0ffff17 	ldw	r3,-4(fp)
    2544:	00800034 	movhi	r2,0
    2548:	108d7d04 	addi	r2,r2,13812
    254c:	18bff62e 	bgeu	r3,r2,2528 <_do_ctors+0x28>
        (*ctor) (); 
}
    2550:	e037883a 	mov	sp,fp
    2554:	dfc00117 	ldw	ra,4(sp)
    2558:	df000017 	ldw	fp,0(sp)
    255c:	dec00204 	addi	sp,sp,8
    2560:	f800283a 	ret

00002564 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2564:	defffd04 	addi	sp,sp,-12
    2568:	dfc00215 	stw	ra,8(sp)
    256c:	df000115 	stw	fp,4(sp)
    2570:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2574:	00bfff04 	movi	r2,-4
    2578:	00c00034 	movhi	r3,0
    257c:	18cd7e04 	addi	r3,r3,13816
    2580:	1885883a 	add	r2,r3,r2
    2584:	e0bfff15 	stw	r2,-4(fp)
    2588:	00000606 	br	25a4 <_do_dtors+0x40>
        (*dtor) (); 
    258c:	e0bfff17 	ldw	r2,-4(fp)
    2590:	10800017 	ldw	r2,0(r2)
    2594:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2598:	e0bfff17 	ldw	r2,-4(fp)
    259c:	10bfff04 	addi	r2,r2,-4
    25a0:	e0bfff15 	stw	r2,-4(fp)
    25a4:	e0ffff17 	ldw	r3,-4(fp)
    25a8:	00800034 	movhi	r2,0
    25ac:	108d7e04 	addi	r2,r2,13816
    25b0:	18bff62e 	bgeu	r3,r2,258c <_do_dtors+0x28>
        (*dtor) (); 
}
    25b4:	e037883a 	mov	sp,fp
    25b8:	dfc00117 	ldw	ra,4(sp)
    25bc:	df000017 	ldw	fp,0(sp)
    25c0:	dec00204 	addi	sp,sp,8
    25c4:	f800283a 	ret

000025c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    25c8:	defff904 	addi	sp,sp,-28
    25cc:	dfc00615 	stw	ra,24(sp)
    25d0:	df000515 	stw	fp,20(sp)
    25d4:	df000504 	addi	fp,sp,20
    25d8:	e13ffd15 	stw	r4,-12(fp)
    25dc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    25e0:	e0bffe17 	ldw	r2,-8(fp)
    25e4:	10800017 	ldw	r2,0(r2)
    25e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    25ec:	e13ffd17 	ldw	r4,-12(fp)
    25f0:	00032380 	call	3238 <strlen>
    25f4:	10800044 	addi	r2,r2,1
    25f8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    25fc:	00000d06 	br	2634 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2600:	e0bffc17 	ldw	r2,-16(fp)
    2604:	11000217 	ldw	r4,8(r2)
    2608:	e1bffb17 	ldw	r6,-20(fp)
    260c:	e17ffd17 	ldw	r5,-12(fp)
    2610:	00031240 	call	3124 <memcmp>
    2614:	1004c03a 	cmpne	r2,r2,zero
    2618:	1000031e 	bne	r2,zero,2628 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    261c:	e0bffc17 	ldw	r2,-16(fp)
    2620:	e0bfff15 	stw	r2,-4(fp)
    2624:	00000706 	br	2644 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2628:	e0bffc17 	ldw	r2,-16(fp)
    262c:	10800017 	ldw	r2,0(r2)
    2630:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2634:	e0fffe17 	ldw	r3,-8(fp)
    2638:	e0bffc17 	ldw	r2,-16(fp)
    263c:	10fff01e 	bne	r2,r3,2600 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2640:	e03fff15 	stw	zero,-4(fp)
    2644:	e0bfff17 	ldw	r2,-4(fp)
}
    2648:	e037883a 	mov	sp,fp
    264c:	dfc00117 	ldw	ra,4(sp)
    2650:	df000017 	ldw	fp,0(sp)
    2654:	dec00204 	addi	sp,sp,8
    2658:	f800283a 	ret

0000265c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    265c:	defffe04 	addi	sp,sp,-8
    2660:	dfc00115 	stw	ra,4(sp)
    2664:	df000015 	stw	fp,0(sp)
    2668:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    266c:	0009883a 	mov	r4,zero
    2670:	01440004 	movi	r5,4096
    2674:	00030480 	call	3048 <alt_icache_flush>
#endif
}
    2678:	e037883a 	mov	sp,fp
    267c:	dfc00117 	ldw	ra,4(sp)
    2680:	df000017 	ldw	fp,0(sp)
    2684:	dec00204 	addi	sp,sp,8
    2688:	f800283a 	ret

0000268c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    268c:	defff904 	addi	sp,sp,-28
    2690:	dfc00615 	stw	ra,24(sp)
    2694:	df000515 	stw	fp,20(sp)
    2698:	df000504 	addi	fp,sp,20
    269c:	e13ffc15 	stw	r4,-16(fp)
    26a0:	e17ffd15 	stw	r5,-12(fp)
    26a4:	e1bffe15 	stw	r6,-8(fp)
    26a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    26ac:	e13ffd17 	ldw	r4,-12(fp)
    26b0:	e17ffe17 	ldw	r5,-8(fp)
    26b4:	e1bfff17 	ldw	r6,-4(fp)
    26b8:	0002a640 	call	2a64 <open>
    26bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    26c0:	e0bffb17 	ldw	r2,-20(fp)
    26c4:	1004803a 	cmplt	r2,r2,zero
    26c8:	10001c1e 	bne	r2,zero,273c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    26cc:	e0bffb17 	ldw	r2,-20(fp)
    26d0:	00c00034 	movhi	r3,0
    26d4:	18d27904 	addi	r3,r3,18916
    26d8:	10800324 	muli	r2,r2,12
    26dc:	10c5883a 	add	r2,r2,r3
    26e0:	10c00017 	ldw	r3,0(r2)
    26e4:	e0bffc17 	ldw	r2,-16(fp)
    26e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    26ec:	e0bffb17 	ldw	r2,-20(fp)
    26f0:	00c00034 	movhi	r3,0
    26f4:	18d27904 	addi	r3,r3,18916
    26f8:	10800324 	muli	r2,r2,12
    26fc:	10c5883a 	add	r2,r2,r3
    2700:	10800104 	addi	r2,r2,4
    2704:	10c00017 	ldw	r3,0(r2)
    2708:	e0bffc17 	ldw	r2,-16(fp)
    270c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2710:	e0bffb17 	ldw	r2,-20(fp)
    2714:	00c00034 	movhi	r3,0
    2718:	18d27904 	addi	r3,r3,18916
    271c:	10800324 	muli	r2,r2,12
    2720:	10c5883a 	add	r2,r2,r3
    2724:	10800204 	addi	r2,r2,8
    2728:	10c00017 	ldw	r3,0(r2)
    272c:	e0bffc17 	ldw	r2,-16(fp)
    2730:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2734:	e13ffb17 	ldw	r4,-20(fp)
    2738:	0002c4c0 	call	2c4c <alt_release_fd>
  }
} 
    273c:	e037883a 	mov	sp,fp
    2740:	dfc00117 	ldw	ra,4(sp)
    2744:	df000017 	ldw	fp,0(sp)
    2748:	dec00204 	addi	sp,sp,8
    274c:	f800283a 	ret

00002750 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2750:	defffb04 	addi	sp,sp,-20
    2754:	dfc00415 	stw	ra,16(sp)
    2758:	df000315 	stw	fp,12(sp)
    275c:	df000304 	addi	fp,sp,12
    2760:	e13ffd15 	stw	r4,-12(fp)
    2764:	e17ffe15 	stw	r5,-8(fp)
    2768:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    276c:	01000034 	movhi	r4,0
    2770:	21127c04 	addi	r4,r4,18928
    2774:	e17ffd17 	ldw	r5,-12(fp)
    2778:	01800044 	movi	r6,1
    277c:	01c07fc4 	movi	r7,511
    2780:	000268c0 	call	268c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2784:	01000034 	movhi	r4,0
    2788:	21127904 	addi	r4,r4,18916
    278c:	e17ffe17 	ldw	r5,-8(fp)
    2790:	000d883a 	mov	r6,zero
    2794:	01c07fc4 	movi	r7,511
    2798:	000268c0 	call	268c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    279c:	01000034 	movhi	r4,0
    27a0:	21127f04 	addi	r4,r4,18940
    27a4:	e17fff17 	ldw	r5,-4(fp)
    27a8:	01800044 	movi	r6,1
    27ac:	01c07fc4 	movi	r7,511
    27b0:	000268c0 	call	268c <alt_open_fd>
}  
    27b4:	e037883a 	mov	sp,fp
    27b8:	dfc00117 	ldw	ra,4(sp)
    27bc:	df000017 	ldw	fp,0(sp)
    27c0:	dec00204 	addi	sp,sp,8
    27c4:	f800283a 	ret

000027c8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
    27c8:	deffef04 	addi	sp,sp,-68
    27cc:	df001015 	stw	fp,64(sp)
    27d0:	df001004 	addi	fp,sp,64
    27d4:	e13ffc15 	stw	r4,-16(fp)
    27d8:	e17ffd15 	stw	r5,-12(fp)
    27dc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
    27e0:	00bffa84 	movi	r2,-22
    27e4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    27e8:	e0bffc17 	ldw	r2,-16(fp)
    27ec:	10800828 	cmpgeui	r2,r2,32
    27f0:	1000601e 	bne	r2,zero,2974 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    27f4:	0005303a 	rdctl	r2,status
    27f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    27fc:	e0fff917 	ldw	r3,-28(fp)
    2800:	00bfff84 	movi	r2,-2
    2804:	1884703a 	and	r2,r3,r2
    2808:	1001703a 	wrctl	status,r2
  
  return context;
    280c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
    2810:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
    2814:	e0bffc17 	ldw	r2,-16(fp)
    2818:	00c00034 	movhi	r3,0
    281c:	18da0504 	addi	r3,r3,26644
    2820:	100490fa 	slli	r2,r2,3
    2824:	10c7883a 	add	r3,r2,r3
    2828:	e0bffe17 	ldw	r2,-8(fp)
    282c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
    2830:	e0bffc17 	ldw	r2,-16(fp)
    2834:	00c00034 	movhi	r3,0
    2838:	18da0504 	addi	r3,r3,26644
    283c:	100490fa 	slli	r2,r2,3
    2840:	10c5883a 	add	r2,r2,r3
    2844:	10c00104 	addi	r3,r2,4
    2848:	e0bffd17 	ldw	r2,-12(fp)
    284c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2850:	e0bffe17 	ldw	r2,-8(fp)
    2854:	1005003a 	cmpeq	r2,r2,zero
    2858:	1000201e 	bne	r2,zero,28dc <alt_irq_register+0x114>
    285c:	e0bffc17 	ldw	r2,-16(fp)
    2860:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2864:	0005303a 	rdctl	r2,status
    2868:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    286c:	e0fff617 	ldw	r3,-40(fp)
    2870:	00bfff84 	movi	r2,-2
    2874:	1884703a 	and	r2,r3,r2
    2878:	1001703a 	wrctl	status,r2
  
  return context;
    287c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2880:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
    2884:	e0fff717 	ldw	r3,-36(fp)
    2888:	00800044 	movi	r2,1
    288c:	10c4983a 	sll	r2,r2,r3
    2890:	1007883a 	mov	r3,r2
    2894:	00800034 	movhi	r2,0
    2898:	109a0104 	addi	r2,r2,26628
    289c:	10800017 	ldw	r2,0(r2)
    28a0:	1886b03a 	or	r3,r3,r2
    28a4:	00800034 	movhi	r2,0
    28a8:	109a0104 	addi	r2,r2,26628
    28ac:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    28b0:	00800034 	movhi	r2,0
    28b4:	109a0104 	addi	r2,r2,26628
    28b8:	10800017 	ldw	r2,0(r2)
    28bc:	100170fa 	wrctl	ienable,r2
    28c0:	e0bff817 	ldw	r2,-32(fp)
    28c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28c8:	e0bff517 	ldw	r2,-44(fp)
    28cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    28d0:	0005883a 	mov	r2,zero
    28d4:	e0bfff15 	stw	r2,-4(fp)
    28d8:	00002006 	br	295c <alt_irq_register+0x194>
    28dc:	e0bffc17 	ldw	r2,-16(fp)
    28e0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    28e4:	0005303a 	rdctl	r2,status
    28e8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28ec:	e0fff217 	ldw	r3,-56(fp)
    28f0:	00bfff84 	movi	r2,-2
    28f4:	1884703a 	and	r2,r3,r2
    28f8:	1001703a 	wrctl	status,r2
  
  return context;
    28fc:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2900:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
    2904:	e0fff317 	ldw	r3,-52(fp)
    2908:	00800044 	movi	r2,1
    290c:	10c4983a 	sll	r2,r2,r3
    2910:	0084303a 	nor	r2,zero,r2
    2914:	1007883a 	mov	r3,r2
    2918:	00800034 	movhi	r2,0
    291c:	109a0104 	addi	r2,r2,26628
    2920:	10800017 	ldw	r2,0(r2)
    2924:	1886703a 	and	r3,r3,r2
    2928:	00800034 	movhi	r2,0
    292c:	109a0104 	addi	r2,r2,26628
    2930:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2934:	00800034 	movhi	r2,0
    2938:	109a0104 	addi	r2,r2,26628
    293c:	10800017 	ldw	r2,0(r2)
    2940:	100170fa 	wrctl	ienable,r2
    2944:	e0bff417 	ldw	r2,-48(fp)
    2948:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    294c:	e0bff117 	ldw	r2,-60(fp)
    2950:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2954:	0005883a 	mov	r2,zero
    2958:	e0bfff15 	stw	r2,-4(fp)
    295c:	e0bfff17 	ldw	r2,-4(fp)
    2960:	e0bffb15 	stw	r2,-20(fp)
    2964:	e0bffa17 	ldw	r2,-24(fp)
    2968:	e0bff015 	stw	r2,-64(fp)
    296c:	e0bff017 	ldw	r2,-64(fp)
    2970:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
    2974:	e0bffb17 	ldw	r2,-20(fp)
}
    2978:	e037883a 	mov	sp,fp
    297c:	df000017 	ldw	fp,0(sp)
    2980:	dec00104 	addi	sp,sp,4
    2984:	f800283a 	ret

00002988 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2988:	defffc04 	addi	sp,sp,-16
    298c:	df000315 	stw	fp,12(sp)
    2990:	df000304 	addi	fp,sp,12
    2994:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2998:	e0bffe17 	ldw	r2,-8(fp)
    299c:	10800217 	ldw	r2,8(r2)
    29a0:	10d00034 	orhi	r3,r2,16384
    29a4:	e0bffe17 	ldw	r2,-8(fp)
    29a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    29ac:	e03ffd15 	stw	zero,-12(fp)
    29b0:	00002006 	br	2a34 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    29b4:	e0bffd17 	ldw	r2,-12(fp)
    29b8:	00c00034 	movhi	r3,0
    29bc:	18d27904 	addi	r3,r3,18916
    29c0:	10800324 	muli	r2,r2,12
    29c4:	10c5883a 	add	r2,r2,r3
    29c8:	10c00017 	ldw	r3,0(r2)
    29cc:	e0bffe17 	ldw	r2,-8(fp)
    29d0:	10800017 	ldw	r2,0(r2)
    29d4:	1880141e 	bne	r3,r2,2a28 <alt_file_locked+0xa0>
    29d8:	e0bffd17 	ldw	r2,-12(fp)
    29dc:	00c00034 	movhi	r3,0
    29e0:	18d27904 	addi	r3,r3,18916
    29e4:	10800324 	muli	r2,r2,12
    29e8:	10c5883a 	add	r2,r2,r3
    29ec:	10800204 	addi	r2,r2,8
    29f0:	10800017 	ldw	r2,0(r2)
    29f4:	1004403a 	cmpge	r2,r2,zero
    29f8:	10000b1e 	bne	r2,zero,2a28 <alt_file_locked+0xa0>
    29fc:	e0bffd17 	ldw	r2,-12(fp)
    2a00:	10800324 	muli	r2,r2,12
    2a04:	1007883a 	mov	r3,r2
    2a08:	00800034 	movhi	r2,0
    2a0c:	10927904 	addi	r2,r2,18916
    2a10:	1887883a 	add	r3,r3,r2
    2a14:	e0bffe17 	ldw	r2,-8(fp)
    2a18:	18800326 	beq	r3,r2,2a28 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2a1c:	00bffcc4 	movi	r2,-13
    2a20:	e0bfff15 	stw	r2,-4(fp)
    2a24:	00000a06 	br	2a50 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2a28:	e0bffd17 	ldw	r2,-12(fp)
    2a2c:	10800044 	addi	r2,r2,1
    2a30:	e0bffd15 	stw	r2,-12(fp)
    2a34:	00800034 	movhi	r2,0
    2a38:	1093de04 	addi	r2,r2,20344
    2a3c:	10800017 	ldw	r2,0(r2)
    2a40:	1007883a 	mov	r3,r2
    2a44:	e0bffd17 	ldw	r2,-12(fp)
    2a48:	18bfda2e 	bgeu	r3,r2,29b4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    2a4c:	e03fff15 	stw	zero,-4(fp)
    2a50:	e0bfff17 	ldw	r2,-4(fp)
}
    2a54:	e037883a 	mov	sp,fp
    2a58:	df000017 	ldw	fp,0(sp)
    2a5c:	dec00104 	addi	sp,sp,4
    2a60:	f800283a 	ret

00002a64 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2a64:	defff404 	addi	sp,sp,-48
    2a68:	dfc00b15 	stw	ra,44(sp)
    2a6c:	df000a15 	stw	fp,40(sp)
    2a70:	df000a04 	addi	fp,sp,40
    2a74:	e13ffb15 	stw	r4,-20(fp)
    2a78:	e17ffc15 	stw	r5,-16(fp)
    2a7c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2a80:	00bfffc4 	movi	r2,-1
    2a84:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    2a88:	00bffb44 	movi	r2,-19
    2a8c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    2a90:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2a94:	e13ffb17 	ldw	r4,-20(fp)
    2a98:	01400034 	movhi	r5,0
    2a9c:	2953dc04 	addi	r5,r5,20336
    2aa0:	00025c80 	call	25c8 <alt_find_dev>
    2aa4:	e0bffa15 	stw	r2,-24(fp)
    2aa8:	e0bffa17 	ldw	r2,-24(fp)
    2aac:	1004c03a 	cmpne	r2,r2,zero
    2ab0:	1000051e 	bne	r2,zero,2ac8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2ab4:	e13ffb17 	ldw	r4,-20(fp)
    2ab8:	0002e700 	call	2e70 <alt_find_file>
    2abc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    2ac0:	00800044 	movi	r2,1
    2ac4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2ac8:	e0bffa17 	ldw	r2,-24(fp)
    2acc:	1005003a 	cmpeq	r2,r2,zero
    2ad0:	1000301e 	bne	r2,zero,2b94 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2ad4:	e13ffa17 	ldw	r4,-24(fp)
    2ad8:	0002f900 	call	2f90 <alt_get_fd>
    2adc:	e0bff815 	stw	r2,-32(fp)
    2ae0:	e0bff817 	ldw	r2,-32(fp)
    2ae4:	1004403a 	cmpge	r2,r2,zero
    2ae8:	1000031e 	bne	r2,zero,2af8 <open+0x94>
    {
      status = index;
    2aec:	e0bff817 	ldw	r2,-32(fp)
    2af0:	e0bff715 	stw	r2,-36(fp)
    2af4:	00002906 	br	2b9c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    2af8:	e0bff817 	ldw	r2,-32(fp)
    2afc:	10800324 	muli	r2,r2,12
    2b00:	1007883a 	mov	r3,r2
    2b04:	00800034 	movhi	r2,0
    2b08:	10927904 	addi	r2,r2,18916
    2b0c:	1885883a 	add	r2,r3,r2
    2b10:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2b14:	e0fffc17 	ldw	r3,-16(fp)
    2b18:	00900034 	movhi	r2,16384
    2b1c:	10bfffc4 	addi	r2,r2,-1
    2b20:	1886703a 	and	r3,r3,r2
    2b24:	e0bff917 	ldw	r2,-28(fp)
    2b28:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2b2c:	e0bff617 	ldw	r2,-40(fp)
    2b30:	1004c03a 	cmpne	r2,r2,zero
    2b34:	1000061e 	bne	r2,zero,2b50 <open+0xec>
    2b38:	e13ff917 	ldw	r4,-28(fp)
    2b3c:	00029880 	call	2988 <alt_file_locked>
    2b40:	e0bff715 	stw	r2,-36(fp)
    2b44:	e0bff717 	ldw	r2,-36(fp)
    2b48:	1004803a 	cmplt	r2,r2,zero
    2b4c:	1000131e 	bne	r2,zero,2b9c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2b50:	e0bffa17 	ldw	r2,-24(fp)
    2b54:	10800317 	ldw	r2,12(r2)
    2b58:	1005003a 	cmpeq	r2,r2,zero
    2b5c:	1000091e 	bne	r2,zero,2b84 <open+0x120>
    2b60:	e0bffa17 	ldw	r2,-24(fp)
    2b64:	10800317 	ldw	r2,12(r2)
    2b68:	e13ff917 	ldw	r4,-28(fp)
    2b6c:	e17ffb17 	ldw	r5,-20(fp)
    2b70:	e1bffc17 	ldw	r6,-16(fp)
    2b74:	e1fffd17 	ldw	r7,-12(fp)
    2b78:	103ee83a 	callr	r2
    2b7c:	e0bfff15 	stw	r2,-4(fp)
    2b80:	00000106 	br	2b88 <open+0x124>
    2b84:	e03fff15 	stw	zero,-4(fp)
    2b88:	e0bfff17 	ldw	r2,-4(fp)
    2b8c:	e0bff715 	stw	r2,-36(fp)
    2b90:	00000206 	br	2b9c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2b94:	00bffb44 	movi	r2,-19
    2b98:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2b9c:	e0bff717 	ldw	r2,-36(fp)
    2ba0:	1004403a 	cmpge	r2,r2,zero
    2ba4:	1000091e 	bne	r2,zero,2bcc <open+0x168>
  {
    alt_release_fd (index);  
    2ba8:	e13ff817 	ldw	r4,-32(fp)
    2bac:	0002c4c0 	call	2c4c <alt_release_fd>
    ALT_ERRNO = -status;
    2bb0:	0002bec0 	call	2bec <alt_get_errno>
    2bb4:	e0fff717 	ldw	r3,-36(fp)
    2bb8:	00c7c83a 	sub	r3,zero,r3
    2bbc:	10c00015 	stw	r3,0(r2)
    return -1;
    2bc0:	00bfffc4 	movi	r2,-1
    2bc4:	e0bffe15 	stw	r2,-8(fp)
    2bc8:	00000206 	br	2bd4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    2bcc:	e0bff817 	ldw	r2,-32(fp)
    2bd0:	e0bffe15 	stw	r2,-8(fp)
    2bd4:	e0bffe17 	ldw	r2,-8(fp)
}
    2bd8:	e037883a 	mov	sp,fp
    2bdc:	dfc00117 	ldw	ra,4(sp)
    2be0:	df000017 	ldw	fp,0(sp)
    2be4:	dec00204 	addi	sp,sp,8
    2be8:	f800283a 	ret

00002bec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2bec:	defffd04 	addi	sp,sp,-12
    2bf0:	dfc00215 	stw	ra,8(sp)
    2bf4:	df000115 	stw	fp,4(sp)
    2bf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    2bfc:	00800034 	movhi	r2,0
    2c00:	1093df04 	addi	r2,r2,20348
    2c04:	10800017 	ldw	r2,0(r2)
    2c08:	1005003a 	cmpeq	r2,r2,zero
    2c0c:	1000061e 	bne	r2,zero,2c28 <alt_get_errno+0x3c>
    2c10:	00800034 	movhi	r2,0
    2c14:	1093df04 	addi	r2,r2,20348
    2c18:	10800017 	ldw	r2,0(r2)
    2c1c:	103ee83a 	callr	r2
    2c20:	e0bfff15 	stw	r2,-4(fp)
    2c24:	00000306 	br	2c34 <alt_get_errno+0x48>
    2c28:	00800034 	movhi	r2,0
    2c2c:	109a0404 	addi	r2,r2,26640
    2c30:	e0bfff15 	stw	r2,-4(fp)
    2c34:	e0bfff17 	ldw	r2,-4(fp)
}
    2c38:	e037883a 	mov	sp,fp
    2c3c:	dfc00117 	ldw	ra,4(sp)
    2c40:	df000017 	ldw	fp,0(sp)
    2c44:	dec00204 	addi	sp,sp,8
    2c48:	f800283a 	ret

00002c4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    2c4c:	defffe04 	addi	sp,sp,-8
    2c50:	df000115 	stw	fp,4(sp)
    2c54:	df000104 	addi	fp,sp,4
    2c58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2c5c:	e0bfff17 	ldw	r2,-4(fp)
    2c60:	108000d0 	cmplti	r2,r2,3
    2c64:	10000d1e 	bne	r2,zero,2c9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    2c68:	e0bfff17 	ldw	r2,-4(fp)
    2c6c:	00c00034 	movhi	r3,0
    2c70:	18d27904 	addi	r3,r3,18916
    2c74:	10800324 	muli	r2,r2,12
    2c78:	10c5883a 	add	r2,r2,r3
    2c7c:	10800204 	addi	r2,r2,8
    2c80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    2c84:	e0bfff17 	ldw	r2,-4(fp)
    2c88:	00c00034 	movhi	r3,0
    2c8c:	18d27904 	addi	r3,r3,18916
    2c90:	10800324 	muli	r2,r2,12
    2c94:	10c5883a 	add	r2,r2,r3
    2c98:	10000015 	stw	zero,0(r2)
  }
}
    2c9c:	e037883a 	mov	sp,fp
    2ca0:	df000017 	ldw	fp,0(sp)
    2ca4:	dec00104 	addi	sp,sp,4
    2ca8:	f800283a 	ret

00002cac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2cac:	defffa04 	addi	sp,sp,-24
    2cb0:	df000515 	stw	fp,20(sp)
    2cb4:	df000504 	addi	fp,sp,20
    2cb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2cbc:	0005303a 	rdctl	r2,status
    2cc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2cc4:	e0fffd17 	ldw	r3,-12(fp)
    2cc8:	00bfff84 	movi	r2,-2
    2ccc:	1884703a 	and	r2,r3,r2
    2cd0:	1001703a 	wrctl	status,r2
  
  return context;
    2cd4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2cd8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    2cdc:	e0bfff17 	ldw	r2,-4(fp)
    2ce0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2ce4:	e0bffc17 	ldw	r2,-16(fp)
    2ce8:	10c00017 	ldw	r3,0(r2)
    2cec:	e0bffc17 	ldw	r2,-16(fp)
    2cf0:	10800117 	ldw	r2,4(r2)
    2cf4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    2cf8:	e0bffc17 	ldw	r2,-16(fp)
    2cfc:	10c00117 	ldw	r3,4(r2)
    2d00:	e0bffc17 	ldw	r2,-16(fp)
    2d04:	10800017 	ldw	r2,0(r2)
    2d08:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2d0c:	e0fffc17 	ldw	r3,-16(fp)
    2d10:	e0bffc17 	ldw	r2,-16(fp)
    2d14:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    2d18:	e0fffc17 	ldw	r3,-16(fp)
    2d1c:	e0bffc17 	ldw	r2,-16(fp)
    2d20:	18800015 	stw	r2,0(r3)
    2d24:	e0bffe17 	ldw	r2,-8(fp)
    2d28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2d2c:	e0bffb17 	ldw	r2,-20(fp)
    2d30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    2d34:	e037883a 	mov	sp,fp
    2d38:	df000017 	ldw	fp,0(sp)
    2d3c:	dec00104 	addi	sp,sp,4
    2d40:	f800283a 	ret

00002d44 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2d44:	defffb04 	addi	sp,sp,-20
    2d48:	dfc00415 	stw	ra,16(sp)
    2d4c:	df000315 	stw	fp,12(sp)
    2d50:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2d54:	d0a00817 	ldw	r2,-32736(gp)
    2d58:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2d5c:	d0a62a17 	ldw	r2,-26456(gp)
    2d60:	10800044 	addi	r2,r2,1
    2d64:	d0a62a15 	stw	r2,-26456(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2d68:	00003106 	br	2e30 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    2d6c:	e0bffe17 	ldw	r2,-8(fp)
    2d70:	10800017 	ldw	r2,0(r2)
    2d74:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2d78:	e0bffe17 	ldw	r2,-8(fp)
    2d7c:	10800403 	ldbu	r2,16(r2)
    2d80:	10803fcc 	andi	r2,r2,255
    2d84:	1005003a 	cmpeq	r2,r2,zero
    2d88:	1000051e 	bne	r2,zero,2da0 <alt_tick+0x5c>
    2d8c:	d0a62a17 	ldw	r2,-26456(gp)
    2d90:	1004c03a 	cmpne	r2,r2,zero
    2d94:	1000021e 	bne	r2,zero,2da0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    2d98:	e0bffe17 	ldw	r2,-8(fp)
    2d9c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2da0:	e0bffe17 	ldw	r2,-8(fp)
    2da4:	10c00217 	ldw	r3,8(r2)
    2da8:	d0a62a17 	ldw	r2,-26456(gp)
    2dac:	10c01e36 	bltu	r2,r3,2e28 <alt_tick+0xe4>
    2db0:	e0bffe17 	ldw	r2,-8(fp)
    2db4:	10800403 	ldbu	r2,16(r2)
    2db8:	10803fcc 	andi	r2,r2,255
    2dbc:	1004c03a 	cmpne	r2,r2,zero
    2dc0:	1000191e 	bne	r2,zero,2e28 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    2dc4:	e0bffe17 	ldw	r2,-8(fp)
    2dc8:	10c00317 	ldw	r3,12(r2)
    2dcc:	e0bffe17 	ldw	r2,-8(fp)
    2dd0:	11000517 	ldw	r4,20(r2)
    2dd4:	183ee83a 	callr	r3
    2dd8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2ddc:	e0bffd17 	ldw	r2,-12(fp)
    2de0:	1004c03a 	cmpne	r2,r2,zero
    2de4:	1000031e 	bne	r2,zero,2df4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    2de8:	e13ffe17 	ldw	r4,-8(fp)
    2dec:	0002cac0 	call	2cac <alt_alarm_stop>
    2df0:	00000d06 	br	2e28 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    2df4:	e0bffe17 	ldw	r2,-8(fp)
    2df8:	10c00217 	ldw	r3,8(r2)
    2dfc:	e0bffd17 	ldw	r2,-12(fp)
    2e00:	1887883a 	add	r3,r3,r2
    2e04:	e0bffe17 	ldw	r2,-8(fp)
    2e08:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2e0c:	e0bffe17 	ldw	r2,-8(fp)
    2e10:	10c00217 	ldw	r3,8(r2)
    2e14:	d0a62a17 	ldw	r2,-26456(gp)
    2e18:	1880032e 	bgeu	r3,r2,2e28 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    2e1c:	e0fffe17 	ldw	r3,-8(fp)
    2e20:	00800044 	movi	r2,1
    2e24:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    2e28:	e0bfff17 	ldw	r2,-4(fp)
    2e2c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2e30:	d0e00804 	addi	r3,gp,-32736
    2e34:	e0bffe17 	ldw	r2,-8(fp)
    2e38:	10ffcc1e 	bne	r2,r3,2d6c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    2e3c:	e037883a 	mov	sp,fp
    2e40:	dfc00117 	ldw	ra,4(sp)
    2e44:	df000017 	ldw	fp,0(sp)
    2e48:	dec00204 	addi	sp,sp,8
    2e4c:	f800283a 	ret

00002e50 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2e50:	deffff04 	addi	sp,sp,-4
    2e54:	df000015 	stw	fp,0(sp)
    2e58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2e5c:	000170fa 	wrctl	ienable,zero
}
    2e60:	e037883a 	mov	sp,fp
    2e64:	df000017 	ldw	fp,0(sp)
    2e68:	dec00104 	addi	sp,sp,4
    2e6c:	f800283a 	ret

00002e70 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    2e70:	defffa04 	addi	sp,sp,-24
    2e74:	dfc00515 	stw	ra,20(sp)
    2e78:	df000415 	stw	fp,16(sp)
    2e7c:	df000404 	addi	fp,sp,16
    2e80:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    2e84:	00800034 	movhi	r2,0
    2e88:	1093da04 	addi	r2,r2,20328
    2e8c:	10800017 	ldw	r2,0(r2)
    2e90:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2e94:	00003306 	br	2f64 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    2e98:	e0bffd17 	ldw	r2,-12(fp)
    2e9c:	11000217 	ldw	r4,8(r2)
    2ea0:	00032380 	call	3238 <strlen>
    2ea4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    2ea8:	e0bffd17 	ldw	r2,-12(fp)
    2eac:	10c00217 	ldw	r3,8(r2)
    2eb0:	e0bffc17 	ldw	r2,-16(fp)
    2eb4:	1885883a 	add	r2,r3,r2
    2eb8:	10bfffc4 	addi	r2,r2,-1
    2ebc:	10800003 	ldbu	r2,0(r2)
    2ec0:	10803fcc 	andi	r2,r2,255
    2ec4:	1080201c 	xori	r2,r2,128
    2ec8:	10bfe004 	addi	r2,r2,-128
    2ecc:	10800bd8 	cmpnei	r2,r2,47
    2ed0:	1000031e 	bne	r2,zero,2ee0 <alt_find_file+0x70>
    {
      len -= 1;
    2ed4:	e0bffc17 	ldw	r2,-16(fp)
    2ed8:	10bfffc4 	addi	r2,r2,-1
    2edc:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2ee0:	e0bffc17 	ldw	r2,-16(fp)
    2ee4:	1007883a 	mov	r3,r2
    2ee8:	e0bffe17 	ldw	r2,-8(fp)
    2eec:	1885883a 	add	r2,r3,r2
    2ef0:	10800003 	ldbu	r2,0(r2)
    2ef4:	10803fcc 	andi	r2,r2,255
    2ef8:	1080201c 	xori	r2,r2,128
    2efc:	10bfe004 	addi	r2,r2,-128
    2f00:	10800be0 	cmpeqi	r2,r2,47
    2f04:	10000a1e 	bne	r2,zero,2f30 <alt_find_file+0xc0>
    2f08:	e0bffc17 	ldw	r2,-16(fp)
    2f0c:	1007883a 	mov	r3,r2
    2f10:	e0bffe17 	ldw	r2,-8(fp)
    2f14:	1885883a 	add	r2,r3,r2
    2f18:	10800003 	ldbu	r2,0(r2)
    2f1c:	10803fcc 	andi	r2,r2,255
    2f20:	1080201c 	xori	r2,r2,128
    2f24:	10bfe004 	addi	r2,r2,-128
    2f28:	1004c03a 	cmpne	r2,r2,zero
    2f2c:	10000a1e 	bne	r2,zero,2f58 <alt_find_file+0xe8>
    2f30:	e0bffd17 	ldw	r2,-12(fp)
    2f34:	11000217 	ldw	r4,8(r2)
    2f38:	e1bffc17 	ldw	r6,-16(fp)
    2f3c:	e17ffe17 	ldw	r5,-8(fp)
    2f40:	00031240 	call	3124 <memcmp>
    2f44:	1004c03a 	cmpne	r2,r2,zero
    2f48:	1000031e 	bne	r2,zero,2f58 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2f4c:	e0bffd17 	ldw	r2,-12(fp)
    2f50:	e0bfff15 	stw	r2,-4(fp)
    2f54:	00000806 	br	2f78 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    2f58:	e0bffd17 	ldw	r2,-12(fp)
    2f5c:	10800017 	ldw	r2,0(r2)
    2f60:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2f64:	00c00034 	movhi	r3,0
    2f68:	18d3da04 	addi	r3,r3,20328
    2f6c:	e0bffd17 	ldw	r2,-12(fp)
    2f70:	10ffc91e 	bne	r2,r3,2e98 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    2f74:	e03fff15 	stw	zero,-4(fp)
    2f78:	e0bfff17 	ldw	r2,-4(fp)
}
    2f7c:	e037883a 	mov	sp,fp
    2f80:	dfc00117 	ldw	ra,4(sp)
    2f84:	df000017 	ldw	fp,0(sp)
    2f88:	dec00204 	addi	sp,sp,8
    2f8c:	f800283a 	ret

00002f90 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    2f90:	defffc04 	addi	sp,sp,-16
    2f94:	df000315 	stw	fp,12(sp)
    2f98:	df000304 	addi	fp,sp,12
    2f9c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    2fa0:	00bffa04 	movi	r2,-24
    2fa4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2fa8:	e03ffe15 	stw	zero,-8(fp)
    2fac:	00001e06 	br	3028 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    2fb0:	e0bffe17 	ldw	r2,-8(fp)
    2fb4:	00c00034 	movhi	r3,0
    2fb8:	18d27904 	addi	r3,r3,18916
    2fbc:	10800324 	muli	r2,r2,12
    2fc0:	10c5883a 	add	r2,r2,r3
    2fc4:	10800017 	ldw	r2,0(r2)
    2fc8:	1004c03a 	cmpne	r2,r2,zero
    2fcc:	1000131e 	bne	r2,zero,301c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    2fd0:	e0bffe17 	ldw	r2,-8(fp)
    2fd4:	00c00034 	movhi	r3,0
    2fd8:	18d27904 	addi	r3,r3,18916
    2fdc:	10800324 	muli	r2,r2,12
    2fe0:	10c7883a 	add	r3,r2,r3
    2fe4:	e0bfff17 	ldw	r2,-4(fp)
    2fe8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    2fec:	00800034 	movhi	r2,0
    2ff0:	1093de04 	addi	r2,r2,20344
    2ff4:	10c00017 	ldw	r3,0(r2)
    2ff8:	e0bffe17 	ldw	r2,-8(fp)
    2ffc:	1880040e 	bge	r3,r2,3010 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    3000:	00c00034 	movhi	r3,0
    3004:	18d3de04 	addi	r3,r3,20344
    3008:	e0bffe17 	ldw	r2,-8(fp)
    300c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    3010:	e0bffe17 	ldw	r2,-8(fp)
    3014:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    3018:	00000606 	br	3034 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    301c:	e0bffe17 	ldw	r2,-8(fp)
    3020:	10800044 	addi	r2,r2,1
    3024:	e0bffe15 	stw	r2,-8(fp)
    3028:	e0bffe17 	ldw	r2,-8(fp)
    302c:	10800810 	cmplti	r2,r2,32
    3030:	103fdf1e 	bne	r2,zero,2fb0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3034:	e0bffd17 	ldw	r2,-12(fp)
}
    3038:	e037883a 	mov	sp,fp
    303c:	df000017 	ldw	fp,0(sp)
    3040:	dec00104 	addi	sp,sp,4
    3044:	f800283a 	ret

00003048 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    3048:	defffb04 	addi	sp,sp,-20
    304c:	df000415 	stw	fp,16(sp)
    3050:	df000404 	addi	fp,sp,16
    3054:	e13ffe15 	stw	r4,-8(fp)
    3058:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    305c:	e0bfff17 	ldw	r2,-4(fp)
    3060:	10840070 	cmpltui	r2,r2,4097
    3064:	1000021e 	bne	r2,zero,3070 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    3068:	00840004 	movi	r2,4096
    306c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3070:	e0fffe17 	ldw	r3,-8(fp)
    3074:	e0bfff17 	ldw	r2,-4(fp)
    3078:	1885883a 	add	r2,r3,r2
    307c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3080:	e0bffe17 	ldw	r2,-8(fp)
    3084:	e0bffd15 	stw	r2,-12(fp)
    3088:	00000506 	br	30a0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    308c:	e0bffd17 	ldw	r2,-12(fp)
    3090:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3094:	e0bffd17 	ldw	r2,-12(fp)
    3098:	10800804 	addi	r2,r2,32
    309c:	e0bffd15 	stw	r2,-12(fp)
    30a0:	e0fffd17 	ldw	r3,-12(fp)
    30a4:	e0bffc17 	ldw	r2,-16(fp)
    30a8:	18bff836 	bltu	r3,r2,308c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    30ac:	e0bffe17 	ldw	r2,-8(fp)
    30b0:	108007cc 	andi	r2,r2,31
    30b4:	1005003a 	cmpeq	r2,r2,zero
    30b8:	1000021e 	bne	r2,zero,30c4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    30bc:	e0bffd17 	ldw	r2,-12(fp)
    30c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    30c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    30c8:	e037883a 	mov	sp,fp
    30cc:	df000017 	ldw	fp,0(sp)
    30d0:	dec00104 	addi	sp,sp,4
    30d4:	f800283a 	ret

000030d8 <atexit>:
    30d8:	200b883a 	mov	r5,r4
    30dc:	000d883a 	mov	r6,zero
    30e0:	0009883a 	mov	r4,zero
    30e4:	000f883a 	mov	r7,zero
    30e8:	00032ac1 	jmpi	32ac <__register_exitproc>

000030ec <exit>:
    30ec:	defffe04 	addi	sp,sp,-8
    30f0:	000b883a 	mov	r5,zero
    30f4:	dc000015 	stw	r16,0(sp)
    30f8:	dfc00115 	stw	ra,4(sp)
    30fc:	2021883a 	mov	r16,r4
    3100:	00033e40 	call	33e4 <__call_exitprocs>
    3104:	00800034 	movhi	r2,0
    3108:	1093e404 	addi	r2,r2,20368
    310c:	11000017 	ldw	r4,0(r2)
    3110:	20800f17 	ldw	r2,60(r4)
    3114:	10000126 	beq	r2,zero,311c <exit+0x30>
    3118:	103ee83a 	callr	r2
    311c:	8009883a 	mov	r4,r16
    3120:	00035d40 	call	35d4 <_exit>

00003124 <memcmp>:
    3124:	00c000c4 	movi	r3,3
    3128:	1980032e 	bgeu	r3,r6,3138 <memcmp+0x14>
    312c:	2144b03a 	or	r2,r4,r5
    3130:	10c4703a 	and	r2,r2,r3
    3134:	10000f26 	beq	r2,zero,3174 <memcmp+0x50>
    3138:	31ffffc4 	addi	r7,r6,-1
    313c:	3000061e 	bne	r6,zero,3158 <memcmp+0x34>
    3140:	00000a06 	br	316c <memcmp+0x48>
    3144:	39ffffc4 	addi	r7,r7,-1
    3148:	00bfffc4 	movi	r2,-1
    314c:	21000044 	addi	r4,r4,1
    3150:	29400044 	addi	r5,r5,1
    3154:	38800526 	beq	r7,r2,316c <memcmp+0x48>
    3158:	20c00003 	ldbu	r3,0(r4)
    315c:	28800003 	ldbu	r2,0(r5)
    3160:	18bff826 	beq	r3,r2,3144 <memcmp+0x20>
    3164:	1885c83a 	sub	r2,r3,r2
    3168:	f800283a 	ret
    316c:	0005883a 	mov	r2,zero
    3170:	f800283a 	ret
    3174:	180f883a 	mov	r7,r3
    3178:	20c00017 	ldw	r3,0(r4)
    317c:	28800017 	ldw	r2,0(r5)
    3180:	18bfed1e 	bne	r3,r2,3138 <memcmp+0x14>
    3184:	31bfff04 	addi	r6,r6,-4
    3188:	21000104 	addi	r4,r4,4
    318c:	29400104 	addi	r5,r5,4
    3190:	39bff936 	bltu	r7,r6,3178 <memcmp+0x54>
    3194:	003fe806 	br	3138 <memcmp+0x14>

00003198 <memcpy>:
    3198:	01c003c4 	movi	r7,15
    319c:	2007883a 	mov	r3,r4
    31a0:	3980032e 	bgeu	r7,r6,31b0 <memcpy+0x18>
    31a4:	2904b03a 	or	r2,r5,r4
    31a8:	108000cc 	andi	r2,r2,3
    31ac:	10000926 	beq	r2,zero,31d4 <memcpy+0x3c>
    31b0:	30000626 	beq	r6,zero,31cc <memcpy+0x34>
    31b4:	30cd883a 	add	r6,r6,r3
    31b8:	28800003 	ldbu	r2,0(r5)
    31bc:	29400044 	addi	r5,r5,1
    31c0:	18800005 	stb	r2,0(r3)
    31c4:	18c00044 	addi	r3,r3,1
    31c8:	30fffb1e 	bne	r6,r3,31b8 <memcpy+0x20>
    31cc:	2005883a 	mov	r2,r4
    31d0:	f800283a 	ret
    31d4:	3811883a 	mov	r8,r7
    31d8:	200f883a 	mov	r7,r4
    31dc:	28c00017 	ldw	r3,0(r5)
    31e0:	31bffc04 	addi	r6,r6,-16
    31e4:	38c00015 	stw	r3,0(r7)
    31e8:	28800117 	ldw	r2,4(r5)
    31ec:	38800115 	stw	r2,4(r7)
    31f0:	28c00217 	ldw	r3,8(r5)
    31f4:	38c00215 	stw	r3,8(r7)
    31f8:	28800317 	ldw	r2,12(r5)
    31fc:	29400404 	addi	r5,r5,16
    3200:	38800315 	stw	r2,12(r7)
    3204:	39c00404 	addi	r7,r7,16
    3208:	41bff436 	bltu	r8,r6,31dc <memcpy+0x44>
    320c:	008000c4 	movi	r2,3
    3210:	1180072e 	bgeu	r2,r6,3230 <memcpy+0x98>
    3214:	1007883a 	mov	r3,r2
    3218:	28800017 	ldw	r2,0(r5)
    321c:	31bfff04 	addi	r6,r6,-4
    3220:	29400104 	addi	r5,r5,4
    3224:	38800015 	stw	r2,0(r7)
    3228:	39c00104 	addi	r7,r7,4
    322c:	19bffa36 	bltu	r3,r6,3218 <memcpy+0x80>
    3230:	3807883a 	mov	r3,r7
    3234:	003fde06 	br	31b0 <memcpy+0x18>

00003238 <strlen>:
    3238:	208000cc 	andi	r2,r4,3
    323c:	2011883a 	mov	r8,r4
    3240:	1000161e 	bne	r2,zero,329c <strlen+0x64>
    3244:	20c00017 	ldw	r3,0(r4)
    3248:	017fbff4 	movhi	r5,65279
    324c:	297fbfc4 	addi	r5,r5,-257
    3250:	01e02074 	movhi	r7,32897
    3254:	39e02004 	addi	r7,r7,-32640
    3258:	1945883a 	add	r2,r3,r5
    325c:	11c4703a 	and	r2,r2,r7
    3260:	00c6303a 	nor	r3,zero,r3
    3264:	1886703a 	and	r3,r3,r2
    3268:	18000c1e 	bne	r3,zero,329c <strlen+0x64>
    326c:	280d883a 	mov	r6,r5
    3270:	380b883a 	mov	r5,r7
    3274:	21000104 	addi	r4,r4,4
    3278:	20800017 	ldw	r2,0(r4)
    327c:	1187883a 	add	r3,r2,r6
    3280:	1946703a 	and	r3,r3,r5
    3284:	0084303a 	nor	r2,zero,r2
    3288:	10c4703a 	and	r2,r2,r3
    328c:	103ff926 	beq	r2,zero,3274 <strlen+0x3c>
    3290:	20800007 	ldb	r2,0(r4)
    3294:	10000326 	beq	r2,zero,32a4 <strlen+0x6c>
    3298:	21000044 	addi	r4,r4,1
    329c:	20800007 	ldb	r2,0(r4)
    32a0:	103ffd1e 	bne	r2,zero,3298 <strlen+0x60>
    32a4:	2205c83a 	sub	r2,r4,r8
    32a8:	f800283a 	ret

000032ac <__register_exitproc>:
    32ac:	defffa04 	addi	sp,sp,-24
    32b0:	00800034 	movhi	r2,0
    32b4:	1093e404 	addi	r2,r2,20368
    32b8:	dc000015 	stw	r16,0(sp)
    32bc:	14000017 	ldw	r16,0(r2)
    32c0:	dd000415 	stw	r20,16(sp)
    32c4:	2829883a 	mov	r20,r5
    32c8:	81405217 	ldw	r5,328(r16)
    32cc:	dcc00315 	stw	r19,12(sp)
    32d0:	dc800215 	stw	r18,8(sp)
    32d4:	dc400115 	stw	r17,4(sp)
    32d8:	dfc00515 	stw	ra,20(sp)
    32dc:	2023883a 	mov	r17,r4
    32e0:	3027883a 	mov	r19,r6
    32e4:	3825883a 	mov	r18,r7
    32e8:	28002526 	beq	r5,zero,3380 <__register_exitproc+0xd4>
    32ec:	29000117 	ldw	r4,4(r5)
    32f0:	008007c4 	movi	r2,31
    32f4:	11002716 	blt	r2,r4,3394 <__register_exitproc+0xe8>
    32f8:	8800101e 	bne	r17,zero,333c <__register_exitproc+0x90>
    32fc:	2105883a 	add	r2,r4,r4
    3300:	1085883a 	add	r2,r2,r2
    3304:	20c00044 	addi	r3,r4,1
    3308:	1145883a 	add	r2,r2,r5
    330c:	0009883a 	mov	r4,zero
    3310:	15000215 	stw	r20,8(r2)
    3314:	28c00115 	stw	r3,4(r5)
    3318:	2005883a 	mov	r2,r4
    331c:	dfc00517 	ldw	ra,20(sp)
    3320:	dd000417 	ldw	r20,16(sp)
    3324:	dcc00317 	ldw	r19,12(sp)
    3328:	dc800217 	ldw	r18,8(sp)
    332c:	dc400117 	ldw	r17,4(sp)
    3330:	dc000017 	ldw	r16,0(sp)
    3334:	dec00604 	addi	sp,sp,24
    3338:	f800283a 	ret
    333c:	29802204 	addi	r6,r5,136
    3340:	00800044 	movi	r2,1
    3344:	110e983a 	sll	r7,r2,r4
    3348:	30c04017 	ldw	r3,256(r6)
    334c:	2105883a 	add	r2,r4,r4
    3350:	1085883a 	add	r2,r2,r2
    3354:	1185883a 	add	r2,r2,r6
    3358:	19c6b03a 	or	r3,r3,r7
    335c:	14802015 	stw	r18,128(r2)
    3360:	14c00015 	stw	r19,0(r2)
    3364:	00800084 	movi	r2,2
    3368:	30c04015 	stw	r3,256(r6)
    336c:	88bfe31e 	bne	r17,r2,32fc <__register_exitproc+0x50>
    3370:	30804117 	ldw	r2,260(r6)
    3374:	11c4b03a 	or	r2,r2,r7
    3378:	30804115 	stw	r2,260(r6)
    337c:	003fdf06 	br	32fc <__register_exitproc+0x50>
    3380:	00800034 	movhi	r2,0
    3384:	109a4504 	addi	r2,r2,26900
    3388:	100b883a 	mov	r5,r2
    338c:	80805215 	stw	r2,328(r16)
    3390:	003fd606 	br	32ec <__register_exitproc+0x40>
    3394:	00800034 	movhi	r2,0
    3398:	10800004 	addi	r2,r2,0
    339c:	1000021e 	bne	r2,zero,33a8 <__register_exitproc+0xfc>
    33a0:	013fffc4 	movi	r4,-1
    33a4:	003fdc06 	br	3318 <__register_exitproc+0x6c>
    33a8:	01006404 	movi	r4,400
    33ac:	103ee83a 	callr	r2
    33b0:	1007883a 	mov	r3,r2
    33b4:	103ffa26 	beq	r2,zero,33a0 <__register_exitproc+0xf4>
    33b8:	80805217 	ldw	r2,328(r16)
    33bc:	180b883a 	mov	r5,r3
    33c0:	18000115 	stw	zero,4(r3)
    33c4:	18800015 	stw	r2,0(r3)
    33c8:	80c05215 	stw	r3,328(r16)
    33cc:	18006215 	stw	zero,392(r3)
    33d0:	18006315 	stw	zero,396(r3)
    33d4:	0009883a 	mov	r4,zero
    33d8:	883fc826 	beq	r17,zero,32fc <__register_exitproc+0x50>
    33dc:	003fd706 	br	333c <__register_exitproc+0x90>

000033e0 <register_fini>:
    33e0:	f800283a 	ret

000033e4 <__call_exitprocs>:
    33e4:	00800034 	movhi	r2,0
    33e8:	1093e404 	addi	r2,r2,20368
    33ec:	10800017 	ldw	r2,0(r2)
    33f0:	defff304 	addi	sp,sp,-52
    33f4:	df000b15 	stw	fp,44(sp)
    33f8:	d8800115 	stw	r2,4(sp)
    33fc:	00800034 	movhi	r2,0
    3400:	10800004 	addi	r2,r2,0
    3404:	1005003a 	cmpeq	r2,r2,zero
    3408:	d8800215 	stw	r2,8(sp)
    340c:	d8800117 	ldw	r2,4(sp)
    3410:	dd400815 	stw	r21,32(sp)
    3414:	dd000715 	stw	r20,28(sp)
    3418:	10805204 	addi	r2,r2,328
    341c:	dfc00c15 	stw	ra,48(sp)
    3420:	ddc00a15 	stw	r23,40(sp)
    3424:	dd800915 	stw	r22,36(sp)
    3428:	dcc00615 	stw	r19,24(sp)
    342c:	dc800515 	stw	r18,20(sp)
    3430:	dc400415 	stw	r17,16(sp)
    3434:	dc000315 	stw	r16,12(sp)
    3438:	282b883a 	mov	r21,r5
    343c:	2039883a 	mov	fp,r4
    3440:	d8800015 	stw	r2,0(sp)
    3444:	2829003a 	cmpeq	r20,r5,zero
    3448:	d8800117 	ldw	r2,4(sp)
    344c:	14405217 	ldw	r17,328(r2)
    3450:	88001026 	beq	r17,zero,3494 <__call_exitprocs+0xb0>
    3454:	ddc00017 	ldw	r23,0(sp)
    3458:	88800117 	ldw	r2,4(r17)
    345c:	8c802204 	addi	r18,r17,136
    3460:	143fffc4 	addi	r16,r2,-1
    3464:	80000916 	blt	r16,zero,348c <__call_exitprocs+0xa8>
    3468:	05bfffc4 	movi	r22,-1
    346c:	a000151e 	bne	r20,zero,34c4 <__call_exitprocs+0xe0>
    3470:	8409883a 	add	r4,r16,r16
    3474:	2105883a 	add	r2,r4,r4
    3478:	1485883a 	add	r2,r2,r18
    347c:	10c02017 	ldw	r3,128(r2)
    3480:	a8c01126 	beq	r21,r3,34c8 <__call_exitprocs+0xe4>
    3484:	843fffc4 	addi	r16,r16,-1
    3488:	85bff81e 	bne	r16,r22,346c <__call_exitprocs+0x88>
    348c:	d8800217 	ldw	r2,8(sp)
    3490:	10003126 	beq	r2,zero,3558 <__call_exitprocs+0x174>
    3494:	dfc00c17 	ldw	ra,48(sp)
    3498:	df000b17 	ldw	fp,44(sp)
    349c:	ddc00a17 	ldw	r23,40(sp)
    34a0:	dd800917 	ldw	r22,36(sp)
    34a4:	dd400817 	ldw	r21,32(sp)
    34a8:	dd000717 	ldw	r20,28(sp)
    34ac:	dcc00617 	ldw	r19,24(sp)
    34b0:	dc800517 	ldw	r18,20(sp)
    34b4:	dc400417 	ldw	r17,16(sp)
    34b8:	dc000317 	ldw	r16,12(sp)
    34bc:	dec00d04 	addi	sp,sp,52
    34c0:	f800283a 	ret
    34c4:	8409883a 	add	r4,r16,r16
    34c8:	88c00117 	ldw	r3,4(r17)
    34cc:	2105883a 	add	r2,r4,r4
    34d0:	1445883a 	add	r2,r2,r17
    34d4:	18ffffc4 	addi	r3,r3,-1
    34d8:	11800217 	ldw	r6,8(r2)
    34dc:	1c001526 	beq	r3,r16,3534 <__call_exitprocs+0x150>
    34e0:	10000215 	stw	zero,8(r2)
    34e4:	303fe726 	beq	r6,zero,3484 <__call_exitprocs+0xa0>
    34e8:	00c00044 	movi	r3,1
    34ec:	1c06983a 	sll	r3,r3,r16
    34f0:	90804017 	ldw	r2,256(r18)
    34f4:	8cc00117 	ldw	r19,4(r17)
    34f8:	1884703a 	and	r2,r3,r2
    34fc:	10001426 	beq	r2,zero,3550 <__call_exitprocs+0x16c>
    3500:	90804117 	ldw	r2,260(r18)
    3504:	1884703a 	and	r2,r3,r2
    3508:	10000c1e 	bne	r2,zero,353c <__call_exitprocs+0x158>
    350c:	2105883a 	add	r2,r4,r4
    3510:	1485883a 	add	r2,r2,r18
    3514:	11400017 	ldw	r5,0(r2)
    3518:	e009883a 	mov	r4,fp
    351c:	303ee83a 	callr	r6
    3520:	88800117 	ldw	r2,4(r17)
    3524:	98bfc81e 	bne	r19,r2,3448 <__call_exitprocs+0x64>
    3528:	b8800017 	ldw	r2,0(r23)
    352c:	147fd526 	beq	r2,r17,3484 <__call_exitprocs+0xa0>
    3530:	003fc506 	br	3448 <__call_exitprocs+0x64>
    3534:	8c000115 	stw	r16,4(r17)
    3538:	003fea06 	br	34e4 <__call_exitprocs+0x100>
    353c:	2105883a 	add	r2,r4,r4
    3540:	1485883a 	add	r2,r2,r18
    3544:	11000017 	ldw	r4,0(r2)
    3548:	303ee83a 	callr	r6
    354c:	003ff406 	br	3520 <__call_exitprocs+0x13c>
    3550:	303ee83a 	callr	r6
    3554:	003ff206 	br	3520 <__call_exitprocs+0x13c>
    3558:	88800117 	ldw	r2,4(r17)
    355c:	1000081e 	bne	r2,zero,3580 <__call_exitprocs+0x19c>
    3560:	89000017 	ldw	r4,0(r17)
    3564:	20000726 	beq	r4,zero,3584 <__call_exitprocs+0x1a0>
    3568:	b9000015 	stw	r4,0(r23)
    356c:	8809883a 	mov	r4,r17
    3570:	00000000 	call	0 <__reset>
    3574:	bc400017 	ldw	r17,0(r23)
    3578:	883fb71e 	bne	r17,zero,3458 <__call_exitprocs+0x74>
    357c:	003fc506 	br	3494 <__call_exitprocs+0xb0>
    3580:	89000017 	ldw	r4,0(r17)
    3584:	882f883a 	mov	r23,r17
    3588:	2023883a 	mov	r17,r4
    358c:	883fb21e 	bne	r17,zero,3458 <__call_exitprocs+0x74>
    3590:	003fc006 	br	3494 <__call_exitprocs+0xb0>

00003594 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    3594:	defffd04 	addi	sp,sp,-12
    3598:	df000215 	stw	fp,8(sp)
    359c:	df000204 	addi	fp,sp,8
    35a0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    35a4:	e0bfff17 	ldw	r2,-4(fp)
    35a8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    35ac:	e0bffe17 	ldw	r2,-8(fp)
    35b0:	1005003a 	cmpeq	r2,r2,zero
    35b4:	1000021e 	bne	r2,zero,35c0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    35b8:	002af070 	cmpltui	zero,zero,43969
    35bc:	00000106 	br	35c4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    35c0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    35c4:	e037883a 	mov	sp,fp
    35c8:	df000017 	ldw	fp,0(sp)
    35cc:	dec00104 	addi	sp,sp,4
    35d0:	f800283a 	ret

000035d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    35d4:	defffd04 	addi	sp,sp,-12
    35d8:	dfc00215 	stw	ra,8(sp)
    35dc:	df000115 	stw	fp,4(sp)
    35e0:	df000104 	addi	fp,sp,4
    35e4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    35e8:	e13fff17 	ldw	r4,-4(fp)
    35ec:	00035940 	call	3594 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    35f0:	003fff06 	br	35f0 <_exit+0x1c>
    35f4:	000033e0 	cmpeqi	zero,zero,207
