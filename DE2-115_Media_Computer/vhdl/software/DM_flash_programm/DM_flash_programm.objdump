
DM_flash_programm.elf:     file format elf32-littlenios2
DM_flash_programm.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0c000020

Program Header:
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000198 memsz 0x00000198 flags r-x
    LOAD off    0x00002000 vaddr 0x0c000000 paddr 0x0c000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00002020 vaddr 0x0c000020 paddr 0x0c000020 align 2**12
         filesz 0x00004c10 memsz 0x00004ec4 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  0c000000  0c000000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003274  0c000020  0c000020  00002020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000140  0c003294  0c003294  00005294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000185c  0c0033d4  0c0033d4  000053d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002b4  0c004c30  0c004c30  00006c30  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00006c30  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000530  00000000  00000000  00006c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000ba8  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000c118  00000000  00000000  00007d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000028dc  00000000  00000000  00013e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006c6f  00000000  00000000  00016724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b74  00000000  00000000  0001d394  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c0e  00000000  00000000  0001df08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001250  00000000  00000000  0001eb16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001fd68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000070  00000000  00000000  0001fd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00021ec0  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00021ec3  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00021ec6  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00021ec7  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00021ec8  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00021ecc  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00021ed0  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00021ed4  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00021edd  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00021ee6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  00021eef  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003b  00000000  00000000  00021efa  2**0
                  CONTENTS, READONLY
 29 .jdi          00004ecd  00000000  00000000  00021f35  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00092286  00000000  00000000  00026e02  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0c000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
0c000020 l    d  .text	00000000 .text
0c003294 l    d  .rodata	00000000 .rodata
0c0033d4 l    d  .rwdata	00000000 .rwdata
0c004c30 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0c000054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
0c0033d4 l     O .rwdata	0000000a digit_data.1473
0c004c30 l     O .bss	00000001 digit3.1472
0c004c31 l     O .bss	00000001 digit2.1471
0c004c32 l     O .bss	00000001 digit1.1470
0c004c33 l     O .bss	00000001 playState.1465
0c004c00 l     O .rwdata	00000002 currentBPM.1464
0c004c34 l     O .bss	00000004 currentBank.1463
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0c0033e0 l     O .rwdata	00001060 JTAG_UART
0c004440 l     O .rwdata	0000002c Char_LCD_16x2
0c00446c l     O .rwdata	0000002c IrDA
0c004498 l     O .rwdata	0000002c Expansion_JP5
0c0044c4 l     O .rwdata	0000002c Green_LEDs
0c0044f0 l     O .rwdata	0000002c HEX3_HEX0
0c00451c l     O .rwdata	0000002c HEX7_HEX4
0c004548 l     O .rwdata	0000002c Pushbuttons
0c004574 l     O .rwdata	0000002c Red_LEDs
0c0045a0 l     O .rwdata	0000002c Slider_Switches
0c0045cc l     O .rwdata	0000002c Serial_Port
0c0045f8 l     O .rwdata	00000034 USB
0c00462c l     O .rwdata	0000002c SD_Card
0c0005f4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0c00082c l     F .text	0000022c altera_avalon_jtag_uart_irq
0c000a58 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0c0010d4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_parallel_port.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0c0020bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0c00211c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0c0021fc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0c0023b8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0c0026b4 l     F .text	000000dc alt_file_locked
0c002918 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0c004800 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0c00307c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0c003230 l     F .text	00000040 alt_sim_halt
0c00045c g     F .text	0000006c alt_main
0c004c54 g     O .bss	00000100 alt_irq
0c00124c g     F .text	00000034 alt_up_character_lcd_send_cmd
0c001d08 g     F .text	00000090 alt_up_rs232_read_fd
00000000  w      *UND*	00000000 __errno
0c0011d0 g     F .text	0000007c get_DDRAM_addr
0c000000 g     F .entry	00000000 __reset
0c004c50 g     O .bss	00000004 errno
0c004c3c g     O .bss	00000004 alt_argv
0c00cc00 g       *ABS*	00000000 _gp
0c004680 g     O .rwdata	00000180 alt_fd_list
0c002324 g     F .text	00000094 alt_find_dev
0c002e34 g     F .text	000000a0 memcpy
0c0013e4 g     F .text	0000004c alt_up_character_lcd_write_fd
0c00247c g     F .text	00000078 alt_io_redirect
0c003294 g       *ABS*	00000000 __DTOR_END__
0c0019c4 g     F .text	00000090 alt_up_irda_write_fd
0c001c94 g     F .text	00000074 alt_up_rs232_read_data
0c0017ac g     F .text	0000003c alt_up_irda_get_used_space_in_read_FIFO
0c000c70 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0c001754 g     F .text	00000058 alt_up_irda_disable_read_interrupt
0c004c14 g     O .rwdata	00000004 alt_max_fd
0c001bfc g     F .text	00000050 alt_up_rs232_check_parity
0c0024f4 g     F .text	000001c0 alt_irq_register
0c004c2c g     O .rwdata	00000004 _global_impure_ptr
0c004ee4 g       *ABS*	00000000 __bss_end
0c002a70 g     F .text	0000010c alt_tick
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
0c0029d8 g     F .text	00000098 alt_alarm_stop
0c004c44 g     O .bss	00000004 alt_irq_active
0c0017e8 g     F .text	00000040 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	000000cc alt_irq_handler
0c004658 g     O .rwdata	00000028 alt_dev_null
0c0016cc g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0c001a94 g     F .text	00000040 alt_up_parallel_port_open_dev
0c004c0c g     O .rwdata	00000008 alt_dev_list
0c001d98 g     F .text	00000094 alt_up_rs232_write_fd
0c004ee4 g       *ABS*	00000000 end
0c001828 g     F .text	00000050 alt_up_irda_check_parity
0c000774 g     F .text	000000b8 altera_avalon_jtag_uart_init
0c003290 g       *ABS*	00000000 __CTOR_LIST__
0c800000 g       *ABS*	00000000 __alt_stack_pointer
0c001148 g     F .text	00000088 alt_avalon_timer_sc_init
0c000e94 g     F .text	00000240 altera_avalon_jtag_uart_write
0c0012f4 g     F .text	00000078 alt_up_character_lcd_write
0c003080 g     F .text	000001b0 __call_exitprocs
0c000020 g     F .text	00000038 _start
0c004c48 g     O .bss	00000004 _alt_tick_rate
0c004c4c g     O .bss	00000004 _alt_nticks
0c0004fc g     F .text	000000f8 alt_sys_init
0c001558 g     F .text	000000b0 alt_up_character_lcd_shift_display
0c002f48 g     F .text	00000134 __register_exitproc
0c001bbc g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0c001608 g     F .text	00000090 alt_up_character_lcd_erase_pos
0c000b08 g     F .text	00000074 altera_avalon_jtag_uart_close
0c00062c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0c002cbc g     F .text	000000b8 alt_get_fd
0c002dc0 g     F .text	00000074 memcmp
0c0006dc g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0c004ee4 g       *ABS*	00000000 __alt_stack_base
0c000724 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0c001700 g     F .text	00000054 alt_up_irda_enable_read_interrupt
0c000058 g     F .text	0000003c init
0c001b28 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0c002b9c g     F .text	00000120 alt_find_file
0c002148 g     F .text	000000b4 alt_dev_llist_insert
0c004c30 g       *ABS*	00000000 __bss_start
0c000094 g     F .text	000003c8 main
0c004c40 g     O .bss	00000004 alt_envp
0c000684 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0c0014a8 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0c004d54 g     O .bss	00000190 _atexit0
0c004c18 g     O .rwdata	00000004 alt_errno
0c001878 g     F .text	00000048 alt_up_irda_write_data
0c0012b4 g     F .text	00000040 alt_up_character_lcd_open_dev
0c003294 g       *ABS*	00000000 __CTOR_END__
0c001280 g     F .text	00000034 alt_up_character_lcd_init
0c003294 g       *ABS*	00000000 __DTOR_LIST__
0c001e2c g     F .text	00000040 alt_up_rs232_open_dev
0c0004c8 g     F .text	00000034 alt_irq_init
0c002978 g     F .text	00000060 alt_release_fd
0c001698 g     F .text	00000034 alt_up_character_lcd_cursor_off
0c002d74 g     F .text	00000014 atexit
0c004c28 g     O .rwdata	00000004 _impure_ptr
0c004c38 g     O .bss	00000004 alt_argc
0c0022c0 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
0c004c04 g     O .rwdata	00000008 alt_fs_list
0c001ad4 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
0c001c4c g     F .text	00000048 alt_up_rs232_write_data
0c004c30 g       *ABS*	00000000 _edata
0c004ee4 g       *ABS*	00000000 _end
0c000b7c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0c002b7c g     F .text	00000020 altera_nios2_qsys_irq_init
0c002d88 g     F .text	00000038 exit
0c0018c0 g     F .text	00000074 alt_up_irda_read_data
0c800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0c00136c g     F .text	00000078 alt_up_character_lcd_string
0c001a54 g     F .text	00000040 alt_up_irda_open_dev
0c003270 g     F .text	00000020 _exit
0c001e6c g     F .text	00000154 alt_alarm_start
0c002ed4 g     F .text	00000074 strlen
0c002790 g     F .text	00000188 open
0c001430 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0c004c1c g     O .rwdata	00000004 alt_priority_mask
0c001934 g     F .text	00000090 alt_up_irda_read_fd
0c004c20 g     O .rwdata	00000008 alt_alarm_list
0c00225c g     F .text	00000064 _do_ctors
0c001b80 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0c001fc0 g     F .text	000000fc close
00000000  w      *UND*	00000000 free



Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000171e 	bne	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c30034 	movhi	r3,3072
 134:	18d31504 	addi	r3,r3,19540
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11800017 	ldw	r6,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c30034 	movhi	r3,3072
 14c:	18d31504 	addi	r3,r3,19540
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	e17ffd17 	ldw	r5,-12(fp)
 164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 168:	0005313a 	rdctl	r2,ipending
 16c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 178:	e0bfff17 	ldw	r2,-4(fp)
 17c:	1004c03a 	cmpne	r2,r2,zero
 180:	103fe21e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffe17 	ldw	r2,-8(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fdd06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

0c000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 c000020:	06c32034 	movhi	sp,3200
    ori sp, sp, %lo(__alt_stack_pointer)
 c000024:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 c000028:	06830034 	movhi	gp,3072
    ori gp, gp, %lo(_gp)
 c00002c:	d6b30014 	ori	gp,gp,52224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 c000030:	00830034 	movhi	r2,3072
    ori r2, r2, %lo(__bss_start)
 c000034:	10930c14 	ori	r2,r2,19504

    movhi r3, %hi(__bss_end)
 c000038:	00c30034 	movhi	r3,3072
    ori r3, r3, %lo(__bss_end)
 c00003c:	18d3b914 	ori	r3,r3,20196

    beq r2, r3, 1f
 c000040:	10c00326 	beq	r2,r3,c000050 <_start+0x30>

0:
    stw zero, (r2)
 c000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 c000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 c00004c:	10fffd36 	bltu	r2,r3,c000044 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 c000050:	c00045c0 	call	c00045c <alt_main>

0c000054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 c000054:	003fff06 	br	c000054 <alt_after_alt_main>

0c000058 <init>:

void init(
    alt_up_parallel_port_dev *greenLEDs,
    alt_up_parallel_port_dev *redLEDs,
    alt_up_parallel_port_dev *hex3to0,
    alt_up_parallel_port_dev *hex7to4) {
 c000058:	defffb04 	addi	sp,sp,-20
 c00005c:	df000415 	stw	fp,16(sp)
 c000060:	df000404 	addi	fp,sp,16
 c000064:	e13ffc15 	stw	r4,-16(fp)
 c000068:	e17ffd15 	stw	r5,-12(fp)
 c00006c:	e1bffe15 	stw	r6,-8(fp)
 c000070:	e1ffff15 	stw	r7,-4(fp)

        IOWR_ALT_UP_PARALLEL_PORT_DATA(GREEN_LEDS_BASE, (1<<0));
 c000074:	00c40034 	movhi	r3,4096
 c000078:	18c00404 	addi	r3,r3,16
 c00007c:	00800044 	movi	r2,1
 c000080:	18800035 	stwio	r2,0(r3)
}
 c000084:	e037883a 	mov	sp,fp
 c000088:	df000017 	ldw	fp,0(sp)
 c00008c:	dec00104 	addi	sp,sp,4
 c000090:	f800283a 	ret

0c000094 <main>:


int main(void) {
 c000094:	defff204 	addi	sp,sp,-56
 c000098:	dfc00d15 	stw	ra,52(sp)
 c00009c:	df000c15 	stw	fp,48(sp)
 c0000a0:	df000c04 	addi	fp,sp,48
    alt_up_parallel_port_dev *greenLEDs, *redLEDs, *hex3to0, *hex7to4;

    static int currentBank = 0;
    static alt_u16 currentBPM = 120;
    static alt_u8 playState = 0; // Data which indicates if the maschine is generating an output signal
    alt_u8 keys = 0; // Data that contains the current loops pushbutton setting
 c0000a4:	e03ff705 	stb	zero,-36(fp)
    alt_u32 switches = 0; // Data that contains the current loops switch setting
 c0000a8:	e03ff615 	stw	zero,-40(fp)
    alt_u32 pattern[4] = {0}; // Data which contains all Patterns, created from switches
 c0000ac:	e03ffc15 	stw	zero,-16(fp)
 c0000b0:	e03ffd15 	stw	zero,-12(fp)
 c0000b4:	e03ffe15 	stw	zero,-8(fp)
 c0000b8:	e03fff15 	stw	zero,-4(fp)
    alt_u32 BPMData = 0; // Data that will be written to HEX3to0
 c0000bc:	e03ff515 	stw	zero,-44(fp)
    static unsigned char digit1 = 0, digit2 = 0, digit3 = 0; // Variables for computing Digit by Digit of the BPM Value
    static unsigned char digit_data[10] = {191, 134, 219, 207, 230, 237, 253, 135, 255, 239}; // Bit-Data for 7-Segment Digits

    // Initialization of HAL Ports
    greenLEDs = alt_up_parallel_port_open_dev(GREEN_LEDS_NAME);
 c0000c0:	01030034 	movhi	r4,3072
 c0000c4:	210ca504 	addi	r4,r4,12948
 c0000c8:	c001a940 	call	c001a94 <alt_up_parallel_port_open_dev>
 c0000cc:	e0bffb15 	stw	r2,-20(fp)
    redLEDs = alt_up_parallel_port_open_dev(RED_LEDS_NAME);
 c0000d0:	01030034 	movhi	r4,3072
 c0000d4:	210ca904 	addi	r4,r4,12964
 c0000d8:	c001a940 	call	c001a94 <alt_up_parallel_port_open_dev>
 c0000dc:	e0bffa15 	stw	r2,-24(fp)
    hex3to0 = alt_up_parallel_port_open_dev(HEX3_HEX0_NAME);
 c0000e0:	01030034 	movhi	r4,3072
 c0000e4:	210cad04 	addi	r4,r4,12980
 c0000e8:	c001a940 	call	c001a94 <alt_up_parallel_port_open_dev>
 c0000ec:	e0bff915 	stw	r2,-28(fp)
    hex7to4 = alt_up_parallel_port_open_dev(HEX7_HEX4_NAME);
 c0000f0:	01030034 	movhi	r4,3072
 c0000f4:	210cb104 	addi	r4,r4,12996
 c0000f8:	c001a940 	call	c001a94 <alt_up_parallel_port_open_dev>
 c0000fc:	e0bff815 	stw	r2,-32(fp)

    //Initiating functions
    init(greenLEDs, redLEDs, hex3to0, hex7to4);
 c000100:	e13ffb17 	ldw	r4,-20(fp)
 c000104:	e17ffa17 	ldw	r5,-24(fp)
 c000108:	e1bff917 	ldw	r6,-28(fp)
 c00010c:	e1fff817 	ldw	r7,-32(fp)
 c000110:	c0000580 	call	c000058 <init>
    // MAIN LOOP //
    ///////////////

    while(1){
        //Grab Inputs
    	keys = IORD_ALT_UP_PARALLEL_PORT_DATA(PUSHBUTTONS_BASE);
 c000114:	00840034 	movhi	r2,4096
 c000118:	10801404 	addi	r2,r2,80
 c00011c:	10800037 	ldwio	r2,0(r2)
 c000120:	e0bff705 	stb	r2,-36(fp)
        switches = IORD_ALT_UP_PARALLEL_PORT_DATA(SLIDER_SWITCHES_BASE);
 c000124:	00840034 	movhi	r2,4096
 c000128:	10801004 	addi	r2,r2,64
 c00012c:	10800037 	ldwio	r2,0(r2)
 c000130:	e0bff615 	stw	r2,-40(fp)

        //Play/Pause Button
        if(keys & (1<<1)){ // ^ => XOR
 c000134:	e0bff703 	ldbu	r2,-36(fp)
 c000138:	1080008c 	andi	r2,r2,2
 c00013c:	1005003a 	cmpeq	r2,r2,zero
 c000140:	1000111e 	bne	r2,zero,c000188 <main+0xf4>
            if(playState != 0) playState = 0;
 c000144:	d0a00cc3 	ldbu	r2,-32717(gp)
 c000148:	10803fcc 	andi	r2,r2,255
 c00014c:	1005003a 	cmpeq	r2,r2,zero
 c000150:	1000021e 	bne	r2,zero,c00015c <main+0xc8>
 c000154:	d0200cc5 	stb	zero,-32717(gp)
 c000158:	00000706 	br	c000178 <main+0xe4>
            else playState = 255;
 c00015c:	00bfffc4 	movi	r2,-1
 c000160:	d0a00cc5 	stb	r2,-32717(gp)
            while(keys & (1<<1)){keys = IORD_ALT_UP_PARALLEL_PORT_DATA(PUSHBUTTONS_BASE);}
 c000164:	00000406 	br	c000178 <main+0xe4>
 c000168:	00840034 	movhi	r2,4096
 c00016c:	10801404 	addi	r2,r2,80
 c000170:	10800037 	ldwio	r2,0(r2)
 c000174:	e0bff705 	stb	r2,-36(fp)
 c000178:	e0bff703 	ldbu	r2,-36(fp)
 c00017c:	1080008c 	andi	r2,r2,2
 c000180:	1004c03a 	cmpne	r2,r2,zero
 c000184:	103ff81e 	bne	r2,zero,c000168 <main+0xd4>
        }

        //BPM Up/Down
        if (keys & (1<<2)){
 c000188:	e0bff703 	ldbu	r2,-36(fp)
 c00018c:	1080010c 	andi	r2,r2,4
 c000190:	1005003a 	cmpeq	r2,r2,zero
 c000194:	1000211e 	bne	r2,zero,c00021c <main+0x188>
            if(switches & (1<<0)){
 c000198:	e0bff617 	ldw	r2,-40(fp)
 c00019c:	1080004c 	andi	r2,r2,1
 c0001a0:	10803fcc 	andi	r2,r2,255
 c0001a4:	1005003a 	cmpeq	r2,r2,zero
 c0001a8:	1000041e 	bne	r2,zero,c0001bc <main+0x128>
                currentBPM = currentBPM + STEP_BPM;
 c0001ac:	d0a0000b 	ldhu	r2,-32768(gp)
 c0001b0:	10800284 	addi	r2,r2,10
 c0001b4:	d0a0000d 	sth	r2,-32768(gp)
 c0001b8:	00000306 	br	c0001c8 <main+0x134>
            }
            else{
                currentBPM = currentBPM - STEP_BPM;
 c0001bc:	d0a0000b 	ldhu	r2,-32768(gp)
 c0001c0:	10bffd84 	addi	r2,r2,-10
 c0001c4:	d0a0000d 	sth	r2,-32768(gp)
            }

            if(currentBPM >= (MAX_BPM + STEP_BPM)) currentBPM = MAX_BPM;
 c0001c8:	d0a0000b 	ldhu	r2,-32768(gp)
 c0001cc:	10bfffcc 	andi	r2,r2,65535
 c0001d0:	10803eb0 	cmpltui	r2,r2,250
 c0001d4:	1000021e 	bne	r2,zero,c0001e0 <main+0x14c>
 c0001d8:	00803c04 	movi	r2,240
 c0001dc:	d0a0000d 	sth	r2,-32768(gp)
            if(currentBPM <= (MIN_BPM - STEP_BPM))  currentBPM = MIN_BPM;
 c0001e0:	d0a0000b 	ldhu	r2,-32768(gp)
 c0001e4:	10bfffcc 	andi	r2,r2,65535
 c0001e8:	10800ce8 	cmpgeui	r2,r2,51
 c0001ec:	1000071e 	bne	r2,zero,c00020c <main+0x178>
 c0001f0:	00800f04 	movi	r2,60
 c0001f4:	d0a0000d 	sth	r2,-32768(gp)
            while(keys & (1<<2)){keys = IORD_ALT_UP_PARALLEL_PORT_DATA(PUSHBUTTONS_BASE);}
 c0001f8:	00000406 	br	c00020c <main+0x178>
 c0001fc:	00840034 	movhi	r2,4096
 c000200:	10801404 	addi	r2,r2,80
 c000204:	10800037 	ldwio	r2,0(r2)
 c000208:	e0bff705 	stb	r2,-36(fp)
 c00020c:	e0bff703 	ldbu	r2,-36(fp)
 c000210:	1080010c 	andi	r2,r2,4
 c000214:	1004c03a 	cmpne	r2,r2,zero
 c000218:	103ff81e 	bne	r2,zero,c0001fc <main+0x168>
        }

        //Process Bank Change and save pattern
        if(keys & (1<<3)){
 c00021c:	e0bff703 	ldbu	r2,-36(fp)
 c000220:	1080020c 	andi	r2,r2,8
 c000224:	1005003a 	cmpeq	r2,r2,zero
 c000228:	1000181e 	bne	r2,zero,c00028c <main+0x1f8>
            pattern[currentBank] = switches;
 c00022c:	d0a00d17 	ldw	r2,-32716(gp)
 c000230:	1085883a 	add	r2,r2,r2
 c000234:	1085883a 	add	r2,r2,r2
 c000238:	e0fff404 	addi	r3,fp,-48
 c00023c:	10c5883a 	add	r2,r2,r3
 c000240:	10c00804 	addi	r3,r2,32
 c000244:	e0bff617 	ldw	r2,-40(fp)
 c000248:	18800015 	stw	r2,0(r3)
            currentBank++;
 c00024c:	d0a00d17 	ldw	r2,-32716(gp)
 c000250:	10800044 	addi	r2,r2,1
 c000254:	d0a00d15 	stw	r2,-32716(gp)
            if (currentBank > 3) currentBank = 0;
 c000258:	d0a00d17 	ldw	r2,-32716(gp)
 c00025c:	10800110 	cmplti	r2,r2,4
 c000260:	1000061e 	bne	r2,zero,c00027c <main+0x1e8>
 c000264:	d0200d15 	stw	zero,-32716(gp)
            while(keys & (1<<3)){keys = IORD_ALT_UP_PARALLEL_PORT_DATA(PUSHBUTTONS_BASE);}
 c000268:	00000406 	br	c00027c <main+0x1e8>
 c00026c:	00840034 	movhi	r2,4096
 c000270:	10801404 	addi	r2,r2,80
 c000274:	10800037 	ldwio	r2,0(r2)
 c000278:	e0bff705 	stb	r2,-36(fp)
 c00027c:	e0bff703 	ldbu	r2,-36(fp)
 c000280:	1080020c 	andi	r2,r2,8
 c000284:	1004c03a 	cmpne	r2,r2,zero
 c000288:	103ff81e 	bne	r2,zero,c00026c <main+0x1d8>

        /////////////////////////
        //    Output to RAM    //
        /////////////////////////

        int i = 0;
 c00028c:	e03ff415 	stw	zero,-48(fp)
        for(i = 0; i<=3; i++){
 c000290:	e03ff415 	stw	zero,-48(fp)
 c000294:	00001206 	br	c0002e0 <main+0x24c>
            IOWR_ALT_UP_PARALLEL_PORT_DATA(SRAM_BASE + OFFSET_PATTERN + (i*16), pattern[i]);
 c000298:	e0bff417 	ldw	r2,-48(fp)
 c00029c:	1006913a 	slli	r3,r2,4
 c0002a0:	00820034 	movhi	r2,2048
 c0002a4:	1885883a 	add	r2,r3,r2
 c0002a8:	1009883a 	mov	r4,r2
 c0002ac:	e0bff417 	ldw	r2,-48(fp)
 c0002b0:	1085883a 	add	r2,r2,r2
 c0002b4:	1085883a 	add	r2,r2,r2
 c0002b8:	e0fff404 	addi	r3,fp,-48
 c0002bc:	10c5883a 	add	r2,r2,r3
 c0002c0:	10800804 	addi	r2,r2,32
 c0002c4:	10800017 	ldw	r2,0(r2)
 c0002c8:	1007883a 	mov	r3,r2
 c0002cc:	2005883a 	mov	r2,r4
 c0002d0:	10c00035 	stwio	r3,0(r2)
        /////////////////////////
        //    Output to RAM    //
        /////////////////////////

        int i = 0;
        for(i = 0; i<=3; i++){
 c0002d4:	e0bff417 	ldw	r2,-48(fp)
 c0002d8:	10800044 	addi	r2,r2,1
 c0002dc:	e0bff415 	stw	r2,-48(fp)
 c0002e0:	e0bff417 	ldw	r2,-48(fp)
 c0002e4:	10800110 	cmplti	r2,r2,4
 c0002e8:	103feb1e 	bne	r2,zero,c000298 <main+0x204>
            IOWR_ALT_UP_PARALLEL_PORT_DATA(SRAM_BASE + OFFSET_PATTERN + (i*16), pattern[i]);
        }
        IOWR_ALT_UP_PARALLEL_PORT_DATA(SRAM_BASE + OFFSET_BPM, currentBPM);
 c0002ec:	d0a0000b 	ldhu	r2,-32768(gp)
 c0002f0:	10ffffcc 	andi	r3,r2,65535
 c0002f4:	00820034 	movhi	r2,2048
 c0002f8:	10801004 	addi	r2,r2,64
 c0002fc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_UP_PARALLEL_PORT_DATA(SRAM_BASE + OFFSET_PLAYPAUSE, playState);
 c000300:	d0a00cc3 	ldbu	r2,-32717(gp)
 c000304:	10c03fcc 	andi	r3,r2,255
 c000308:	00820034 	movhi	r2,2048
 c00030c:	10801404 	addi	r2,r2,80
 c000310:	10c00035 	stwio	r3,0(r2)

        //Output to red LEDs
        IOWR_ALT_UP_PARALLEL_PORT_DATA(RED_LEDS_BASE, pattern[currentBank]);
 c000314:	d0a00d17 	ldw	r2,-32716(gp)
 c000318:	1085883a 	add	r2,r2,r2
 c00031c:	1085883a 	add	r2,r2,r2
 c000320:	e0fff404 	addi	r3,fp,-48
 c000324:	10c5883a 	add	r2,r2,r3
 c000328:	10800804 	addi	r2,r2,32
 c00032c:	10800017 	ldw	r2,0(r2)
 c000330:	1007883a 	mov	r3,r2
 c000334:	00840034 	movhi	r2,4096
 c000338:	10c00035 	stwio	r3,0(r2)


        //Output to green LEDs
        IOWR_ALT_UP_PARALLEL_PORT_DATA(GREEN_LEDS_BASE, playState);
 c00033c:	d0a00cc3 	ldbu	r2,-32717(gp)
 c000340:	10c03fcc 	andi	r3,r2,255
 c000344:	00840034 	movhi	r2,4096
 c000348:	10800404 	addi	r2,r2,16
 c00034c:	10c00035 	stwio	r3,0(r2)

        //Output to 7Segment Display
        digit1 = currentBPM / 100;
 c000350:	d0a0000b 	ldhu	r2,-32768(gp)
 c000354:	10ffffcc 	andi	r3,r2,65535
 c000358:	00801904 	movi	r2,100
 c00035c:	1885203a 	divu	r2,r3,r2
 c000360:	d0a00c85 	stb	r2,-32718(gp)
        digit2 = (currentBPM % 100) / 10;
 c000364:	d0a0000b 	ldhu	r2,-32768(gp)
 c000368:	10ffffcc 	andi	r3,r2,65535
 c00036c:	00801904 	movi	r2,100
 c000370:	1885203a 	divu	r2,r3,r2
 c000374:	10801924 	muli	r2,r2,100
 c000378:	1885c83a 	sub	r2,r3,r2
 c00037c:	10ffffcc 	andi	r3,r2,65535
 c000380:	00800284 	movi	r2,10
 c000384:	1885203a 	divu	r2,r3,r2
 c000388:	d0a00c45 	stb	r2,-32719(gp)
        digit3 = ((currentBPM % 100) % 10);
 c00038c:	d0a0000b 	ldhu	r2,-32768(gp)
 c000390:	10ffffcc 	andi	r3,r2,65535
 c000394:	00801904 	movi	r2,100
 c000398:	1885203a 	divu	r2,r3,r2
 c00039c:	10801924 	muli	r2,r2,100
 c0003a0:	1885c83a 	sub	r2,r3,r2
 c0003a4:	10ffffcc 	andi	r3,r2,65535
 c0003a8:	00800284 	movi	r2,10
 c0003ac:	1885203a 	divu	r2,r3,r2
 c0003b0:	108002a4 	muli	r2,r2,10
 c0003b4:	1885c83a 	sub	r2,r3,r2
 c0003b8:	d0a00c05 	stb	r2,-32720(gp)

        BPMData = (digit_data[digit1]<<16) + (digit_data[digit2]<<8) + (digit_data[digit3]<<0);
 c0003bc:	d0a00c83 	ldbu	r2,-32718(gp)
 c0003c0:	10c03fcc 	andi	r3,r2,255
 c0003c4:	00830034 	movhi	r2,3072
 c0003c8:	108cf504 	addi	r2,r2,13268
 c0003cc:	10c5883a 	add	r2,r2,r3
 c0003d0:	10800003 	ldbu	r2,0(r2)
 c0003d4:	10803fcc 	andi	r2,r2,255
 c0003d8:	1008943a 	slli	r4,r2,16
 c0003dc:	d0a00c43 	ldbu	r2,-32719(gp)
 c0003e0:	10c03fcc 	andi	r3,r2,255
 c0003e4:	00830034 	movhi	r2,3072
 c0003e8:	108cf504 	addi	r2,r2,13268
 c0003ec:	10c5883a 	add	r2,r2,r3
 c0003f0:	10800003 	ldbu	r2,0(r2)
 c0003f4:	10803fcc 	andi	r2,r2,255
 c0003f8:	1004923a 	slli	r2,r2,8
 c0003fc:	2089883a 	add	r4,r4,r2
 c000400:	d0a00c03 	ldbu	r2,-32720(gp)
 c000404:	10c03fcc 	andi	r3,r2,255
 c000408:	00830034 	movhi	r2,3072
 c00040c:	108cf504 	addi	r2,r2,13268
 c000410:	10c5883a 	add	r2,r2,r3
 c000414:	10800003 	ldbu	r2,0(r2)
 c000418:	10803fcc 	andi	r2,r2,255
 c00041c:	2085883a 	add	r2,r4,r2
 c000420:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALT_UP_PARALLEL_PORT_DATA(HEX3_HEX0_BASE,BPMData);
 c000424:	e0fff517 	ldw	r3,-44(fp)
 c000428:	00840034 	movhi	r2,4096
 c00042c:	10800804 	addi	r2,r2,32
 c000430:	10c00035 	stwio	r3,0(r2)

        IOWR_ALT_UP_PARALLEL_PORT_DATA(HEX7_HEX4_BASE,digit_data[currentBank]<<0);
 c000434:	d0e00d17 	ldw	r3,-32716(gp)
 c000438:	00830034 	movhi	r2,3072
 c00043c:	108cf504 	addi	r2,r2,13268
 c000440:	10c5883a 	add	r2,r2,r3
 c000444:	10800003 	ldbu	r2,0(r2)
 c000448:	10c03fcc 	andi	r3,r2,255
 c00044c:	00840034 	movhi	r2,4096
 c000450:	10800c04 	addi	r2,r2,48
 c000454:	10c00035 	stwio	r3,0(r2)
    }
 c000458:	003f2e06 	br	c000114 <main+0x80>

0c00045c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 c00045c:	defffd04 	addi	sp,sp,-12
 c000460:	dfc00215 	stw	ra,8(sp)
 c000464:	df000115 	stw	fp,4(sp)
 c000468:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 c00046c:	0009883a 	mov	r4,zero
 c000470:	c0004c80 	call	c0004c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 c000474:	c0004fc0 	call	c0004fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 c000478:	01030034 	movhi	r4,3072
 c00047c:	210cb504 	addi	r4,r4,13012
 c000480:	01430034 	movhi	r5,3072
 c000484:	294cb504 	addi	r5,r5,13012
 c000488:	01830034 	movhi	r6,3072
 c00048c:	318cb504 	addi	r6,r6,13012
 c000490:	c00247c0 	call	c00247c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 c000494:	c00225c0 	call	c00225c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 c000498:	01030034 	movhi	r4,3072
 c00049c:	2108b004 	addi	r4,r4,8896
 c0004a0:	c002d740 	call	c002d74 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 c0004a4:	d1200e17 	ldw	r4,-32712(gp)
 c0004a8:	d1600f17 	ldw	r5,-32708(gp)
 c0004ac:	d1a01017 	ldw	r6,-32704(gp)
 c0004b0:	c0000940 	call	c000094 <main>
 c0004b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 c0004b8:	01000044 	movi	r4,1
 c0004bc:	c001fc00 	call	c001fc0 <close>
  exit (result);
 c0004c0:	e13fff17 	ldw	r4,-4(fp)
 c0004c4:	c002d880 	call	c002d88 <exit>

0c0004c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 c0004c8:	defffd04 	addi	sp,sp,-12
 c0004cc:	dfc00215 	stw	ra,8(sp)
 c0004d0:	df000115 	stw	fp,4(sp)
 c0004d4:	df000104 	addi	fp,sp,4
 c0004d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 c0004dc:	c002b7c0 	call	c002b7c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 c0004e0:	00800044 	movi	r2,1
 c0004e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 c0004e8:	e037883a 	mov	sp,fp
 c0004ec:	dfc00117 	ldw	ra,4(sp)
 c0004f0:	df000017 	ldw	fp,0(sp)
 c0004f4:	dec00204 	addi	sp,sp,8
 c0004f8:	f800283a 	ret

0c0004fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 c0004fc:	defffe04 	addi	sp,sp,-8
 c000500:	dfc00115 	stw	ra,4(sp)
 c000504:	df000015 	stw	fp,0(sp)
 c000508:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
 c00050c:	01040034 	movhi	r4,4096
 c000510:	21080004 	addi	r4,r4,8192
 c000514:	000b883a 	mov	r5,zero
 c000518:	000d883a 	mov	r6,zero
 c00051c:	01c00204 	movi	r7,8
 c000520:	c0011480 	call	c001148 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
 c000524:	01030034 	movhi	r4,3072
 c000528:	210d0204 	addi	r4,r4,13320
 c00052c:	000b883a 	mov	r5,zero
 c000530:	01800204 	movi	r6,8
 c000534:	c0007740 	call	c000774 <altera_avalon_jtag_uart_init>
 c000538:	01030034 	movhi	r4,3072
 c00053c:	210cf804 	addi	r4,r4,13280
 c000540:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
 c000544:	01030034 	movhi	r4,3072
 c000548:	21111004 	addi	r4,r4,17472
 c00054c:	c0012800 	call	c001280 <alt_up_character_lcd_init>
 c000550:	01030034 	movhi	r4,3072
 c000554:	21111004 	addi	r4,r4,17472
 c000558:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
 c00055c:	01030034 	movhi	r4,3072
 c000560:	21111b04 	addi	r4,r4,17516
 c000564:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
 c000568:	01030034 	movhi	r4,3072
 c00056c:	21112604 	addi	r4,r4,17560
 c000570:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
 c000574:	01030034 	movhi	r4,3072
 c000578:	21113104 	addi	r4,r4,17604
 c00057c:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
 c000580:	01030034 	movhi	r4,3072
 c000584:	21113c04 	addi	r4,r4,17648
 c000588:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
 c00058c:	01030034 	movhi	r4,3072
 c000590:	21114704 	addi	r4,r4,17692
 c000594:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
 c000598:	01030034 	movhi	r4,3072
 c00059c:	21115204 	addi	r4,r4,17736
 c0005a0:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
 c0005a4:	01030034 	movhi	r4,3072
 c0005a8:	21115d04 	addi	r4,r4,17780
 c0005ac:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
 c0005b0:	01030034 	movhi	r4,3072
 c0005b4:	21116804 	addi	r4,r4,17824
 c0005b8:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
 c0005bc:	01030034 	movhi	r4,3072
 c0005c0:	21117304 	addi	r4,r4,17868
 c0005c4:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
 c0005c8:	01030034 	movhi	r4,3072
 c0005cc:	21117e04 	addi	r4,r4,17912
 c0005d0:	c0005f40 	call	c0005f4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
 c0005d4:	01030034 	movhi	r4,3072
 c0005d8:	21118b04 	addi	r4,r4,17964
 c0005dc:	c0005f40 	call	c0005f4 <alt_dev_reg>
}
 c0005e0:	e037883a 	mov	sp,fp
 c0005e4:	dfc00117 	ldw	ra,4(sp)
 c0005e8:	df000017 	ldw	fp,0(sp)
 c0005ec:	dec00204 	addi	sp,sp,8
 c0005f0:	f800283a 	ret

0c0005f4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 c0005f4:	defffd04 	addi	sp,sp,-12
 c0005f8:	dfc00215 	stw	ra,8(sp)
 c0005fc:	df000115 	stw	fp,4(sp)
 c000600:	df000104 	addi	fp,sp,4
 c000604:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 c000608:	e13fff17 	ldw	r4,-4(fp)
 c00060c:	01430034 	movhi	r5,3072
 c000610:	29530304 	addi	r5,r5,19468
 c000614:	c0021480 	call	c002148 <alt_dev_llist_insert>
}
 c000618:	e037883a 	mov	sp,fp
 c00061c:	dfc00117 	ldw	ra,4(sp)
 c000620:	df000017 	ldw	fp,0(sp)
 c000624:	dec00204 	addi	sp,sp,8
 c000628:	f800283a 	ret

0c00062c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 c00062c:	defffa04 	addi	sp,sp,-24
 c000630:	dfc00515 	stw	ra,20(sp)
 c000634:	df000415 	stw	fp,16(sp)
 c000638:	df000404 	addi	fp,sp,16
 c00063c:	e13ffd15 	stw	r4,-12(fp)
 c000640:	e17ffe15 	stw	r5,-8(fp)
 c000644:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c000648:	e0bffd17 	ldw	r2,-12(fp)
 c00064c:	10800017 	ldw	r2,0(r2)
 c000650:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 c000654:	e0bffc17 	ldw	r2,-16(fp)
 c000658:	11000a04 	addi	r4,r2,40
 c00065c:	e0bffd17 	ldw	r2,-12(fp)
 c000660:	11c00217 	ldw	r7,8(r2)
 c000664:	e17ffe17 	ldw	r5,-8(fp)
 c000668:	e1bfff17 	ldw	r6,-4(fp)
 c00066c:	c000c700 	call	c000c70 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 c000670:	e037883a 	mov	sp,fp
 c000674:	dfc00117 	ldw	ra,4(sp)
 c000678:	df000017 	ldw	fp,0(sp)
 c00067c:	dec00204 	addi	sp,sp,8
 c000680:	f800283a 	ret

0c000684 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 c000684:	defffa04 	addi	sp,sp,-24
 c000688:	dfc00515 	stw	ra,20(sp)
 c00068c:	df000415 	stw	fp,16(sp)
 c000690:	df000404 	addi	fp,sp,16
 c000694:	e13ffd15 	stw	r4,-12(fp)
 c000698:	e17ffe15 	stw	r5,-8(fp)
 c00069c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c0006a0:	e0bffd17 	ldw	r2,-12(fp)
 c0006a4:	10800017 	ldw	r2,0(r2)
 c0006a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 c0006ac:	e0bffc17 	ldw	r2,-16(fp)
 c0006b0:	11000a04 	addi	r4,r2,40
 c0006b4:	e0bffd17 	ldw	r2,-12(fp)
 c0006b8:	11c00217 	ldw	r7,8(r2)
 c0006bc:	e17ffe17 	ldw	r5,-8(fp)
 c0006c0:	e1bfff17 	ldw	r6,-4(fp)
 c0006c4:	c000e940 	call	c000e94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 c0006c8:	e037883a 	mov	sp,fp
 c0006cc:	dfc00117 	ldw	ra,4(sp)
 c0006d0:	df000017 	ldw	fp,0(sp)
 c0006d4:	dec00204 	addi	sp,sp,8
 c0006d8:	f800283a 	ret

0c0006dc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 c0006dc:	defffc04 	addi	sp,sp,-16
 c0006e0:	dfc00315 	stw	ra,12(sp)
 c0006e4:	df000215 	stw	fp,8(sp)
 c0006e8:	df000204 	addi	fp,sp,8
 c0006ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 c0006f0:	e0bfff17 	ldw	r2,-4(fp)
 c0006f4:	10800017 	ldw	r2,0(r2)
 c0006f8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 c0006fc:	e0bffe17 	ldw	r2,-8(fp)
 c000700:	11000a04 	addi	r4,r2,40
 c000704:	e0bfff17 	ldw	r2,-4(fp)
 c000708:	11400217 	ldw	r5,8(r2)
 c00070c:	c000b080 	call	c000b08 <altera_avalon_jtag_uart_close>
}
 c000710:	e037883a 	mov	sp,fp
 c000714:	dfc00117 	ldw	ra,4(sp)
 c000718:	df000017 	ldw	fp,0(sp)
 c00071c:	dec00204 	addi	sp,sp,8
 c000720:	f800283a 	ret

0c000724 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 c000724:	defffa04 	addi	sp,sp,-24
 c000728:	dfc00515 	stw	ra,20(sp)
 c00072c:	df000415 	stw	fp,16(sp)
 c000730:	df000404 	addi	fp,sp,16
 c000734:	e13ffd15 	stw	r4,-12(fp)
 c000738:	e17ffe15 	stw	r5,-8(fp)
 c00073c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 c000740:	e0bffd17 	ldw	r2,-12(fp)
 c000744:	10800017 	ldw	r2,0(r2)
 c000748:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 c00074c:	e0bffc17 	ldw	r2,-16(fp)
 c000750:	11000a04 	addi	r4,r2,40
 c000754:	e17ffe17 	ldw	r5,-8(fp)
 c000758:	e1bfff17 	ldw	r6,-4(fp)
 c00075c:	c000b7c0 	call	c000b7c <altera_avalon_jtag_uart_ioctl>
}
 c000760:	e037883a 	mov	sp,fp
 c000764:	dfc00117 	ldw	ra,4(sp)
 c000768:	df000017 	ldw	fp,0(sp)
 c00076c:	dec00204 	addi	sp,sp,8
 c000770:	f800283a 	ret

0c000774 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 c000774:	defffb04 	addi	sp,sp,-20
 c000778:	dfc00415 	stw	ra,16(sp)
 c00077c:	df000315 	stw	fp,12(sp)
 c000780:	df000304 	addi	fp,sp,12
 c000784:	e13ffd15 	stw	r4,-12(fp)
 c000788:	e17ffe15 	stw	r5,-8(fp)
 c00078c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c000790:	e0fffd17 	ldw	r3,-12(fp)
 c000794:	00800044 	movi	r2,1
 c000798:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 c00079c:	e0bffd17 	ldw	r2,-12(fp)
 c0007a0:	10800017 	ldw	r2,0(r2)
 c0007a4:	11000104 	addi	r4,r2,4
 c0007a8:	e0bffd17 	ldw	r2,-12(fp)
 c0007ac:	10800817 	ldw	r2,32(r2)
 c0007b0:	1007883a 	mov	r3,r2
 c0007b4:	2005883a 	mov	r2,r4
 c0007b8:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 c0007bc:	e13fff17 	ldw	r4,-4(fp)
 c0007c0:	e17ffd17 	ldw	r5,-12(fp)
 c0007c4:	01830034 	movhi	r6,3072
 c0007c8:	31820b04 	addi	r6,r6,2092
 c0007cc:	c0024f40 	call	c0024f4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 c0007d0:	e0bffd17 	ldw	r2,-12(fp)
 c0007d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 c0007d8:	e0bffd17 	ldw	r2,-12(fp)
 c0007dc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c0007e0:	00830034 	movhi	r2,3072
 c0007e4:	10931204 	addi	r2,r2,19528
 c0007e8:	10800017 	ldw	r2,0(r2)
 c0007ec:	100b883a 	mov	r5,r2
 c0007f0:	01830034 	movhi	r6,3072
 c0007f4:	31829604 	addi	r6,r6,2648
 c0007f8:	e1fffd17 	ldw	r7,-12(fp)
 c0007fc:	c001e6c0 	call	c001e6c <alt_alarm_start>
 c000800:	1004403a 	cmpge	r2,r2,zero
 c000804:	1000041e 	bne	r2,zero,c000818 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 c000808:	e0fffd17 	ldw	r3,-12(fp)
 c00080c:	00a00034 	movhi	r2,32768
 c000810:	10bfffc4 	addi	r2,r2,-1
 c000814:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 c000818:	e037883a 	mov	sp,fp
 c00081c:	dfc00117 	ldw	ra,4(sp)
 c000820:	df000017 	ldw	fp,0(sp)
 c000824:	dec00204 	addi	sp,sp,8
 c000828:	f800283a 	ret

0c00082c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 c00082c:	defff704 	addi	sp,sp,-36
 c000830:	df000815 	stw	fp,32(sp)
 c000834:	df000804 	addi	fp,sp,32
 c000838:	e13ffe15 	stw	r4,-8(fp)
 c00083c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 c000840:	e0bffe17 	ldw	r2,-8(fp)
 c000844:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 c000848:	e0bffd17 	ldw	r2,-12(fp)
 c00084c:	10800017 	ldw	r2,0(r2)
 c000850:	e0bffc15 	stw	r2,-16(fp)
 c000854:	00000006 	br	c000858 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c000858:	e0bffc17 	ldw	r2,-16(fp)
 c00085c:	10800104 	addi	r2,r2,4
 c000860:	10800037 	ldwio	r2,0(r2)
 c000864:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 c000868:	e0bffb17 	ldw	r2,-20(fp)
 c00086c:	1080c00c 	andi	r2,r2,768
 c000870:	1005003a 	cmpeq	r2,r2,zero
 c000874:	1000741e 	bne	r2,zero,c000a48 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 c000878:	e0bffb17 	ldw	r2,-20(fp)
 c00087c:	1080400c 	andi	r2,r2,256
 c000880:	1005003a 	cmpeq	r2,r2,zero
 c000884:	1000351e 	bne	r2,zero,c00095c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 c000888:	00800074 	movhi	r2,1
 c00088c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c000890:	e0bffd17 	ldw	r2,-12(fp)
 c000894:	10800a17 	ldw	r2,40(r2)
 c000898:	10800044 	addi	r2,r2,1
 c00089c:	1081ffcc 	andi	r2,r2,2047
 c0008a0:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 c0008a4:	e0bffd17 	ldw	r2,-12(fp)
 c0008a8:	10c00b17 	ldw	r3,44(r2)
 c0008ac:	e0bff917 	ldw	r2,-28(fp)
 c0008b0:	18801626 	beq	r3,r2,c00090c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 c0008b4:	e0bffc17 	ldw	r2,-16(fp)
 c0008b8:	10800037 	ldwio	r2,0(r2)
 c0008bc:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 c0008c0:	e0bffa17 	ldw	r2,-24(fp)
 c0008c4:	10a0000c 	andi	r2,r2,32768
 c0008c8:	1005003a 	cmpeq	r2,r2,zero
 c0008cc:	10000f1e 	bne	r2,zero,c00090c <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 c0008d0:	e0bffd17 	ldw	r2,-12(fp)
 c0008d4:	10c00a17 	ldw	r3,40(r2)
 c0008d8:	e0bffa17 	ldw	r2,-24(fp)
 c0008dc:	1009883a 	mov	r4,r2
 c0008e0:	e0bffd17 	ldw	r2,-12(fp)
 c0008e4:	1885883a 	add	r2,r3,r2
 c0008e8:	10800e04 	addi	r2,r2,56
 c0008ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c0008f0:	e0bffd17 	ldw	r2,-12(fp)
 c0008f4:	10800a17 	ldw	r2,40(r2)
 c0008f8:	10800044 	addi	r2,r2,1
 c0008fc:	10c1ffcc 	andi	r3,r2,2047
 c000900:	e0bffd17 	ldw	r2,-12(fp)
 c000904:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 c000908:	003fe106 	br	c000890 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 c00090c:	e0bffa17 	ldw	r2,-24(fp)
 c000910:	10bfffec 	andhi	r2,r2,65535
 c000914:	1005003a 	cmpeq	r2,r2,zero
 c000918:	1000101e 	bne	r2,zero,c00095c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c00091c:	e0bffd17 	ldw	r2,-12(fp)
 c000920:	10c00817 	ldw	r3,32(r2)
 c000924:	00bfff84 	movi	r2,-2
 c000928:	1886703a 	and	r3,r3,r2
 c00092c:	e0bffd17 	ldw	r2,-12(fp)
 c000930:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 c000934:	e0bffc17 	ldw	r2,-16(fp)
 c000938:	11000104 	addi	r4,r2,4
 c00093c:	e0bffd17 	ldw	r2,-12(fp)
 c000940:	10800817 	ldw	r2,32(r2)
 c000944:	1007883a 	mov	r3,r2
 c000948:	2005883a 	mov	r2,r4
 c00094c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c000950:	e0bffc17 	ldw	r2,-16(fp)
 c000954:	10800104 	addi	r2,r2,4
 c000958:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 c00095c:	e0bffb17 	ldw	r2,-20(fp)
 c000960:	1080800c 	andi	r2,r2,512
 c000964:	1005003a 	cmpeq	r2,r2,zero
 c000968:	103fbb1e 	bne	r2,zero,c000858 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 c00096c:	e0bffb17 	ldw	r2,-20(fp)
 c000970:	10bfffec 	andhi	r2,r2,65535
 c000974:	1004d43a 	srli	r2,r2,16
 c000978:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 c00097c:	00001506 	br	c0009d4 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 c000980:	e13ffc17 	ldw	r4,-16(fp)
 c000984:	e0bffd17 	ldw	r2,-12(fp)
 c000988:	10c00d17 	ldw	r3,52(r2)
 c00098c:	e0bffd17 	ldw	r2,-12(fp)
 c000990:	1885883a 	add	r2,r3,r2
 c000994:	10820e04 	addi	r2,r2,2104
 c000998:	10800003 	ldbu	r2,0(r2)
 c00099c:	10c03fcc 	andi	r3,r2,255
 c0009a0:	18c0201c 	xori	r3,r3,128
 c0009a4:	18ffe004 	addi	r3,r3,-128
 c0009a8:	2005883a 	mov	r2,r4
 c0009ac:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c0009b0:	e0bffd17 	ldw	r2,-12(fp)
 c0009b4:	10800d17 	ldw	r2,52(r2)
 c0009b8:	10800044 	addi	r2,r2,1
 c0009bc:	10c1ffcc 	andi	r3,r2,2047
 c0009c0:	e0bffd17 	ldw	r2,-12(fp)
 c0009c4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 c0009c8:	e0bff817 	ldw	r2,-32(fp)
 c0009cc:	10bfffc4 	addi	r2,r2,-1
 c0009d0:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 c0009d4:	e0bff817 	ldw	r2,-32(fp)
 c0009d8:	1005003a 	cmpeq	r2,r2,zero
 c0009dc:	1000051e 	bne	r2,zero,c0009f4 <altera_avalon_jtag_uart_irq+0x1c8>
 c0009e0:	e0bffd17 	ldw	r2,-12(fp)
 c0009e4:	10c00d17 	ldw	r3,52(r2)
 c0009e8:	e0bffd17 	ldw	r2,-12(fp)
 c0009ec:	10800c17 	ldw	r2,48(r2)
 c0009f0:	18bfe31e 	bne	r3,r2,c000980 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 c0009f4:	e0bff817 	ldw	r2,-32(fp)
 c0009f8:	1005003a 	cmpeq	r2,r2,zero
 c0009fc:	103f961e 	bne	r2,zero,c000858 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c000a00:	e0bffd17 	ldw	r2,-12(fp)
 c000a04:	10c00817 	ldw	r3,32(r2)
 c000a08:	00bfff44 	movi	r2,-3
 c000a0c:	1886703a 	and	r3,r3,r2
 c000a10:	e0bffd17 	ldw	r2,-12(fp)
 c000a14:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c000a18:	e0bffd17 	ldw	r2,-12(fp)
 c000a1c:	10800017 	ldw	r2,0(r2)
 c000a20:	11000104 	addi	r4,r2,4
 c000a24:	e0bffd17 	ldw	r2,-12(fp)
 c000a28:	10800817 	ldw	r2,32(r2)
 c000a2c:	1007883a 	mov	r3,r2
 c000a30:	2005883a 	mov	r2,r4
 c000a34:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 c000a38:	e0bffc17 	ldw	r2,-16(fp)
 c000a3c:	10800104 	addi	r2,r2,4
 c000a40:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 c000a44:	003f8406 	br	c000858 <altera_avalon_jtag_uart_irq+0x2c>
}
 c000a48:	e037883a 	mov	sp,fp
 c000a4c:	df000017 	ldw	fp,0(sp)
 c000a50:	dec00104 	addi	sp,sp,4
 c000a54:	f800283a 	ret

0c000a58 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 c000a58:	defffc04 	addi	sp,sp,-16
 c000a5c:	df000315 	stw	fp,12(sp)
 c000a60:	df000304 	addi	fp,sp,12
 c000a64:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 c000a68:	e0bfff17 	ldw	r2,-4(fp)
 c000a6c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 c000a70:	e0bffe17 	ldw	r2,-8(fp)
 c000a74:	10800017 	ldw	r2,0(r2)
 c000a78:	10800104 	addi	r2,r2,4
 c000a7c:	10800037 	ldwio	r2,0(r2)
 c000a80:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 c000a84:	e0bffd17 	ldw	r2,-12(fp)
 c000a88:	1081000c 	andi	r2,r2,1024
 c000a8c:	1005003a 	cmpeq	r2,r2,zero
 c000a90:	10000c1e 	bne	r2,zero,c000ac4 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 c000a94:	e0bffe17 	ldw	r2,-8(fp)
 c000a98:	10800017 	ldw	r2,0(r2)
 c000a9c:	11000104 	addi	r4,r2,4
 c000aa0:	e0bffe17 	ldw	r2,-8(fp)
 c000aa4:	10800817 	ldw	r2,32(r2)
 c000aa8:	10810014 	ori	r2,r2,1024
 c000aac:	1007883a 	mov	r3,r2
 c000ab0:	2005883a 	mov	r2,r4
 c000ab4:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 c000ab8:	e0bffe17 	ldw	r2,-8(fp)
 c000abc:	10000915 	stw	zero,36(r2)
 c000ac0:	00000a06 	br	c000aec <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 c000ac4:	e0bffe17 	ldw	r2,-8(fp)
 c000ac8:	10c00917 	ldw	r3,36(r2)
 c000acc:	00a00034 	movhi	r2,32768
 c000ad0:	10bfff04 	addi	r2,r2,-4
 c000ad4:	10c00536 	bltu	r2,r3,c000aec <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 c000ad8:	e0bffe17 	ldw	r2,-8(fp)
 c000adc:	10800917 	ldw	r2,36(r2)
 c000ae0:	10c00044 	addi	r3,r2,1
 c000ae4:	e0bffe17 	ldw	r2,-8(fp)
 c000ae8:	10c00915 	stw	r3,36(r2)
 c000aec:	00830034 	movhi	r2,3072
 c000af0:	10931204 	addi	r2,r2,19528
 c000af4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 c000af8:	e037883a 	mov	sp,fp
 c000afc:	df000017 	ldw	fp,0(sp)
 c000b00:	dec00104 	addi	sp,sp,4
 c000b04:	f800283a 	ret

0c000b08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 c000b08:	defffc04 	addi	sp,sp,-16
 c000b0c:	df000315 	stw	fp,12(sp)
 c000b10:	df000304 	addi	fp,sp,12
 c000b14:	e13ffd15 	stw	r4,-12(fp)
 c000b18:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c000b1c:	00000706 	br	c000b3c <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 c000b20:	e0bffe17 	ldw	r2,-8(fp)
 c000b24:	1090000c 	andi	r2,r2,16384
 c000b28:	1005003a 	cmpeq	r2,r2,zero
 c000b2c:	1000031e 	bne	r2,zero,c000b3c <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 c000b30:	00bffd44 	movi	r2,-11
 c000b34:	e0bfff15 	stw	r2,-4(fp)
 c000b38:	00000b06 	br	c000b68 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 c000b3c:	e0bffd17 	ldw	r2,-12(fp)
 c000b40:	10c00d17 	ldw	r3,52(r2)
 c000b44:	e0bffd17 	ldw	r2,-12(fp)
 c000b48:	10800c17 	ldw	r2,48(r2)
 c000b4c:	18800526 	beq	r3,r2,c000b64 <altera_avalon_jtag_uart_close+0x5c>
 c000b50:	e0bffd17 	ldw	r2,-12(fp)
 c000b54:	10c00917 	ldw	r3,36(r2)
 c000b58:	e0bffd17 	ldw	r2,-12(fp)
 c000b5c:	10800117 	ldw	r2,4(r2)
 c000b60:	18bfef36 	bltu	r3,r2,c000b20 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 c000b64:	e03fff15 	stw	zero,-4(fp)
 c000b68:	e0bfff17 	ldw	r2,-4(fp)
}
 c000b6c:	e037883a 	mov	sp,fp
 c000b70:	df000017 	ldw	fp,0(sp)
 c000b74:	dec00104 	addi	sp,sp,4
 c000b78:	f800283a 	ret

0c000b7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 c000b7c:	defff804 	addi	sp,sp,-32
 c000b80:	df000715 	stw	fp,28(sp)
 c000b84:	df000704 	addi	fp,sp,28
 c000b88:	e13ffb15 	stw	r4,-20(fp)
 c000b8c:	e17ffc15 	stw	r5,-16(fp)
 c000b90:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 c000b94:	00bff9c4 	movi	r2,-25
 c000b98:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 c000b9c:	e0bffc17 	ldw	r2,-16(fp)
 c000ba0:	e0bfff15 	stw	r2,-4(fp)
 c000ba4:	e0ffff17 	ldw	r3,-4(fp)
 c000ba8:	189a8060 	cmpeqi	r2,r3,27137
 c000bac:	1000041e 	bne	r2,zero,c000bc0 <altera_avalon_jtag_uart_ioctl+0x44>
 c000bb0:	e0ffff17 	ldw	r3,-4(fp)
 c000bb4:	189a80a0 	cmpeqi	r2,r3,27138
 c000bb8:	10001b1e 	bne	r2,zero,c000c28 <altera_avalon_jtag_uart_ioctl+0xac>
 c000bbc:	00002706 	br	c000c5c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 c000bc0:	e0bffb17 	ldw	r2,-20(fp)
 c000bc4:	10c00117 	ldw	r3,4(r2)
 c000bc8:	00a00034 	movhi	r2,32768
 c000bcc:	10bfffc4 	addi	r2,r2,-1
 c000bd0:	18802226 	beq	r3,r2,c000c5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 c000bd4:	e0bffd17 	ldw	r2,-12(fp)
 c000bd8:	10800017 	ldw	r2,0(r2)
 c000bdc:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 c000be0:	e0bff917 	ldw	r2,-28(fp)
 c000be4:	10800090 	cmplti	r2,r2,2
 c000be8:	1000071e 	bne	r2,zero,c000c08 <altera_avalon_jtag_uart_ioctl+0x8c>
 c000bec:	e0fff917 	ldw	r3,-28(fp)
 c000bf0:	00a00034 	movhi	r2,32768
 c000bf4:	10bfffc4 	addi	r2,r2,-1
 c000bf8:	18800326 	beq	r3,r2,c000c08 <altera_avalon_jtag_uart_ioctl+0x8c>
 c000bfc:	e0bff917 	ldw	r2,-28(fp)
 c000c00:	e0bffe15 	stw	r2,-8(fp)
 c000c04:	00000306 	br	c000c14 <altera_avalon_jtag_uart_ioctl+0x98>
 c000c08:	00e00034 	movhi	r3,32768
 c000c0c:	18ffff84 	addi	r3,r3,-2
 c000c10:	e0fffe15 	stw	r3,-8(fp)
 c000c14:	e0bffb17 	ldw	r2,-20(fp)
 c000c18:	e0fffe17 	ldw	r3,-8(fp)
 c000c1c:	10c00115 	stw	r3,4(r2)
      rc = 0;
 c000c20:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 c000c24:	00000d06 	br	c000c5c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 c000c28:	e0bffb17 	ldw	r2,-20(fp)
 c000c2c:	10c00117 	ldw	r3,4(r2)
 c000c30:	00a00034 	movhi	r2,32768
 c000c34:	10bfffc4 	addi	r2,r2,-1
 c000c38:	18800826 	beq	r3,r2,c000c5c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 c000c3c:	e13ffd17 	ldw	r4,-12(fp)
 c000c40:	e0bffb17 	ldw	r2,-20(fp)
 c000c44:	10c00917 	ldw	r3,36(r2)
 c000c48:	e0bffb17 	ldw	r2,-20(fp)
 c000c4c:	10800117 	ldw	r2,4(r2)
 c000c50:	1885803a 	cmpltu	r2,r3,r2
 c000c54:	20800015 	stw	r2,0(r4)
      rc = 0;
 c000c58:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 c000c5c:	e0bffa17 	ldw	r2,-24(fp)
}
 c000c60:	e037883a 	mov	sp,fp
 c000c64:	df000017 	ldw	fp,0(sp)
 c000c68:	dec00104 	addi	sp,sp,4
 c000c6c:	f800283a 	ret

0c000c70 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 c000c70:	defff204 	addi	sp,sp,-56
 c000c74:	dfc00d15 	stw	ra,52(sp)
 c000c78:	df000c15 	stw	fp,48(sp)
 c000c7c:	df000c04 	addi	fp,sp,48
 c000c80:	e13ffb15 	stw	r4,-20(fp)
 c000c84:	e17ffc15 	stw	r5,-16(fp)
 c000c88:	e1bffd15 	stw	r6,-12(fp)
 c000c8c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 c000c90:	e0bffc17 	ldw	r2,-16(fp)
 c000c94:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c000c98:	00004806 	br	c000dbc <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 c000c9c:	e0bffb17 	ldw	r2,-20(fp)
 c000ca0:	10800a17 	ldw	r2,40(r2)
 c000ca4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 c000ca8:	e0bffb17 	ldw	r2,-20(fp)
 c000cac:	10800b17 	ldw	r2,44(r2)
 c000cb0:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 c000cb4:	e0fff717 	ldw	r3,-36(fp)
 c000cb8:	e0bff617 	ldw	r2,-40(fp)
 c000cbc:	18800536 	bltu	r3,r2,c000cd4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 c000cc0:	e0bff717 	ldw	r2,-36(fp)
 c000cc4:	e0fff617 	ldw	r3,-40(fp)
 c000cc8:	10c5c83a 	sub	r2,r2,r3
 c000ccc:	e0bff815 	stw	r2,-32(fp)
 c000cd0:	00000406 	br	c000ce4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 c000cd4:	00820004 	movi	r2,2048
 c000cd8:	e0fff617 	ldw	r3,-40(fp)
 c000cdc:	10c5c83a 	sub	r2,r2,r3
 c000ce0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 c000ce4:	e0bff817 	ldw	r2,-32(fp)
 c000ce8:	1005003a 	cmpeq	r2,r2,zero
 c000cec:	10001f1e 	bne	r2,zero,c000d6c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 c000cf0:	e0fffd17 	ldw	r3,-12(fp)
 c000cf4:	e0bff817 	ldw	r2,-32(fp)
 c000cf8:	1880022e 	bgeu	r3,r2,c000d04 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 c000cfc:	e0bffd17 	ldw	r2,-12(fp)
 c000d00:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 c000d04:	e0bffb17 	ldw	r2,-20(fp)
 c000d08:	10c00e04 	addi	r3,r2,56
 c000d0c:	e0bff617 	ldw	r2,-40(fp)
 c000d10:	1887883a 	add	r3,r3,r2
 c000d14:	e0bffa17 	ldw	r2,-24(fp)
 c000d18:	1009883a 	mov	r4,r2
 c000d1c:	180b883a 	mov	r5,r3
 c000d20:	e1bff817 	ldw	r6,-32(fp)
 c000d24:	c002e340 	call	c002e34 <memcpy>
      ptr   += n;
 c000d28:	e0fff817 	ldw	r3,-32(fp)
 c000d2c:	e0bffa17 	ldw	r2,-24(fp)
 c000d30:	10c5883a 	add	r2,r2,r3
 c000d34:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 c000d38:	e0fffd17 	ldw	r3,-12(fp)
 c000d3c:	e0bff817 	ldw	r2,-32(fp)
 c000d40:	1885c83a 	sub	r2,r3,r2
 c000d44:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c000d48:	e0fff617 	ldw	r3,-40(fp)
 c000d4c:	e0bff817 	ldw	r2,-32(fp)
 c000d50:	1885883a 	add	r2,r3,r2
 c000d54:	10c1ffcc 	andi	r3,r2,2047
 c000d58:	e0bffb17 	ldw	r2,-20(fp)
 c000d5c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 c000d60:	e0bffd17 	ldw	r2,-12(fp)
 c000d64:	10800048 	cmpgei	r2,r2,1
 c000d68:	103fcc1e 	bne	r2,zero,c000c9c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 c000d6c:	e0fffa17 	ldw	r3,-24(fp)
 c000d70:	e0bffc17 	ldw	r2,-16(fp)
 c000d74:	1880141e 	bne	r3,r2,c000dc8 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 c000d78:	e0bffe17 	ldw	r2,-8(fp)
 c000d7c:	1090000c 	andi	r2,r2,16384
 c000d80:	1004c03a 	cmpne	r2,r2,zero
 c000d84:	1000101e 	bne	r2,zero,c000dc8 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 c000d88:	e0bffb17 	ldw	r2,-20(fp)
 c000d8c:	10c00a17 	ldw	r3,40(r2)
 c000d90:	e0bff717 	ldw	r2,-36(fp)
 c000d94:	1880051e 	bne	r3,r2,c000dac <altera_avalon_jtag_uart_read+0x13c>
 c000d98:	e0bffb17 	ldw	r2,-20(fp)
 c000d9c:	10c00917 	ldw	r3,36(r2)
 c000da0:	e0bffb17 	ldw	r2,-20(fp)
 c000da4:	10800117 	ldw	r2,4(r2)
 c000da8:	18bff736 	bltu	r3,r2,c000d88 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 c000dac:	e0bffb17 	ldw	r2,-20(fp)
 c000db0:	10c00a17 	ldw	r3,40(r2)
 c000db4:	e0bff717 	ldw	r2,-36(fp)
 c000db8:	18800326 	beq	r3,r2,c000dc8 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 c000dbc:	e0bffd17 	ldw	r2,-12(fp)
 c000dc0:	10800048 	cmpgei	r2,r2,1
 c000dc4:	103fb51e 	bne	r2,zero,c000c9c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 c000dc8:	e0fffa17 	ldw	r3,-24(fp)
 c000dcc:	e0bffc17 	ldw	r2,-16(fp)
 c000dd0:	18801926 	beq	r3,r2,c000e38 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c000dd4:	0005303a 	rdctl	r2,status
 c000dd8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c000ddc:	e0fff517 	ldw	r3,-44(fp)
 c000de0:	00bfff84 	movi	r2,-2
 c000de4:	1884703a 	and	r2,r3,r2
 c000de8:	1001703a 	wrctl	status,r2
  
  return context;
 c000dec:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 c000df0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 c000df4:	e0bffb17 	ldw	r2,-20(fp)
 c000df8:	10800817 	ldw	r2,32(r2)
 c000dfc:	10c00054 	ori	r3,r2,1
 c000e00:	e0bffb17 	ldw	r2,-20(fp)
 c000e04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c000e08:	e0bffb17 	ldw	r2,-20(fp)
 c000e0c:	10800017 	ldw	r2,0(r2)
 c000e10:	11000104 	addi	r4,r2,4
 c000e14:	e0bffb17 	ldw	r2,-20(fp)
 c000e18:	10800817 	ldw	r2,32(r2)
 c000e1c:	1007883a 	mov	r3,r2
 c000e20:	2005883a 	mov	r2,r4
 c000e24:	10c00035 	stwio	r3,0(r2)
 c000e28:	e0bff917 	ldw	r2,-28(fp)
 c000e2c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c000e30:	e0bff417 	ldw	r2,-48(fp)
 c000e34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 c000e38:	e0fffa17 	ldw	r3,-24(fp)
 c000e3c:	e0bffc17 	ldw	r2,-16(fp)
 c000e40:	18800526 	beq	r3,r2,c000e58 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 c000e44:	e0fffa17 	ldw	r3,-24(fp)
 c000e48:	e0bffc17 	ldw	r2,-16(fp)
 c000e4c:	1887c83a 	sub	r3,r3,r2
 c000e50:	e0ffff15 	stw	r3,-4(fp)
 c000e54:	00000906 	br	c000e7c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 c000e58:	e0bffe17 	ldw	r2,-8(fp)
 c000e5c:	1090000c 	andi	r2,r2,16384
 c000e60:	1005003a 	cmpeq	r2,r2,zero
 c000e64:	1000031e 	bne	r2,zero,c000e74 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 c000e68:	00bffd44 	movi	r2,-11
 c000e6c:	e0bfff15 	stw	r2,-4(fp)
 c000e70:	00000206 	br	c000e7c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 c000e74:	00bffec4 	movi	r2,-5
 c000e78:	e0bfff15 	stw	r2,-4(fp)
 c000e7c:	e0bfff17 	ldw	r2,-4(fp)
}
 c000e80:	e037883a 	mov	sp,fp
 c000e84:	dfc00117 	ldw	ra,4(sp)
 c000e88:	df000017 	ldw	fp,0(sp)
 c000e8c:	dec00204 	addi	sp,sp,8
 c000e90:	f800283a 	ret

0c000e94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 c000e94:	defff204 	addi	sp,sp,-56
 c000e98:	dfc00d15 	stw	ra,52(sp)
 c000e9c:	df000c15 	stw	fp,48(sp)
 c000ea0:	df000c04 	addi	fp,sp,48
 c000ea4:	e13ffb15 	stw	r4,-20(fp)
 c000ea8:	e17ffc15 	stw	r5,-16(fp)
 c000eac:	e1bffd15 	stw	r6,-12(fp)
 c000eb0:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 c000eb4:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 c000eb8:	e0bffc17 	ldw	r2,-16(fp)
 c000ebc:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c000ec0:	00003a06 	br	c000fac <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 c000ec4:	e0bffb17 	ldw	r2,-20(fp)
 c000ec8:	10800c17 	ldw	r2,48(r2)
 c000ecc:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 c000ed0:	e0bffb17 	ldw	r2,-20(fp)
 c000ed4:	10800d17 	ldw	r2,52(r2)
 c000ed8:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 c000edc:	e0fffa17 	ldw	r3,-24(fp)
 c000ee0:	e0bff917 	ldw	r2,-28(fp)
 c000ee4:	1880062e 	bgeu	r3,r2,c000f00 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 c000ee8:	e0fff917 	ldw	r3,-28(fp)
 c000eec:	e0bffa17 	ldw	r2,-24(fp)
 c000ef0:	1885c83a 	sub	r2,r3,r2
 c000ef4:	10bfffc4 	addi	r2,r2,-1
 c000ef8:	e0bff815 	stw	r2,-32(fp)
 c000efc:	00000c06 	br	c000f30 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 c000f00:	e0bff917 	ldw	r2,-28(fp)
 c000f04:	1005003a 	cmpeq	r2,r2,zero
 c000f08:	1000051e 	bne	r2,zero,c000f20 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 c000f0c:	00820004 	movi	r2,2048
 c000f10:	e0fffa17 	ldw	r3,-24(fp)
 c000f14:	10c5c83a 	sub	r2,r2,r3
 c000f18:	e0bff815 	stw	r2,-32(fp)
 c000f1c:	00000406 	br	c000f30 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 c000f20:	0081ffc4 	movi	r2,2047
 c000f24:	e0fffa17 	ldw	r3,-24(fp)
 c000f28:	10c5c83a 	sub	r2,r2,r3
 c000f2c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 c000f30:	e0bff817 	ldw	r2,-32(fp)
 c000f34:	1005003a 	cmpeq	r2,r2,zero
 c000f38:	10001f1e 	bne	r2,zero,c000fb8 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 c000f3c:	e0fffd17 	ldw	r3,-12(fp)
 c000f40:	e0bff817 	ldw	r2,-32(fp)
 c000f44:	1880022e 	bgeu	r3,r2,c000f50 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 c000f48:	e0bffd17 	ldw	r2,-12(fp)
 c000f4c:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 c000f50:	e0bffb17 	ldw	r2,-20(fp)
 c000f54:	10c20e04 	addi	r3,r2,2104
 c000f58:	e0bffa17 	ldw	r2,-24(fp)
 c000f5c:	1885883a 	add	r2,r3,r2
 c000f60:	e0fffc17 	ldw	r3,-16(fp)
 c000f64:	1009883a 	mov	r4,r2
 c000f68:	180b883a 	mov	r5,r3
 c000f6c:	e1bff817 	ldw	r6,-32(fp)
 c000f70:	c002e340 	call	c002e34 <memcpy>
      ptr   += n;
 c000f74:	e0fff817 	ldw	r3,-32(fp)
 c000f78:	e0bffc17 	ldw	r2,-16(fp)
 c000f7c:	10c5883a 	add	r2,r2,r3
 c000f80:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 c000f84:	e0fffd17 	ldw	r3,-12(fp)
 c000f88:	e0bff817 	ldw	r2,-32(fp)
 c000f8c:	1885c83a 	sub	r2,r3,r2
 c000f90:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 c000f94:	e0fffa17 	ldw	r3,-24(fp)
 c000f98:	e0bff817 	ldw	r2,-32(fp)
 c000f9c:	1885883a 	add	r2,r3,r2
 c000fa0:	10c1ffcc 	andi	r3,r2,2047
 c000fa4:	e0bffb17 	ldw	r2,-20(fp)
 c000fa8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 c000fac:	e0bffd17 	ldw	r2,-12(fp)
 c000fb0:	10800048 	cmpgei	r2,r2,1
 c000fb4:	103fc31e 	bne	r2,zero,c000ec4 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c000fb8:	0005303a 	rdctl	r2,status
 c000fbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c000fc0:	e0fff517 	ldw	r3,-44(fp)
 c000fc4:	00bfff84 	movi	r2,-2
 c000fc8:	1884703a 	and	r2,r3,r2
 c000fcc:	1001703a 	wrctl	status,r2
  
  return context;
 c000fd0:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 c000fd4:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 c000fd8:	e0bffb17 	ldw	r2,-20(fp)
 c000fdc:	10800817 	ldw	r2,32(r2)
 c000fe0:	10c00094 	ori	r3,r2,2
 c000fe4:	e0bffb17 	ldw	r2,-20(fp)
 c000fe8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 c000fec:	e0bffb17 	ldw	r2,-20(fp)
 c000ff0:	10800017 	ldw	r2,0(r2)
 c000ff4:	11000104 	addi	r4,r2,4
 c000ff8:	e0bffb17 	ldw	r2,-20(fp)
 c000ffc:	10800817 	ldw	r2,32(r2)
 c001000:	1007883a 	mov	r3,r2
 c001004:	2005883a 	mov	r2,r4
 c001008:	10c00035 	stwio	r3,0(r2)
 c00100c:	e0bff717 	ldw	r2,-36(fp)
 c001010:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c001014:	e0bff417 	ldw	r2,-48(fp)
 c001018:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 c00101c:	e0bffd17 	ldw	r2,-12(fp)
 c001020:	10800050 	cmplti	r2,r2,1
 c001024:	1000111e 	bne	r2,zero,c00106c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 c001028:	e0bffe17 	ldw	r2,-8(fp)
 c00102c:	1090000c 	andi	r2,r2,16384
 c001030:	1004c03a 	cmpne	r2,r2,zero
 c001034:	1000101e 	bne	r2,zero,c001078 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 c001038:	e0bffb17 	ldw	r2,-20(fp)
 c00103c:	10c00d17 	ldw	r3,52(r2)
 c001040:	e0bff917 	ldw	r2,-28(fp)
 c001044:	1880051e 	bne	r3,r2,c00105c <altera_avalon_jtag_uart_write+0x1c8>
 c001048:	e0bffb17 	ldw	r2,-20(fp)
 c00104c:	10c00917 	ldw	r3,36(r2)
 c001050:	e0bffb17 	ldw	r2,-20(fp)
 c001054:	10800117 	ldw	r2,4(r2)
 c001058:	18bff736 	bltu	r3,r2,c001038 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 c00105c:	e0bffb17 	ldw	r2,-20(fp)
 c001060:	10c00d17 	ldw	r3,52(r2)
 c001064:	e0bff917 	ldw	r2,-28(fp)
 c001068:	18800326 	beq	r3,r2,c001078 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 c00106c:	e0bffd17 	ldw	r2,-12(fp)
 c001070:	10800048 	cmpgei	r2,r2,1
 c001074:	103fcd1e 	bne	r2,zero,c000fac <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 c001078:	e0fffc17 	ldw	r3,-16(fp)
 c00107c:	e0bff617 	ldw	r2,-40(fp)
 c001080:	18800526 	beq	r3,r2,c001098 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 c001084:	e0fffc17 	ldw	r3,-16(fp)
 c001088:	e0bff617 	ldw	r2,-40(fp)
 c00108c:	1887c83a 	sub	r3,r3,r2
 c001090:	e0ffff15 	stw	r3,-4(fp)
 c001094:	00000906 	br	c0010bc <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 c001098:	e0bffe17 	ldw	r2,-8(fp)
 c00109c:	1090000c 	andi	r2,r2,16384
 c0010a0:	1005003a 	cmpeq	r2,r2,zero
 c0010a4:	1000031e 	bne	r2,zero,c0010b4 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 c0010a8:	00bffd44 	movi	r2,-11
 c0010ac:	e0bfff15 	stw	r2,-4(fp)
 c0010b0:	00000206 	br	c0010bc <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 c0010b4:	00bffec4 	movi	r2,-5
 c0010b8:	e0bfff15 	stw	r2,-4(fp)
 c0010bc:	e0bfff17 	ldw	r2,-4(fp)
}
 c0010c0:	e037883a 	mov	sp,fp
 c0010c4:	dfc00117 	ldw	ra,4(sp)
 c0010c8:	df000017 	ldw	fp,0(sp)
 c0010cc:	dec00204 	addi	sp,sp,8
 c0010d0:	f800283a 	ret

0c0010d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 c0010d4:	defff904 	addi	sp,sp,-28
 c0010d8:	dfc00615 	stw	ra,24(sp)
 c0010dc:	df000515 	stw	fp,20(sp)
 c0010e0:	df000504 	addi	fp,sp,20
 c0010e4:	e13ffe15 	stw	r4,-8(fp)
 c0010e8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 c0010ec:	e0bffe17 	ldw	r2,-8(fp)
 c0010f0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 c0010f4:	e0bffe17 	ldw	r2,-8(fp)
 c0010f8:	10800104 	addi	r2,r2,4
 c0010fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c001100:	0005303a 	rdctl	r2,status
 c001104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c001108:	e0fffc17 	ldw	r3,-16(fp)
 c00110c:	00bfff84 	movi	r2,-2
 c001110:	1884703a 	and	r2,r3,r2
 c001114:	1001703a 	wrctl	status,r2
  
  return context;
 c001118:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 c00111c:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 c001120:	c002a700 	call	c002a70 <alt_tick>
 c001124:	e0bffd17 	ldw	r2,-12(fp)
 c001128:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c00112c:	e0bffb17 	ldw	r2,-20(fp)
 c001130:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 c001134:	e037883a 	mov	sp,fp
 c001138:	dfc00117 	ldw	ra,4(sp)
 c00113c:	df000017 	ldw	fp,0(sp)
 c001140:	dec00204 	addi	sp,sp,8
 c001144:	f800283a 	ret

0c001148 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 c001148:	defff904 	addi	sp,sp,-28
 c00114c:	dfc00615 	stw	ra,24(sp)
 c001150:	df000515 	stw	fp,20(sp)
 c001154:	df000504 	addi	fp,sp,20
 c001158:	e13ffc15 	stw	r4,-16(fp)
 c00115c:	e17ffd15 	stw	r5,-12(fp)
 c001160:	e1bffe15 	stw	r6,-8(fp)
 c001164:	e1ffff15 	stw	r7,-4(fp)
 c001168:	e0bfff17 	ldw	r2,-4(fp)
 c00116c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 c001170:	00830034 	movhi	r2,3072
 c001174:	10931204 	addi	r2,r2,19528
 c001178:	10800017 	ldw	r2,0(r2)
 c00117c:	1004c03a 	cmpne	r2,r2,zero
 c001180:	1000041e 	bne	r2,zero,c001194 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 c001184:	00c30034 	movhi	r3,3072
 c001188:	18d31204 	addi	r3,r3,19528
 c00118c:	e0bffb17 	ldw	r2,-20(fp)
 c001190:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 c001194:	e0bffc17 	ldw	r2,-16(fp)
 c001198:	10800104 	addi	r2,r2,4
 c00119c:	1007883a 	mov	r3,r2
 c0011a0:	008001c4 	movi	r2,7
 c0011a4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 c0011a8:	e13ffe17 	ldw	r4,-8(fp)
 c0011ac:	e17ffc17 	ldw	r5,-16(fp)
 c0011b0:	01830034 	movhi	r6,3072
 c0011b4:	31843504 	addi	r6,r6,4308
 c0011b8:	c0024f40 	call	c0024f4 <alt_irq_register>
#endif  
}
 c0011bc:	e037883a 	mov	sp,fp
 c0011c0:	dfc00117 	ldw	ra,4(sp)
 c0011c4:	df000017 	ldw	fp,0(sp)
 c0011c8:	dec00204 	addi	sp,sp,8
 c0011cc:	f800283a 	ret

0c0011d0 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 c0011d0:	defffc04 	addi	sp,sp,-16
 c0011d4:	df000315 	stw	fp,12(sp)
 c0011d8:	df000304 	addi	fp,sp,12
 c0011dc:	e13ffe15 	stw	r4,-8(fp)
 c0011e0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 c0011e4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 c0011e8:	e0bfff17 	ldw	r2,-4(fp)
 c0011ec:	1004c03a 	cmpne	r2,r2,zero
 c0011f0:	1000061e 	bne	r2,zero,c00120c <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 c0011f4:	e0bffe17 	ldw	r2,-8(fp)
 c0011f8:	1007883a 	mov	r3,r2
 c0011fc:	e0bffd03 	ldbu	r2,-12(fp)
 c001200:	10c4b03a 	or	r2,r2,r3
 c001204:	e0bffd05 	stb	r2,-12(fp)
 c001208:	00000806 	br	c00122c <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 c00120c:	e0bffe17 	ldw	r2,-8(fp)
 c001210:	1007883a 	mov	r3,r2
 c001214:	e0bffd03 	ldbu	r2,-12(fp)
 c001218:	10c4b03a 	or	r2,r2,r3
 c00121c:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 c001220:	e0bffd03 	ldbu	r2,-12(fp)
 c001224:	10801014 	ori	r2,r2,64
 c001228:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 c00122c:	e0fffd03 	ldbu	r3,-12(fp)
 c001230:	00bfe004 	movi	r2,-128
 c001234:	1884b03a 	or	r2,r3,r2
 c001238:	10803fcc 	andi	r2,r2,255
}
 c00123c:	e037883a 	mov	sp,fp
 c001240:	df000017 	ldw	fp,0(sp)
 c001244:	dec00104 	addi	sp,sp,4
 c001248:	f800283a 	ret

0c00124c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 c00124c:	defffd04 	addi	sp,sp,-12
 c001250:	df000215 	stw	fp,8(sp)
 c001254:	df000204 	addi	fp,sp,8
 c001258:	e13ffe15 	stw	r4,-8(fp)
 c00125c:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 c001260:	e0bffe17 	ldw	r2,-8(fp)
 c001264:	10800a17 	ldw	r2,40(r2)
 c001268:	e0ffff03 	ldbu	r3,-4(fp)
 c00126c:	10c00025 	stbio	r3,0(r2)
}
 c001270:	e037883a 	mov	sp,fp
 c001274:	df000017 	ldw	fp,0(sp)
 c001278:	dec00104 	addi	sp,sp,4
 c00127c:	f800283a 	ret

0c001280 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 c001280:	defffe04 	addi	sp,sp,-8
 c001284:	df000115 	stw	fp,4(sp)
 c001288:	df000104 	addi	fp,sp,4
 c00128c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 c001290:	e0bfff17 	ldw	r2,-4(fp)
 c001294:	10800a17 	ldw	r2,40(r2)
 c001298:	1007883a 	mov	r3,r2
 c00129c:	00800044 	movi	r2,1
 c0012a0:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 c0012a4:	e037883a 	mov	sp,fp
 c0012a8:	df000017 	ldw	fp,0(sp)
 c0012ac:	dec00104 	addi	sp,sp,4
 c0012b0:	f800283a 	ret

0c0012b4 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 c0012b4:	defffc04 	addi	sp,sp,-16
 c0012b8:	dfc00315 	stw	ra,12(sp)
 c0012bc:	df000215 	stw	fp,8(sp)
 c0012c0:	df000204 	addi	fp,sp,8
 c0012c4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 c0012c8:	e13fff17 	ldw	r4,-4(fp)
 c0012cc:	01430034 	movhi	r5,3072
 c0012d0:	29530304 	addi	r5,r5,19468
 c0012d4:	c0023240 	call	c002324 <alt_find_dev>
 c0012d8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 c0012dc:	e0bffe17 	ldw	r2,-8(fp)
}
 c0012e0:	e037883a 	mov	sp,fp
 c0012e4:	dfc00117 	ldw	ra,4(sp)
 c0012e8:	df000017 	ldw	fp,0(sp)
 c0012ec:	dec00204 	addi	sp,sp,8
 c0012f0:	f800283a 	ret

0c0012f4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 c0012f4:	defffb04 	addi	sp,sp,-20
 c0012f8:	df000415 	stw	fp,16(sp)
 c0012fc:	df000404 	addi	fp,sp,16
 c001300:	e13ffd15 	stw	r4,-12(fp)
 c001304:	e17ffe15 	stw	r5,-8(fp)
 c001308:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 c00130c:	e03ffc15 	stw	zero,-16(fp)
 c001310:	00000f06 	br	c001350 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 c001314:	e0bffd17 	ldw	r2,-12(fp)
 c001318:	10800a17 	ldw	r2,40(r2)
 c00131c:	11000044 	addi	r4,r2,1
 c001320:	e0fffc17 	ldw	r3,-16(fp)
 c001324:	e0bffe17 	ldw	r2,-8(fp)
 c001328:	1885883a 	add	r2,r3,r2
 c00132c:	10800003 	ldbu	r2,0(r2)
 c001330:	10c03fcc 	andi	r3,r2,255
 c001334:	18c0201c 	xori	r3,r3,128
 c001338:	18ffe004 	addi	r3,r3,-128
 c00133c:	2005883a 	mov	r2,r4
 c001340:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 c001344:	e0bffc17 	ldw	r2,-16(fp)
 c001348:	10800044 	addi	r2,r2,1
 c00134c:	e0bffc15 	stw	r2,-16(fp)
 c001350:	e0fffc17 	ldw	r3,-16(fp)
 c001354:	e0bfff17 	ldw	r2,-4(fp)
 c001358:	18bfee36 	bltu	r3,r2,c001314 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 c00135c:	e037883a 	mov	sp,fp
 c001360:	df000017 	ldw	fp,0(sp)
 c001364:	dec00104 	addi	sp,sp,4
 c001368:	f800283a 	ret

0c00136c <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 c00136c:	defffd04 	addi	sp,sp,-12
 c001370:	df000215 	stw	fp,8(sp)
 c001374:	df000204 	addi	fp,sp,8
 c001378:	e13ffe15 	stw	r4,-8(fp)
 c00137c:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 c001380:	00000d06 	br	c0013b8 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 c001384:	e0bffe17 	ldw	r2,-8(fp)
 c001388:	10800a17 	ldw	r2,40(r2)
 c00138c:	11000044 	addi	r4,r2,1
 c001390:	e0bfff17 	ldw	r2,-4(fp)
 c001394:	10800003 	ldbu	r2,0(r2)
 c001398:	10c03fcc 	andi	r3,r2,255
 c00139c:	18c0201c 	xori	r3,r3,128
 c0013a0:	18ffe004 	addi	r3,r3,-128
 c0013a4:	2005883a 	mov	r2,r4
 c0013a8:	10c00025 	stbio	r3,0(r2)
		++ptr;
 c0013ac:	e0bfff17 	ldw	r2,-4(fp)
 c0013b0:	10800044 	addi	r2,r2,1
 c0013b4:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 c0013b8:	e0bfff17 	ldw	r2,-4(fp)
 c0013bc:	10800003 	ldbu	r2,0(r2)
 c0013c0:	10803fcc 	andi	r2,r2,255
 c0013c4:	1080201c 	xori	r2,r2,128
 c0013c8:	10bfe004 	addi	r2,r2,-128
 c0013cc:	1004c03a 	cmpne	r2,r2,zero
 c0013d0:	103fec1e 	bne	r2,zero,c001384 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 c0013d4:	e037883a 	mov	sp,fp
 c0013d8:	df000017 	ldw	fp,0(sp)
 c0013dc:	dec00104 	addi	sp,sp,4
 c0013e0:	f800283a 	ret

0c0013e4 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 c0013e4:	defffb04 	addi	sp,sp,-20
 c0013e8:	dfc00415 	stw	ra,16(sp)
 c0013ec:	df000315 	stw	fp,12(sp)
 c0013f0:	df000304 	addi	fp,sp,12
 c0013f4:	e13ffd15 	stw	r4,-12(fp)
 c0013f8:	e17ffe15 	stw	r5,-8(fp)
 c0013fc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 c001400:	e0bffd17 	ldw	r2,-12(fp)
 c001404:	10800017 	ldw	r2,0(r2)
 c001408:	1009883a 	mov	r4,r2
 c00140c:	e1bfff17 	ldw	r6,-4(fp)
 c001410:	e17ffe17 	ldw	r5,-8(fp)
 c001414:	c0012f40 	call	c0012f4 <alt_up_character_lcd_write>
	return 0;
 c001418:	0005883a 	mov	r2,zero
}
 c00141c:	e037883a 	mov	sp,fp
 c001420:	dfc00117 	ldw	ra,4(sp)
 c001424:	df000017 	ldw	fp,0(sp)
 c001428:	dec00204 	addi	sp,sp,8
 c00142c:	f800283a 	ret

0c001430 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 c001430:	defff904 	addi	sp,sp,-28
 c001434:	dfc00615 	stw	ra,24(sp)
 c001438:	df000515 	stw	fp,20(sp)
 c00143c:	df000504 	addi	fp,sp,20
 c001440:	e13ffc15 	stw	r4,-16(fp)
 c001444:	e17ffd15 	stw	r5,-12(fp)
 c001448:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 c00144c:	e0bffd17 	ldw	r2,-12(fp)
 c001450:	10800a28 	cmpgeui	r2,r2,40
 c001454:	1000031e 	bne	r2,zero,c001464 <alt_up_character_lcd_set_cursor_pos+0x34>
 c001458:	e0bffe17 	ldw	r2,-8(fp)
 c00145c:	108000b0 	cmpltui	r2,r2,2
 c001460:	1000031e 	bne	r2,zero,c001470 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 c001464:	00bfffc4 	movi	r2,-1
 c001468:	e0bfff15 	stw	r2,-4(fp)
 c00146c:	00000806 	br	c001490 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 c001470:	e13ffd17 	ldw	r4,-12(fp)
 c001474:	e17ffe17 	ldw	r5,-8(fp)
 c001478:	c0011d00 	call	c0011d0 <get_DDRAM_addr>
 c00147c:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 c001480:	e17ffb03 	ldbu	r5,-20(fp)
 c001484:	e13ffc17 	ldw	r4,-16(fp)
 c001488:	c00124c0 	call	c00124c <alt_up_character_lcd_send_cmd>
	return 0;
 c00148c:	e03fff15 	stw	zero,-4(fp)
 c001490:	e0bfff17 	ldw	r2,-4(fp)
}
 c001494:	e037883a 	mov	sp,fp
 c001498:	dfc00117 	ldw	ra,4(sp)
 c00149c:	df000017 	ldw	fp,0(sp)
 c0014a0:	dec00204 	addi	sp,sp,8
 c0014a4:	f800283a 	ret

0c0014a8 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 c0014a8:	defff904 	addi	sp,sp,-28
 c0014ac:	dfc00615 	stw	ra,24(sp)
 c0014b0:	df000515 	stw	fp,20(sp)
 c0014b4:	df000504 	addi	fp,sp,20
 c0014b8:	e13ffc15 	stw	r4,-16(fp)
 c0014bc:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 c0014c0:	e0bffd17 	ldw	r2,-12(fp)
 c0014c4:	1005003a 	cmpeq	r2,r2,zero
 c0014c8:	10001e1e 	bne	r2,zero,c001544 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 c0014cc:	e0bffd17 	ldw	r2,-12(fp)
 c0014d0:	10800050 	cmplti	r2,r2,1
 c0014d4:	1000031e 	bne	r2,zero,c0014e4 <alt_up_character_lcd_shift_cursor+0x3c>
 c0014d8:	00800504 	movi	r2,20
 c0014dc:	e0bfff05 	stb	r2,-4(fp)
 c0014e0:	00000206 	br	c0014ec <alt_up_character_lcd_shift_cursor+0x44>
 c0014e4:	00c00404 	movi	r3,16
 c0014e8:	e0ffff05 	stb	r3,-4(fp)
 c0014ec:	e0bfff03 	ldbu	r2,-4(fp)
 c0014f0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 c0014f4:	e0fffd17 	ldw	r3,-12(fp)
 c0014f8:	e0fffe15 	stw	r3,-8(fp)
 c0014fc:	e0fffe17 	ldw	r3,-8(fp)
 c001500:	1804403a 	cmpge	r2,r3,zero
 c001504:	1000031e 	bne	r2,zero,c001514 <alt_up_character_lcd_shift_cursor+0x6c>
 c001508:	e0bffe17 	ldw	r2,-8(fp)
 c00150c:	0085c83a 	sub	r2,zero,r2
 c001510:	e0bffe15 	stw	r2,-8(fp)
 c001514:	e0fffe17 	ldw	r3,-8(fp)
 c001518:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 c00151c:	00000306 	br	c00152c <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 c001520:	e17ffb43 	ldbu	r5,-19(fp)
 c001524:	e13ffc17 	ldw	r4,-16(fp)
 c001528:	c00124c0 	call	c00124c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 c00152c:	e0bffb03 	ldbu	r2,-20(fp)
 c001530:	10bfffc4 	addi	r2,r2,-1
 c001534:	e0bffb05 	stb	r2,-20(fp)
 c001538:	e0bffb03 	ldbu	r2,-20(fp)
 c00153c:	10803fd8 	cmpnei	r2,r2,255
 c001540:	103ff71e 	bne	r2,zero,c001520 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 c001544:	e037883a 	mov	sp,fp
 c001548:	dfc00117 	ldw	ra,4(sp)
 c00154c:	df000017 	ldw	fp,0(sp)
 c001550:	dec00204 	addi	sp,sp,8
 c001554:	f800283a 	ret

0c001558 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 c001558:	defff904 	addi	sp,sp,-28
 c00155c:	dfc00615 	stw	ra,24(sp)
 c001560:	df000515 	stw	fp,20(sp)
 c001564:	df000504 	addi	fp,sp,20
 c001568:	e13ffc15 	stw	r4,-16(fp)
 c00156c:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 c001570:	e0bffd17 	ldw	r2,-12(fp)
 c001574:	1005003a 	cmpeq	r2,r2,zero
 c001578:	10001e1e 	bne	r2,zero,c0015f4 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 c00157c:	e0bffd17 	ldw	r2,-12(fp)
 c001580:	10800050 	cmplti	r2,r2,1
 c001584:	1000031e 	bne	r2,zero,c001594 <alt_up_character_lcd_shift_display+0x3c>
 c001588:	00800704 	movi	r2,28
 c00158c:	e0bfff05 	stb	r2,-4(fp)
 c001590:	00000206 	br	c00159c <alt_up_character_lcd_shift_display+0x44>
 c001594:	00c00604 	movi	r3,24
 c001598:	e0ffff05 	stb	r3,-4(fp)
 c00159c:	e0bfff03 	ldbu	r2,-4(fp)
 c0015a0:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 c0015a4:	e0fffd17 	ldw	r3,-12(fp)
 c0015a8:	e0fffe15 	stw	r3,-8(fp)
 c0015ac:	e0fffe17 	ldw	r3,-8(fp)
 c0015b0:	1804403a 	cmpge	r2,r3,zero
 c0015b4:	1000031e 	bne	r2,zero,c0015c4 <alt_up_character_lcd_shift_display+0x6c>
 c0015b8:	e0bffe17 	ldw	r2,-8(fp)
 c0015bc:	0085c83a 	sub	r2,zero,r2
 c0015c0:	e0bffe15 	stw	r2,-8(fp)
 c0015c4:	e0fffe17 	ldw	r3,-8(fp)
 c0015c8:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 c0015cc:	00000306 	br	c0015dc <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 c0015d0:	e17ffb43 	ldbu	r5,-19(fp)
 c0015d4:	e13ffc17 	ldw	r4,-16(fp)
 c0015d8:	c00124c0 	call	c00124c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 c0015dc:	e0bffb03 	ldbu	r2,-20(fp)
 c0015e0:	10bfffc4 	addi	r2,r2,-1
 c0015e4:	e0bffb05 	stb	r2,-20(fp)
 c0015e8:	e0bffb03 	ldbu	r2,-20(fp)
 c0015ec:	10803fd8 	cmpnei	r2,r2,255
 c0015f0:	103ff71e 	bne	r2,zero,c0015d0 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 c0015f4:	e037883a 	mov	sp,fp
 c0015f8:	dfc00117 	ldw	ra,4(sp)
 c0015fc:	df000017 	ldw	fp,0(sp)
 c001600:	dec00204 	addi	sp,sp,8
 c001604:	f800283a 	ret

0c001608 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 c001608:	defff904 	addi	sp,sp,-28
 c00160c:	dfc00615 	stw	ra,24(sp)
 c001610:	df000515 	stw	fp,20(sp)
 c001614:	df000504 	addi	fp,sp,20
 c001618:	e13ffc15 	stw	r4,-16(fp)
 c00161c:	e17ffd15 	stw	r5,-12(fp)
 c001620:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 c001624:	e0bffd17 	ldw	r2,-12(fp)
 c001628:	10800a28 	cmpgeui	r2,r2,40
 c00162c:	1000031e 	bne	r2,zero,c00163c <alt_up_character_lcd_erase_pos+0x34>
 c001630:	e0bffe17 	ldw	r2,-8(fp)
 c001634:	108000b0 	cmpltui	r2,r2,2
 c001638:	1000031e 	bne	r2,zero,c001648 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 c00163c:	00bfffc4 	movi	r2,-1
 c001640:	e0bfff15 	stw	r2,-4(fp)
 c001644:	00000e06 	br	c001680 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 c001648:	e13ffd17 	ldw	r4,-12(fp)
 c00164c:	e17ffe17 	ldw	r5,-8(fp)
 c001650:	c0011d00 	call	c0011d0 <get_DDRAM_addr>
 c001654:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 c001658:	e17ffb03 	ldbu	r5,-20(fp)
 c00165c:	e13ffc17 	ldw	r4,-16(fp)
 c001660:	c00124c0 	call	c00124c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 c001664:	e0bffc17 	ldw	r2,-16(fp)
 c001668:	10800a17 	ldw	r2,40(r2)
 c00166c:	10800044 	addi	r2,r2,1
 c001670:	1007883a 	mov	r3,r2
 c001674:	00800084 	movi	r2,2
 c001678:	18800025 	stbio	r2,0(r3)
	return 0;
 c00167c:	e03fff15 	stw	zero,-4(fp)
 c001680:	e0bfff17 	ldw	r2,-4(fp)
}
 c001684:	e037883a 	mov	sp,fp
 c001688:	dfc00117 	ldw	ra,4(sp)
 c00168c:	df000017 	ldw	fp,0(sp)
 c001690:	dec00204 	addi	sp,sp,8
 c001694:	f800283a 	ret

0c001698 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 c001698:	defffd04 	addi	sp,sp,-12
 c00169c:	dfc00215 	stw	ra,8(sp)
 c0016a0:	df000115 	stw	fp,4(sp)
 c0016a4:	df000104 	addi	fp,sp,4
 c0016a8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 c0016ac:	e13fff17 	ldw	r4,-4(fp)
 c0016b0:	01400304 	movi	r5,12
 c0016b4:	c00124c0 	call	c00124c <alt_up_character_lcd_send_cmd>
}
 c0016b8:	e037883a 	mov	sp,fp
 c0016bc:	dfc00117 	ldw	ra,4(sp)
 c0016c0:	df000017 	ldw	fp,0(sp)
 c0016c4:	dec00204 	addi	sp,sp,8
 c0016c8:	f800283a 	ret

0c0016cc <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 c0016cc:	defffd04 	addi	sp,sp,-12
 c0016d0:	dfc00215 	stw	ra,8(sp)
 c0016d4:	df000115 	stw	fp,4(sp)
 c0016d8:	df000104 	addi	fp,sp,4
 c0016dc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 c0016e0:	e13fff17 	ldw	r4,-4(fp)
 c0016e4:	014003c4 	movi	r5,15
 c0016e8:	c00124c0 	call	c00124c <alt_up_character_lcd_send_cmd>
}
 c0016ec:	e037883a 	mov	sp,fp
 c0016f0:	dfc00117 	ldw	ra,4(sp)
 c0016f4:	df000017 	ldw	fp,0(sp)
 c0016f8:	dec00204 	addi	sp,sp,8
 c0016fc:	f800283a 	ret

0c001700 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
 c001700:	defffd04 	addi	sp,sp,-12
 c001704:	df000215 	stw	fp,8(sp)
 c001708:	df000204 	addi	fp,sp,8
 c00170c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
 c001710:	e0bfff17 	ldw	r2,-4(fp)
 c001714:	10800a17 	ldw	r2,40(r2)
 c001718:	10800104 	addi	r2,r2,4
 c00171c:	10800037 	ldwio	r2,0(r2)
 c001720:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
 c001724:	e0bffe17 	ldw	r2,-8(fp)
 c001728:	10800054 	ori	r2,r2,1
 c00172c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
 c001730:	e0bfff17 	ldw	r2,-4(fp)
 c001734:	10800a17 	ldw	r2,40(r2)
 c001738:	10800104 	addi	r2,r2,4
 c00173c:	e0fffe17 	ldw	r3,-8(fp)
 c001740:	10c00035 	stwio	r3,0(r2)
}
 c001744:	e037883a 	mov	sp,fp
 c001748:	df000017 	ldw	fp,0(sp)
 c00174c:	dec00104 	addi	sp,sp,4
 c001750:	f800283a 	ret

0c001754 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
 c001754:	defffd04 	addi	sp,sp,-12
 c001758:	df000215 	stw	fp,8(sp)
 c00175c:	df000204 	addi	fp,sp,8
 c001760:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
 c001764:	e0bfff17 	ldw	r2,-4(fp)
 c001768:	10800a17 	ldw	r2,40(r2)
 c00176c:	10800104 	addi	r2,r2,4
 c001770:	10800037 	ldwio	r2,0(r2)
 c001774:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
 c001778:	e0fffe17 	ldw	r3,-8(fp)
 c00177c:	00bfff84 	movi	r2,-2
 c001780:	1884703a 	and	r2,r3,r2
 c001784:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
 c001788:	e0bfff17 	ldw	r2,-4(fp)
 c00178c:	10800a17 	ldw	r2,40(r2)
 c001790:	10800104 	addi	r2,r2,4
 c001794:	e0fffe17 	ldw	r3,-8(fp)
 c001798:	10c00035 	stwio	r3,0(r2)
}
 c00179c:	e037883a 	mov	sp,fp
 c0017a0:	df000017 	ldw	fp,0(sp)
 c0017a4:	dec00104 	addi	sp,sp,4
 c0017a8:	f800283a 	ret

0c0017ac <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
 c0017ac:	defffd04 	addi	sp,sp,-12
 c0017b0:	df000215 	stw	fp,8(sp)
 c0017b4:	df000204 	addi	fp,sp,8
 c0017b8:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 c0017bc:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
 c0017c0:	e0bfff17 	ldw	r2,-4(fp)
 c0017c4:	10800a17 	ldw	r2,40(r2)
 c0017c8:	10800084 	addi	r2,r2,2
 c0017cc:	1080002b 	ldhuio	r2,0(r2)
 c0017d0:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
 c0017d4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 c0017d8:	e037883a 	mov	sp,fp
 c0017dc:	df000017 	ldw	fp,0(sp)
 c0017e0:	dec00104 	addi	sp,sp,4
 c0017e4:	f800283a 	ret

0c0017e8 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
 c0017e8:	defffd04 	addi	sp,sp,-12
 c0017ec:	df000215 	stw	fp,8(sp)
 c0017f0:	df000204 	addi	fp,sp,8
 c0017f4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
 c0017f8:	e0bfff17 	ldw	r2,-4(fp)
 c0017fc:	10800a17 	ldw	r2,40(r2)
 c001800:	10800104 	addi	r2,r2,4
 c001804:	10800037 	ldwio	r2,0(r2)
 c001808:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
 c00180c:	e0bffe17 	ldw	r2,-8(fp)
 c001810:	10bfffec 	andhi	r2,r2,65535
 c001814:	1004d43a 	srli	r2,r2,16
}
 c001818:	e037883a 	mov	sp,fp
 c00181c:	df000017 	ldw	fp,0(sp)
 c001820:	dec00104 	addi	sp,sp,4
 c001824:	f800283a 	ret

0c001828 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
 c001828:	defffc04 	addi	sp,sp,-16
 c00182c:	df000315 	stw	fp,12(sp)
 c001830:	df000304 	addi	fp,sp,12
 c001834:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
 c001838:	e0bffe17 	ldw	r2,-8(fp)
 c00183c:	1080800c 	andi	r2,r2,512
 c001840:	1004d27a 	srli	r2,r2,9
 c001844:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 c001848:	e0bffd17 	ldw	r2,-12(fp)
 c00184c:	1005003a 	cmpeq	r2,r2,zero
 c001850:	1000031e 	bne	r2,zero,c001860 <alt_up_irda_check_parity+0x38>
 c001854:	00bfffc4 	movi	r2,-1
 c001858:	e0bfff15 	stw	r2,-4(fp)
 c00185c:	00000106 	br	c001864 <alt_up_irda_check_parity+0x3c>
 c001860:	e03fff15 	stw	zero,-4(fp)
 c001864:	e0bfff17 	ldw	r2,-4(fp)
}
 c001868:	e037883a 	mov	sp,fp
 c00186c:	df000017 	ldw	fp,0(sp)
 c001870:	dec00104 	addi	sp,sp,4
 c001874:	f800283a 	ret

0c001878 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
 c001878:	defffc04 	addi	sp,sp,-16
 c00187c:	df000315 	stw	fp,12(sp)
 c001880:	df000304 	addi	fp,sp,12
 c001884:	e13ffe15 	stw	r4,-8(fp)
 c001888:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
 c00188c:	e0bffe17 	ldw	r2,-8(fp)
 c001890:	10800a17 	ldw	r2,40(r2)
 c001894:	10800037 	ldwio	r2,0(r2)
 c001898:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
 c00189c:	e0bffe17 	ldw	r2,-8(fp)
 c0018a0:	10800a17 	ldw	r2,40(r2)
 c0018a4:	e0ffff03 	ldbu	r3,-4(fp)
 c0018a8:	10c00035 	stwio	r3,0(r2)
	return 0;
 c0018ac:	0005883a 	mov	r2,zero
}
 c0018b0:	e037883a 	mov	sp,fp
 c0018b4:	df000017 	ldw	fp,0(sp)
 c0018b8:	dec00104 	addi	sp,sp,4
 c0018bc:	f800283a 	ret

0c0018c0 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
 c0018c0:	defffa04 	addi	sp,sp,-24
 c0018c4:	dfc00515 	stw	ra,20(sp)
 c0018c8:	df000415 	stw	fp,16(sp)
 c0018cc:	df000404 	addi	fp,sp,16
 c0018d0:	e13ffd15 	stw	r4,-12(fp)
 c0018d4:	e17ffe15 	stw	r5,-8(fp)
 c0018d8:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
 c0018dc:	e0bffd17 	ldw	r2,-12(fp)
 c0018e0:	10800a17 	ldw	r2,40(r2)
 c0018e4:	10800037 	ldwio	r2,0(r2)
 c0018e8:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
 c0018ec:	e0bffc17 	ldw	r2,-16(fp)
 c0018f0:	1007883a 	mov	r3,r2
 c0018f4:	e0bffe17 	ldw	r2,-8(fp)
 c0018f8:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
 c0018fc:	e13ffc17 	ldw	r4,-16(fp)
 c001900:	c0018280 	call	c001828 <alt_up_irda_check_parity>
 c001904:	1007883a 	mov	r3,r2
 c001908:	e0bfff17 	ldw	r2,-4(fp)
 c00190c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
 c001910:	e0bffc17 	ldw	r2,-16(fp)
 c001914:	10a0000c 	andi	r2,r2,32768
 c001918:	1004d3fa 	srli	r2,r2,15
 c00191c:	10bfffc4 	addi	r2,r2,-1
}
 c001920:	e037883a 	mov	sp,fp
 c001924:	dfc00117 	ldw	ra,4(sp)
 c001928:	df000017 	ldw	fp,0(sp)
 c00192c:	dec00204 	addi	sp,sp,8
 c001930:	f800283a 	ret

0c001934 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
 c001934:	defff804 	addi	sp,sp,-32
 c001938:	dfc00715 	stw	ra,28(sp)
 c00193c:	df000615 	stw	fp,24(sp)
 c001940:	df000604 	addi	fp,sp,24
 c001944:	e13ffd15 	stw	r4,-12(fp)
 c001948:	e17ffe15 	stw	r5,-8(fp)
 c00194c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
 c001950:	e0bffd17 	ldw	r2,-12(fp)
 c001954:	10800017 	ldw	r2,0(r2)
 c001958:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 c00195c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 c001960:	00000c06 	br	c001994 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
 c001964:	e17ffe17 	ldw	r5,-8(fp)
 c001968:	e0bffe17 	ldw	r2,-8(fp)
 c00196c:	10800044 	addi	r2,r2,1
 c001970:	e0bffe15 	stw	r2,-8(fp)
 c001974:	e1bffc04 	addi	r6,fp,-16
 c001978:	e13ffb17 	ldw	r4,-20(fp)
 c00197c:	c0018c00 	call	c0018c0 <alt_up_irda_read_data>
 c001980:	1004c03a 	cmpne	r2,r2,zero
 c001984:	1000091e 	bne	r2,zero,c0019ac <alt_up_irda_read_fd+0x78>
			count++;
 c001988:	e0bffa17 	ldw	r2,-24(fp)
 c00198c:	10800044 	addi	r2,r2,1
 c001990:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 c001994:	e0bfff17 	ldw	r2,-4(fp)
 c001998:	10bfffc4 	addi	r2,r2,-1
 c00199c:	e0bfff15 	stw	r2,-4(fp)
 c0019a0:	e0bfff17 	ldw	r2,-4(fp)
 c0019a4:	10bfffd8 	cmpnei	r2,r2,-1
 c0019a8:	103fee1e 	bne	r2,zero,c001964 <alt_up_irda_read_fd+0x30>
		if (alt_up_irda_read_data(irda, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 c0019ac:	e0bffa17 	ldw	r2,-24(fp)
}
 c0019b0:	e037883a 	mov	sp,fp
 c0019b4:	dfc00117 	ldw	ra,4(sp)
 c0019b8:	df000017 	ldw	fp,0(sp)
 c0019bc:	dec00204 	addi	sp,sp,8
 c0019c0:	f800283a 	ret

0c0019c4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
 c0019c4:	defff904 	addi	sp,sp,-28
 c0019c8:	dfc00615 	stw	ra,24(sp)
 c0019cc:	df000515 	stw	fp,20(sp)
 c0019d0:	df000504 	addi	fp,sp,20
 c0019d4:	e13ffd15 	stw	r4,-12(fp)
 c0019d8:	e17ffe15 	stw	r5,-8(fp)
 c0019dc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
 c0019e0:	e0bffd17 	ldw	r2,-12(fp)
 c0019e4:	10800017 	ldw	r2,0(r2)
 c0019e8:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 c0019ec:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 c0019f0:	00000c06 	br	c001a24 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, ptr++)==0)
 c0019f4:	e0bffe17 	ldw	r2,-8(fp)
 c0019f8:	11403fcc 	andi	r5,r2,255
 c0019fc:	e0bffe17 	ldw	r2,-8(fp)
 c001a00:	10800044 	addi	r2,r2,1
 c001a04:	e0bffe15 	stw	r2,-8(fp)
 c001a08:	e13ffc17 	ldw	r4,-16(fp)
 c001a0c:	c0018780 	call	c001878 <alt_up_irda_write_data>
 c001a10:	1004c03a 	cmpne	r2,r2,zero
 c001a14:	1000091e 	bne	r2,zero,c001a3c <alt_up_irda_write_fd+0x78>
			count++;
 c001a18:	e0bffb17 	ldw	r2,-20(fp)
 c001a1c:	10800044 	addi	r2,r2,1
 c001a20:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
 c001a24:	e0bfff17 	ldw	r2,-4(fp)
 c001a28:	10bfffc4 	addi	r2,r2,-1
 c001a2c:	e0bfff15 	stw	r2,-4(fp)
 c001a30:	e0bfff17 	ldw	r2,-4(fp)
 c001a34:	10bfffd8 	cmpnei	r2,r2,-1
 c001a38:	103fee1e 	bne	r2,zero,c0019f4 <alt_up_irda_write_fd+0x30>
		if (alt_up_irda_write_data(irda, ptr++)==0)
			count++;
		else
			break;
	}
	return count;
 c001a3c:	e0bffb17 	ldw	r2,-20(fp)
}
 c001a40:	e037883a 	mov	sp,fp
 c001a44:	dfc00117 	ldw	ra,4(sp)
 c001a48:	df000017 	ldw	fp,0(sp)
 c001a4c:	dec00204 	addi	sp,sp,8
 c001a50:	f800283a 	ret

0c001a54 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
 c001a54:	defffc04 	addi	sp,sp,-16
 c001a58:	dfc00315 	stw	ra,12(sp)
 c001a5c:	df000215 	stw	fp,8(sp)
 c001a60:	df000204 	addi	fp,sp,8
 c001a64:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
 c001a68:	e13fff17 	ldw	r4,-4(fp)
 c001a6c:	01430034 	movhi	r5,3072
 c001a70:	29530304 	addi	r5,r5,19468
 c001a74:	c0023240 	call	c002324 <alt_find_dev>
 c001a78:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 c001a7c:	e0bffe17 	ldw	r2,-8(fp)
}
 c001a80:	e037883a 	mov	sp,fp
 c001a84:	dfc00117 	ldw	ra,4(sp)
 c001a88:	df000017 	ldw	fp,0(sp)
 c001a8c:	dec00204 	addi	sp,sp,8
 c001a90:	f800283a 	ret

0c001a94 <alt_up_parallel_port_open_dev>:

#include "altera_up_avalon_parallel_port.h"
#include "altera_up_avalon_parallel_port_regs.h"

alt_up_parallel_port_dev* alt_up_parallel_port_open_dev(const char* name)
{
 c001a94:	defffc04 	addi	sp,sp,-16
 c001a98:	dfc00315 	stw	ra,12(sp)
 c001a9c:	df000215 	stw	fp,8(sp)
 c001aa0:	df000204 	addi	fp,sp,8
 c001aa4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_parallel_port_dev *dev = (alt_up_parallel_port_dev*)alt_find_dev(name, &alt_dev_list);
 c001aa8:	e13fff17 	ldw	r4,-4(fp)
 c001aac:	01430034 	movhi	r5,3072
 c001ab0:	29530304 	addi	r5,r5,19468
 c001ab4:	c0023240 	call	c002324 <alt_find_dev>
 c001ab8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 c001abc:	e0bffe17 	ldw	r2,-8(fp)
}
 c001ac0:	e037883a 	mov	sp,fp
 c001ac4:	dfc00117 	ldw	ra,4(sp)
 c001ac8:	df000017 	ldw	fp,0(sp)
 c001acc:	dec00204 	addi	sp,sp,8
 c001ad0:	f800283a 	ret

0c001ad4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 c001ad4:	defffd04 	addi	sp,sp,-12
 c001ad8:	df000215 	stw	fp,8(sp)
 c001adc:	df000204 	addi	fp,sp,8
 c001ae0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 c001ae4:	e0bfff17 	ldw	r2,-4(fp)
 c001ae8:	10800a17 	ldw	r2,40(r2)
 c001aec:	10800104 	addi	r2,r2,4
 c001af0:	10800037 	ldwio	r2,0(r2)
 c001af4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 c001af8:	e0bffe17 	ldw	r2,-8(fp)
 c001afc:	10800054 	ori	r2,r2,1
 c001b00:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 c001b04:	e0bfff17 	ldw	r2,-4(fp)
 c001b08:	10800a17 	ldw	r2,40(r2)
 c001b0c:	10800104 	addi	r2,r2,4
 c001b10:	e0fffe17 	ldw	r3,-8(fp)
 c001b14:	10c00035 	stwio	r3,0(r2)
}
 c001b18:	e037883a 	mov	sp,fp
 c001b1c:	df000017 	ldw	fp,0(sp)
 c001b20:	dec00104 	addi	sp,sp,4
 c001b24:	f800283a 	ret

0c001b28 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 c001b28:	defffd04 	addi	sp,sp,-12
 c001b2c:	df000215 	stw	fp,8(sp)
 c001b30:	df000204 	addi	fp,sp,8
 c001b34:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 c001b38:	e0bfff17 	ldw	r2,-4(fp)
 c001b3c:	10800a17 	ldw	r2,40(r2)
 c001b40:	10800104 	addi	r2,r2,4
 c001b44:	10800037 	ldwio	r2,0(r2)
 c001b48:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 c001b4c:	e0fffe17 	ldw	r3,-8(fp)
 c001b50:	00bfff84 	movi	r2,-2
 c001b54:	1884703a 	and	r2,r3,r2
 c001b58:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 c001b5c:	e0bfff17 	ldw	r2,-4(fp)
 c001b60:	10800a17 	ldw	r2,40(r2)
 c001b64:	10800104 	addi	r2,r2,4
 c001b68:	e0fffe17 	ldw	r3,-8(fp)
 c001b6c:	10c00035 	stwio	r3,0(r2)
}
 c001b70:	e037883a 	mov	sp,fp
 c001b74:	df000017 	ldw	fp,0(sp)
 c001b78:	dec00104 	addi	sp,sp,4
 c001b7c:	f800283a 	ret

0c001b80 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 c001b80:	defffd04 	addi	sp,sp,-12
 c001b84:	df000215 	stw	fp,8(sp)
 c001b88:	df000204 	addi	fp,sp,8
 c001b8c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 c001b90:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 c001b94:	e0bfff17 	ldw	r2,-4(fp)
 c001b98:	10800a17 	ldw	r2,40(r2)
 c001b9c:	10800084 	addi	r2,r2,2
 c001ba0:	1080002b 	ldhuio	r2,0(r2)
 c001ba4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 c001ba8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 c001bac:	e037883a 	mov	sp,fp
 c001bb0:	df000017 	ldw	fp,0(sp)
 c001bb4:	dec00104 	addi	sp,sp,4
 c001bb8:	f800283a 	ret

0c001bbc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 c001bbc:	defffd04 	addi	sp,sp,-12
 c001bc0:	df000215 	stw	fp,8(sp)
 c001bc4:	df000204 	addi	fp,sp,8
 c001bc8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 c001bcc:	e0bfff17 	ldw	r2,-4(fp)
 c001bd0:	10800a17 	ldw	r2,40(r2)
 c001bd4:	10800104 	addi	r2,r2,4
 c001bd8:	10800037 	ldwio	r2,0(r2)
 c001bdc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 c001be0:	e0bffe17 	ldw	r2,-8(fp)
 c001be4:	10bfffec 	andhi	r2,r2,65535
 c001be8:	1004d43a 	srli	r2,r2,16
}
 c001bec:	e037883a 	mov	sp,fp
 c001bf0:	df000017 	ldw	fp,0(sp)
 c001bf4:	dec00104 	addi	sp,sp,4
 c001bf8:	f800283a 	ret

0c001bfc <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 c001bfc:	defffc04 	addi	sp,sp,-16
 c001c00:	df000315 	stw	fp,12(sp)
 c001c04:	df000304 	addi	fp,sp,12
 c001c08:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 c001c0c:	e0bffe17 	ldw	r2,-8(fp)
 c001c10:	1080800c 	andi	r2,r2,512
 c001c14:	1004d27a 	srli	r2,r2,9
 c001c18:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 c001c1c:	e0bffd17 	ldw	r2,-12(fp)
 c001c20:	1005003a 	cmpeq	r2,r2,zero
 c001c24:	1000031e 	bne	r2,zero,c001c34 <alt_up_rs232_check_parity+0x38>
 c001c28:	00bfffc4 	movi	r2,-1
 c001c2c:	e0bfff15 	stw	r2,-4(fp)
 c001c30:	00000106 	br	c001c38 <alt_up_rs232_check_parity+0x3c>
 c001c34:	e03fff15 	stw	zero,-4(fp)
 c001c38:	e0bfff17 	ldw	r2,-4(fp)
}
 c001c3c:	e037883a 	mov	sp,fp
 c001c40:	df000017 	ldw	fp,0(sp)
 c001c44:	dec00104 	addi	sp,sp,4
 c001c48:	f800283a 	ret

0c001c4c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 c001c4c:	defffc04 	addi	sp,sp,-16
 c001c50:	df000315 	stw	fp,12(sp)
 c001c54:	df000304 	addi	fp,sp,12
 c001c58:	e13ffe15 	stw	r4,-8(fp)
 c001c5c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 c001c60:	e0bffe17 	ldw	r2,-8(fp)
 c001c64:	10800a17 	ldw	r2,40(r2)
 c001c68:	10800037 	ldwio	r2,0(r2)
 c001c6c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 c001c70:	e0bffe17 	ldw	r2,-8(fp)
 c001c74:	10800a17 	ldw	r2,40(r2)
 c001c78:	e0ffff03 	ldbu	r3,-4(fp)
 c001c7c:	10c00035 	stwio	r3,0(r2)
	return 0;
 c001c80:	0005883a 	mov	r2,zero
}
 c001c84:	e037883a 	mov	sp,fp
 c001c88:	df000017 	ldw	fp,0(sp)
 c001c8c:	dec00104 	addi	sp,sp,4
 c001c90:	f800283a 	ret

0c001c94 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 c001c94:	defffa04 	addi	sp,sp,-24
 c001c98:	dfc00515 	stw	ra,20(sp)
 c001c9c:	df000415 	stw	fp,16(sp)
 c001ca0:	df000404 	addi	fp,sp,16
 c001ca4:	e13ffd15 	stw	r4,-12(fp)
 c001ca8:	e17ffe15 	stw	r5,-8(fp)
 c001cac:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 c001cb0:	e0bffd17 	ldw	r2,-12(fp)
 c001cb4:	10800a17 	ldw	r2,40(r2)
 c001cb8:	10800037 	ldwio	r2,0(r2)
 c001cbc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 c001cc0:	e0bffc17 	ldw	r2,-16(fp)
 c001cc4:	1007883a 	mov	r3,r2
 c001cc8:	e0bffe17 	ldw	r2,-8(fp)
 c001ccc:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 c001cd0:	e13ffc17 	ldw	r4,-16(fp)
 c001cd4:	c001bfc0 	call	c001bfc <alt_up_rs232_check_parity>
 c001cd8:	1007883a 	mov	r3,r2
 c001cdc:	e0bfff17 	ldw	r2,-4(fp)
 c001ce0:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 c001ce4:	e0bffc17 	ldw	r2,-16(fp)
 c001ce8:	10a0000c 	andi	r2,r2,32768
 c001cec:	1004d3fa 	srli	r2,r2,15
 c001cf0:	10bfffc4 	addi	r2,r2,-1
}
 c001cf4:	e037883a 	mov	sp,fp
 c001cf8:	dfc00117 	ldw	ra,4(sp)
 c001cfc:	df000017 	ldw	fp,0(sp)
 c001d00:	dec00204 	addi	sp,sp,8
 c001d04:	f800283a 	ret

0c001d08 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 c001d08:	defff804 	addi	sp,sp,-32
 c001d0c:	dfc00715 	stw	ra,28(sp)
 c001d10:	df000615 	stw	fp,24(sp)
 c001d14:	df000604 	addi	fp,sp,24
 c001d18:	e13ffd15 	stw	r4,-12(fp)
 c001d1c:	e17ffe15 	stw	r5,-8(fp)
 c001d20:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 c001d24:	e0bffd17 	ldw	r2,-12(fp)
 c001d28:	10800017 	ldw	r2,0(r2)
 c001d2c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 c001d30:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 c001d34:	00000c06 	br	c001d68 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 c001d38:	e17ffe17 	ldw	r5,-8(fp)
 c001d3c:	e0bffe17 	ldw	r2,-8(fp)
 c001d40:	10800044 	addi	r2,r2,1
 c001d44:	e0bffe15 	stw	r2,-8(fp)
 c001d48:	e1bffc04 	addi	r6,fp,-16
 c001d4c:	e13ffb17 	ldw	r4,-20(fp)
 c001d50:	c001c940 	call	c001c94 <alt_up_rs232_read_data>
 c001d54:	1004c03a 	cmpne	r2,r2,zero
 c001d58:	1000091e 	bne	r2,zero,c001d80 <alt_up_rs232_read_fd+0x78>
			count++;
 c001d5c:	e0bffa17 	ldw	r2,-24(fp)
 c001d60:	10800044 	addi	r2,r2,1
 c001d64:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 c001d68:	e0bfff17 	ldw	r2,-4(fp)
 c001d6c:	10bfffc4 	addi	r2,r2,-1
 c001d70:	e0bfff15 	stw	r2,-4(fp)
 c001d74:	e0bfff17 	ldw	r2,-4(fp)
 c001d78:	10bfffd8 	cmpnei	r2,r2,-1
 c001d7c:	103fee1e 	bne	r2,zero,c001d38 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 c001d80:	e0bffa17 	ldw	r2,-24(fp)
}
 c001d84:	e037883a 	mov	sp,fp
 c001d88:	dfc00117 	ldw	ra,4(sp)
 c001d8c:	df000017 	ldw	fp,0(sp)
 c001d90:	dec00204 	addi	sp,sp,8
 c001d94:	f800283a 	ret

0c001d98 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 c001d98:	defff904 	addi	sp,sp,-28
 c001d9c:	dfc00615 	stw	ra,24(sp)
 c001da0:	df000515 	stw	fp,20(sp)
 c001da4:	df000504 	addi	fp,sp,20
 c001da8:	e13ffd15 	stw	r4,-12(fp)
 c001dac:	e17ffe15 	stw	r5,-8(fp)
 c001db0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 c001db4:	e0bffd17 	ldw	r2,-12(fp)
 c001db8:	10800017 	ldw	r2,0(r2)
 c001dbc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 c001dc0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 c001dc4:	00000d06 	br	c001dfc <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 c001dc8:	e0bffe17 	ldw	r2,-8(fp)
 c001dcc:	10800003 	ldbu	r2,0(r2)
 c001dd0:	11403fcc 	andi	r5,r2,255
 c001dd4:	e13ffc17 	ldw	r4,-16(fp)
 c001dd8:	c001c4c0 	call	c001c4c <alt_up_rs232_write_data>
 c001ddc:	1004c03a 	cmpne	r2,r2,zero
 c001de0:	10000c1e 	bne	r2,zero,c001e14 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 c001de4:	e0bffb17 	ldw	r2,-20(fp)
 c001de8:	10800044 	addi	r2,r2,1
 c001dec:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 c001df0:	e0bffe17 	ldw	r2,-8(fp)
 c001df4:	10800044 	addi	r2,r2,1
 c001df8:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 c001dfc:	e0bfff17 	ldw	r2,-4(fp)
 c001e00:	10bfffc4 	addi	r2,r2,-1
 c001e04:	e0bfff15 	stw	r2,-4(fp)
 c001e08:	e0bfff17 	ldw	r2,-4(fp)
 c001e0c:	10bfffd8 	cmpnei	r2,r2,-1
 c001e10:	103fed1e 	bne	r2,zero,c001dc8 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 c001e14:	e0bffb17 	ldw	r2,-20(fp)
}
 c001e18:	e037883a 	mov	sp,fp
 c001e1c:	dfc00117 	ldw	ra,4(sp)
 c001e20:	df000017 	ldw	fp,0(sp)
 c001e24:	dec00204 	addi	sp,sp,8
 c001e28:	f800283a 	ret

0c001e2c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 c001e2c:	defffc04 	addi	sp,sp,-16
 c001e30:	dfc00315 	stw	ra,12(sp)
 c001e34:	df000215 	stw	fp,8(sp)
 c001e38:	df000204 	addi	fp,sp,8
 c001e3c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 c001e40:	e13fff17 	ldw	r4,-4(fp)
 c001e44:	01430034 	movhi	r5,3072
 c001e48:	29530304 	addi	r5,r5,19468
 c001e4c:	c0023240 	call	c002324 <alt_find_dev>
 c001e50:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 c001e54:	e0bffe17 	ldw	r2,-8(fp)
}
 c001e58:	e037883a 	mov	sp,fp
 c001e5c:	dfc00117 	ldw	ra,4(sp)
 c001e60:	df000017 	ldw	fp,0(sp)
 c001e64:	dec00204 	addi	sp,sp,8
 c001e68:	f800283a 	ret

0c001e6c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 c001e6c:	defff404 	addi	sp,sp,-48
 c001e70:	df000b15 	stw	fp,44(sp)
 c001e74:	df000b04 	addi	fp,sp,44
 c001e78:	e13ffb15 	stw	r4,-20(fp)
 c001e7c:	e17ffc15 	stw	r5,-16(fp)
 c001e80:	e1bffd15 	stw	r6,-12(fp)
 c001e84:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 c001e88:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 c001e8c:	00830034 	movhi	r2,3072
 c001e90:	10931204 	addi	r2,r2,19528
 c001e94:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 c001e98:	1005003a 	cmpeq	r2,r2,zero
 c001e9c:	1000411e 	bne	r2,zero,c001fa4 <alt_alarm_start+0x138>
  {
    if (alarm)
 c001ea0:	e0bffb17 	ldw	r2,-20(fp)
 c001ea4:	1005003a 	cmpeq	r2,r2,zero
 c001ea8:	10003b1e 	bne	r2,zero,c001f98 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 c001eac:	e0fffb17 	ldw	r3,-20(fp)
 c001eb0:	e0bffd17 	ldw	r2,-12(fp)
 c001eb4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 c001eb8:	e0fffb17 	ldw	r3,-20(fp)
 c001ebc:	e0bffe17 	ldw	r2,-8(fp)
 c001ec0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c001ec4:	0005303a 	rdctl	r2,status
 c001ec8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c001ecc:	e0fff817 	ldw	r3,-32(fp)
 c001ed0:	00bfff84 	movi	r2,-2
 c001ed4:	1884703a 	and	r2,r3,r2
 c001ed8:	1001703a 	wrctl	status,r2
  
  return context;
 c001edc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 c001ee0:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 c001ee4:	00830034 	movhi	r2,3072
 c001ee8:	10931304 	addi	r2,r2,19532
 c001eec:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 c001ef0:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 c001ef4:	e0fffc17 	ldw	r3,-16(fp)
 c001ef8:	e0bff917 	ldw	r2,-28(fp)
 c001efc:	1885883a 	add	r2,r3,r2
 c001f00:	10c00044 	addi	r3,r2,1
 c001f04:	e0bffb17 	ldw	r2,-20(fp)
 c001f08:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 c001f0c:	e0bffb17 	ldw	r2,-20(fp)
 c001f10:	10c00217 	ldw	r3,8(r2)
 c001f14:	e0bff917 	ldw	r2,-28(fp)
 c001f18:	1880042e 	bgeu	r3,r2,c001f2c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 c001f1c:	e0fffb17 	ldw	r3,-20(fp)
 c001f20:	00800044 	movi	r2,1
 c001f24:	18800405 	stb	r2,16(r3)
 c001f28:	00000206 	br	c001f34 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 c001f2c:	e0bffb17 	ldw	r2,-20(fp)
 c001f30:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 c001f34:	e0fffb17 	ldw	r3,-20(fp)
 c001f38:	00830034 	movhi	r2,3072
 c001f3c:	10930804 	addi	r2,r2,19488
 c001f40:	e0bff615 	stw	r2,-40(fp)
 c001f44:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c001f48:	e0fff717 	ldw	r3,-36(fp)
 c001f4c:	e0bff617 	ldw	r2,-40(fp)
 c001f50:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 c001f54:	e0bff617 	ldw	r2,-40(fp)
 c001f58:	10c00017 	ldw	r3,0(r2)
 c001f5c:	e0bff717 	ldw	r2,-36(fp)
 c001f60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c001f64:	e0bff617 	ldw	r2,-40(fp)
 c001f68:	10c00017 	ldw	r3,0(r2)
 c001f6c:	e0bff717 	ldw	r2,-36(fp)
 c001f70:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 c001f74:	e0fff617 	ldw	r3,-40(fp)
 c001f78:	e0bff717 	ldw	r2,-36(fp)
 c001f7c:	18800015 	stw	r2,0(r3)
 c001f80:	e0bffa17 	ldw	r2,-24(fp)
 c001f84:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c001f88:	e0bff517 	ldw	r2,-44(fp)
 c001f8c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 c001f90:	e03fff15 	stw	zero,-4(fp)
 c001f94:	00000506 	br	c001fac <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 c001f98:	00bffa84 	movi	r2,-22
 c001f9c:	e0bfff15 	stw	r2,-4(fp)
 c001fa0:	00000206 	br	c001fac <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 c001fa4:	00bfde84 	movi	r2,-134
 c001fa8:	e0bfff15 	stw	r2,-4(fp)
 c001fac:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 c001fb0:	e037883a 	mov	sp,fp
 c001fb4:	df000017 	ldw	fp,0(sp)
 c001fb8:	dec00104 	addi	sp,sp,4
 c001fbc:	f800283a 	ret

0c001fc0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 c001fc0:	defff804 	addi	sp,sp,-32
 c001fc4:	dfc00715 	stw	ra,28(sp)
 c001fc8:	df000615 	stw	fp,24(sp)
 c001fcc:	df000604 	addi	fp,sp,24
 c001fd0:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 c001fd4:	e0bffc17 	ldw	r2,-16(fp)
 c001fd8:	1004803a 	cmplt	r2,r2,zero
 c001fdc:	1000081e 	bne	r2,zero,c002000 <close+0x40>
 c001fe0:	e0bffc17 	ldw	r2,-16(fp)
 c001fe4:	10800324 	muli	r2,r2,12
 c001fe8:	1007883a 	mov	r3,r2
 c001fec:	00830034 	movhi	r2,3072
 c001ff0:	1091a004 	addi	r2,r2,18048
 c001ff4:	1887883a 	add	r3,r3,r2
 c001ff8:	e0ffff15 	stw	r3,-4(fp)
 c001ffc:	00000106 	br	c002004 <close+0x44>
 c002000:	e03fff15 	stw	zero,-4(fp)
 c002004:	e0bfff17 	ldw	r2,-4(fp)
 c002008:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 c00200c:	e0bffb17 	ldw	r2,-20(fp)
 c002010:	1005003a 	cmpeq	r2,r2,zero
 c002014:	10001d1e 	bne	r2,zero,c00208c <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 c002018:	e0bffb17 	ldw	r2,-20(fp)
 c00201c:	10800017 	ldw	r2,0(r2)
 c002020:	10800417 	ldw	r2,16(r2)
 c002024:	1005003a 	cmpeq	r2,r2,zero
 c002028:	1000071e 	bne	r2,zero,c002048 <close+0x88>
 c00202c:	e0bffb17 	ldw	r2,-20(fp)
 c002030:	10800017 	ldw	r2,0(r2)
 c002034:	10800417 	ldw	r2,16(r2)
 c002038:	e13ffb17 	ldw	r4,-20(fp)
 c00203c:	103ee83a 	callr	r2
 c002040:	e0bffe15 	stw	r2,-8(fp)
 c002044:	00000106 	br	c00204c <close+0x8c>
 c002048:	e03ffe15 	stw	zero,-8(fp)
 c00204c:	e0bffe17 	ldw	r2,-8(fp)
 c002050:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 c002054:	e13ffc17 	ldw	r4,-16(fp)
 c002058:	c0029780 	call	c002978 <alt_release_fd>
    if (rval < 0)
 c00205c:	e0bffa17 	ldw	r2,-24(fp)
 c002060:	1004403a 	cmpge	r2,r2,zero
 c002064:	1000071e 	bne	r2,zero,c002084 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 c002068:	c0020bc0 	call	c0020bc <alt_get_errno>
 c00206c:	e0fffa17 	ldw	r3,-24(fp)
 c002070:	00c7c83a 	sub	r3,zero,r3
 c002074:	10c00015 	stw	r3,0(r2)
      return -1;
 c002078:	00bfffc4 	movi	r2,-1
 c00207c:	e0bffd15 	stw	r2,-12(fp)
 c002080:	00000806 	br	c0020a4 <close+0xe4>
    }
    return 0;
 c002084:	e03ffd15 	stw	zero,-12(fp)
 c002088:	00000606 	br	c0020a4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 c00208c:	c0020bc0 	call	c0020bc <alt_get_errno>
 c002090:	1007883a 	mov	r3,r2
 c002094:	00801444 	movi	r2,81
 c002098:	18800015 	stw	r2,0(r3)
    return -1;
 c00209c:	00bfffc4 	movi	r2,-1
 c0020a0:	e0bffd15 	stw	r2,-12(fp)
 c0020a4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 c0020a8:	e037883a 	mov	sp,fp
 c0020ac:	dfc00117 	ldw	ra,4(sp)
 c0020b0:	df000017 	ldw	fp,0(sp)
 c0020b4:	dec00204 	addi	sp,sp,8
 c0020b8:	f800283a 	ret

0c0020bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0020bc:	defffd04 	addi	sp,sp,-12
 c0020c0:	dfc00215 	stw	ra,8(sp)
 c0020c4:	df000115 	stw	fp,4(sp)
 c0020c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c0020cc:	00830034 	movhi	r2,3072
 c0020d0:	10930604 	addi	r2,r2,19480
 c0020d4:	10800017 	ldw	r2,0(r2)
 c0020d8:	1005003a 	cmpeq	r2,r2,zero
 c0020dc:	1000061e 	bne	r2,zero,c0020f8 <alt_get_errno+0x3c>
 c0020e0:	00830034 	movhi	r2,3072
 c0020e4:	10930604 	addi	r2,r2,19480
 c0020e8:	10800017 	ldw	r2,0(r2)
 c0020ec:	103ee83a 	callr	r2
 c0020f0:	e0bfff15 	stw	r2,-4(fp)
 c0020f4:	00000306 	br	c002104 <alt_get_errno+0x48>
 c0020f8:	00830034 	movhi	r2,3072
 c0020fc:	10931404 	addi	r2,r2,19536
 c002100:	e0bfff15 	stw	r2,-4(fp)
 c002104:	e0bfff17 	ldw	r2,-4(fp)
}
 c002108:	e037883a 	mov	sp,fp
 c00210c:	dfc00117 	ldw	ra,4(sp)
 c002110:	df000017 	ldw	fp,0(sp)
 c002114:	dec00204 	addi	sp,sp,8
 c002118:	f800283a 	ret

0c00211c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 c00211c:	defffc04 	addi	sp,sp,-16
 c002120:	df000315 	stw	fp,12(sp)
 c002124:	df000304 	addi	fp,sp,12
 c002128:	e13ffd15 	stw	r4,-12(fp)
 c00212c:	e17ffe15 	stw	r5,-8(fp)
 c002130:	e1bfff15 	stw	r6,-4(fp)
  return len;
 c002134:	e0bfff17 	ldw	r2,-4(fp)
}
 c002138:	e037883a 	mov	sp,fp
 c00213c:	df000017 	ldw	fp,0(sp)
 c002140:	dec00104 	addi	sp,sp,4
 c002144:	f800283a 	ret

0c002148 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 c002148:	defff904 	addi	sp,sp,-28
 c00214c:	dfc00615 	stw	ra,24(sp)
 c002150:	df000515 	stw	fp,20(sp)
 c002154:	df000504 	addi	fp,sp,20
 c002158:	e13ffd15 	stw	r4,-12(fp)
 c00215c:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 c002160:	e0bffd17 	ldw	r2,-12(fp)
 c002164:	1005003a 	cmpeq	r2,r2,zero
 c002168:	1000041e 	bne	r2,zero,c00217c <alt_dev_llist_insert+0x34>
 c00216c:	e0bffd17 	ldw	r2,-12(fp)
 c002170:	10800217 	ldw	r2,8(r2)
 c002174:	1004c03a 	cmpne	r2,r2,zero
 c002178:	1000071e 	bne	r2,zero,c002198 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 c00217c:	c0021fc0 	call	c0021fc <alt_get_errno>
 c002180:	1007883a 	mov	r3,r2
 c002184:	00800584 	movi	r2,22
 c002188:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 c00218c:	00bffa84 	movi	r2,-22
 c002190:	e0bfff15 	stw	r2,-4(fp)
 c002194:	00001306 	br	c0021e4 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 c002198:	e0fffd17 	ldw	r3,-12(fp)
 c00219c:	e0bffe17 	ldw	r2,-8(fp)
 c0021a0:	e0bffb15 	stw	r2,-20(fp)
 c0021a4:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 c0021a8:	e0fffc17 	ldw	r3,-16(fp)
 c0021ac:	e0bffb17 	ldw	r2,-20(fp)
 c0021b0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 c0021b4:	e0bffb17 	ldw	r2,-20(fp)
 c0021b8:	10c00017 	ldw	r3,0(r2)
 c0021bc:	e0bffc17 	ldw	r2,-16(fp)
 c0021c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 c0021c4:	e0bffb17 	ldw	r2,-20(fp)
 c0021c8:	10c00017 	ldw	r3,0(r2)
 c0021cc:	e0bffc17 	ldw	r2,-16(fp)
 c0021d0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 c0021d4:	e0fffb17 	ldw	r3,-20(fp)
 c0021d8:	e0bffc17 	ldw	r2,-16(fp)
 c0021dc:	18800015 	stw	r2,0(r3)

  return 0;  
 c0021e0:	e03fff15 	stw	zero,-4(fp)
 c0021e4:	e0bfff17 	ldw	r2,-4(fp)
}
 c0021e8:	e037883a 	mov	sp,fp
 c0021ec:	dfc00117 	ldw	ra,4(sp)
 c0021f0:	df000017 	ldw	fp,0(sp)
 c0021f4:	dec00204 	addi	sp,sp,8
 c0021f8:	f800283a 	ret

0c0021fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c0021fc:	defffd04 	addi	sp,sp,-12
 c002200:	dfc00215 	stw	ra,8(sp)
 c002204:	df000115 	stw	fp,4(sp)
 c002208:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c00220c:	00830034 	movhi	r2,3072
 c002210:	10930604 	addi	r2,r2,19480
 c002214:	10800017 	ldw	r2,0(r2)
 c002218:	1005003a 	cmpeq	r2,r2,zero
 c00221c:	1000061e 	bne	r2,zero,c002238 <alt_get_errno+0x3c>
 c002220:	00830034 	movhi	r2,3072
 c002224:	10930604 	addi	r2,r2,19480
 c002228:	10800017 	ldw	r2,0(r2)
 c00222c:	103ee83a 	callr	r2
 c002230:	e0bfff15 	stw	r2,-4(fp)
 c002234:	00000306 	br	c002244 <alt_get_errno+0x48>
 c002238:	00830034 	movhi	r2,3072
 c00223c:	10931404 	addi	r2,r2,19536
 c002240:	e0bfff15 	stw	r2,-4(fp)
 c002244:	e0bfff17 	ldw	r2,-4(fp)
}
 c002248:	e037883a 	mov	sp,fp
 c00224c:	dfc00117 	ldw	ra,4(sp)
 c002250:	df000017 	ldw	fp,0(sp)
 c002254:	dec00204 	addi	sp,sp,8
 c002258:	f800283a 	ret

0c00225c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 c00225c:	defffd04 	addi	sp,sp,-12
 c002260:	dfc00215 	stw	ra,8(sp)
 c002264:	df000115 	stw	fp,4(sp)
 c002268:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c00226c:	00bfff04 	movi	r2,-4
 c002270:	00c30034 	movhi	r3,3072
 c002274:	18cca504 	addi	r3,r3,12948
 c002278:	1885883a 	add	r2,r3,r2
 c00227c:	e0bfff15 	stw	r2,-4(fp)
 c002280:	00000606 	br	c00229c <_do_ctors+0x40>
        (*ctor) (); 
 c002284:	e0bfff17 	ldw	r2,-4(fp)
 c002288:	10800017 	ldw	r2,0(r2)
 c00228c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 c002290:	e0bfff17 	ldw	r2,-4(fp)
 c002294:	10bfff04 	addi	r2,r2,-4
 c002298:	e0bfff15 	stw	r2,-4(fp)
 c00229c:	e0ffff17 	ldw	r3,-4(fp)
 c0022a0:	00830034 	movhi	r2,3072
 c0022a4:	108ca404 	addi	r2,r2,12944
 c0022a8:	18bff62e 	bgeu	r3,r2,c002284 <_do_ctors+0x28>
        (*ctor) (); 
}
 c0022ac:	e037883a 	mov	sp,fp
 c0022b0:	dfc00117 	ldw	ra,4(sp)
 c0022b4:	df000017 	ldw	fp,0(sp)
 c0022b8:	dec00204 	addi	sp,sp,8
 c0022bc:	f800283a 	ret

0c0022c0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 c0022c0:	defffd04 	addi	sp,sp,-12
 c0022c4:	dfc00215 	stw	ra,8(sp)
 c0022c8:	df000115 	stw	fp,4(sp)
 c0022cc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c0022d0:	00bfff04 	movi	r2,-4
 c0022d4:	00c30034 	movhi	r3,3072
 c0022d8:	18cca504 	addi	r3,r3,12948
 c0022dc:	1885883a 	add	r2,r3,r2
 c0022e0:	e0bfff15 	stw	r2,-4(fp)
 c0022e4:	00000606 	br	c002300 <_do_dtors+0x40>
        (*dtor) (); 
 c0022e8:	e0bfff17 	ldw	r2,-4(fp)
 c0022ec:	10800017 	ldw	r2,0(r2)
 c0022f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 c0022f4:	e0bfff17 	ldw	r2,-4(fp)
 c0022f8:	10bfff04 	addi	r2,r2,-4
 c0022fc:	e0bfff15 	stw	r2,-4(fp)
 c002300:	e0ffff17 	ldw	r3,-4(fp)
 c002304:	00830034 	movhi	r2,3072
 c002308:	108ca504 	addi	r2,r2,12948
 c00230c:	18bff62e 	bgeu	r3,r2,c0022e8 <_do_dtors+0x28>
        (*dtor) (); 
}
 c002310:	e037883a 	mov	sp,fp
 c002314:	dfc00117 	ldw	ra,4(sp)
 c002318:	df000017 	ldw	fp,0(sp)
 c00231c:	dec00204 	addi	sp,sp,8
 c002320:	f800283a 	ret

0c002324 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 c002324:	defff904 	addi	sp,sp,-28
 c002328:	dfc00615 	stw	ra,24(sp)
 c00232c:	df000515 	stw	fp,20(sp)
 c002330:	df000504 	addi	fp,sp,20
 c002334:	e13ffd15 	stw	r4,-12(fp)
 c002338:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 c00233c:	e0bffe17 	ldw	r2,-8(fp)
 c002340:	10800017 	ldw	r2,0(r2)
 c002344:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 c002348:	e13ffd17 	ldw	r4,-12(fp)
 c00234c:	c002ed40 	call	c002ed4 <strlen>
 c002350:	10800044 	addi	r2,r2,1
 c002354:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c002358:	00000d06 	br	c002390 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 c00235c:	e0bffc17 	ldw	r2,-16(fp)
 c002360:	11000217 	ldw	r4,8(r2)
 c002364:	e1bffb17 	ldw	r6,-20(fp)
 c002368:	e17ffd17 	ldw	r5,-12(fp)
 c00236c:	c002dc00 	call	c002dc0 <memcmp>
 c002370:	1004c03a 	cmpne	r2,r2,zero
 c002374:	1000031e 	bne	r2,zero,c002384 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 c002378:	e0bffc17 	ldw	r2,-16(fp)
 c00237c:	e0bfff15 	stw	r2,-4(fp)
 c002380:	00000706 	br	c0023a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 c002384:	e0bffc17 	ldw	r2,-16(fp)
 c002388:	10800017 	ldw	r2,0(r2)
 c00238c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 c002390:	e0fffe17 	ldw	r3,-8(fp)
 c002394:	e0bffc17 	ldw	r2,-16(fp)
 c002398:	10fff01e 	bne	r2,r3,c00235c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 c00239c:	e03fff15 	stw	zero,-4(fp)
 c0023a0:	e0bfff17 	ldw	r2,-4(fp)
}
 c0023a4:	e037883a 	mov	sp,fp
 c0023a8:	dfc00117 	ldw	ra,4(sp)
 c0023ac:	df000017 	ldw	fp,0(sp)
 c0023b0:	dec00204 	addi	sp,sp,8
 c0023b4:	f800283a 	ret

0c0023b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 c0023b8:	defff904 	addi	sp,sp,-28
 c0023bc:	dfc00615 	stw	ra,24(sp)
 c0023c0:	df000515 	stw	fp,20(sp)
 c0023c4:	df000504 	addi	fp,sp,20
 c0023c8:	e13ffc15 	stw	r4,-16(fp)
 c0023cc:	e17ffd15 	stw	r5,-12(fp)
 c0023d0:	e1bffe15 	stw	r6,-8(fp)
 c0023d4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 c0023d8:	e13ffd17 	ldw	r4,-12(fp)
 c0023dc:	e17ffe17 	ldw	r5,-8(fp)
 c0023e0:	e1bfff17 	ldw	r6,-4(fp)
 c0023e4:	c0027900 	call	c002790 <open>
 c0023e8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 c0023ec:	e0bffb17 	ldw	r2,-20(fp)
 c0023f0:	1004803a 	cmplt	r2,r2,zero
 c0023f4:	10001c1e 	bne	r2,zero,c002468 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 c0023f8:	e0bffb17 	ldw	r2,-20(fp)
 c0023fc:	00c30034 	movhi	r3,3072
 c002400:	18d1a004 	addi	r3,r3,18048
 c002404:	10800324 	muli	r2,r2,12
 c002408:	10c5883a 	add	r2,r2,r3
 c00240c:	10c00017 	ldw	r3,0(r2)
 c002410:	e0bffc17 	ldw	r2,-16(fp)
 c002414:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 c002418:	e0bffb17 	ldw	r2,-20(fp)
 c00241c:	00c30034 	movhi	r3,3072
 c002420:	18d1a004 	addi	r3,r3,18048
 c002424:	10800324 	muli	r2,r2,12
 c002428:	10c5883a 	add	r2,r2,r3
 c00242c:	10800104 	addi	r2,r2,4
 c002430:	10c00017 	ldw	r3,0(r2)
 c002434:	e0bffc17 	ldw	r2,-16(fp)
 c002438:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 c00243c:	e0bffb17 	ldw	r2,-20(fp)
 c002440:	00c30034 	movhi	r3,3072
 c002444:	18d1a004 	addi	r3,r3,18048
 c002448:	10800324 	muli	r2,r2,12
 c00244c:	10c5883a 	add	r2,r2,r3
 c002450:	10800204 	addi	r2,r2,8
 c002454:	10c00017 	ldw	r3,0(r2)
 c002458:	e0bffc17 	ldw	r2,-16(fp)
 c00245c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 c002460:	e13ffb17 	ldw	r4,-20(fp)
 c002464:	c0029780 	call	c002978 <alt_release_fd>
  }
} 
 c002468:	e037883a 	mov	sp,fp
 c00246c:	dfc00117 	ldw	ra,4(sp)
 c002470:	df000017 	ldw	fp,0(sp)
 c002474:	dec00204 	addi	sp,sp,8
 c002478:	f800283a 	ret

0c00247c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 c00247c:	defffb04 	addi	sp,sp,-20
 c002480:	dfc00415 	stw	ra,16(sp)
 c002484:	df000315 	stw	fp,12(sp)
 c002488:	df000304 	addi	fp,sp,12
 c00248c:	e13ffd15 	stw	r4,-12(fp)
 c002490:	e17ffe15 	stw	r5,-8(fp)
 c002494:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 c002498:	01030034 	movhi	r4,3072
 c00249c:	2111a304 	addi	r4,r4,18060
 c0024a0:	e17ffd17 	ldw	r5,-12(fp)
 c0024a4:	01800044 	movi	r6,1
 c0024a8:	01c07fc4 	movi	r7,511
 c0024ac:	c0023b80 	call	c0023b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 c0024b0:	01030034 	movhi	r4,3072
 c0024b4:	2111a004 	addi	r4,r4,18048
 c0024b8:	e17ffe17 	ldw	r5,-8(fp)
 c0024bc:	000d883a 	mov	r6,zero
 c0024c0:	01c07fc4 	movi	r7,511
 c0024c4:	c0023b80 	call	c0023b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 c0024c8:	01030034 	movhi	r4,3072
 c0024cc:	2111a604 	addi	r4,r4,18072
 c0024d0:	e17fff17 	ldw	r5,-4(fp)
 c0024d4:	01800044 	movi	r6,1
 c0024d8:	01c07fc4 	movi	r7,511
 c0024dc:	c0023b80 	call	c0023b8 <alt_open_fd>
}  
 c0024e0:	e037883a 	mov	sp,fp
 c0024e4:	dfc00117 	ldw	ra,4(sp)
 c0024e8:	df000017 	ldw	fp,0(sp)
 c0024ec:	dec00204 	addi	sp,sp,8
 c0024f0:	f800283a 	ret

0c0024f4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 c0024f4:	deffef04 	addi	sp,sp,-68
 c0024f8:	df001015 	stw	fp,64(sp)
 c0024fc:	df001004 	addi	fp,sp,64
 c002500:	e13ffc15 	stw	r4,-16(fp)
 c002504:	e17ffd15 	stw	r5,-12(fp)
 c002508:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 c00250c:	00bffa84 	movi	r2,-22
 c002510:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 c002514:	e0bffc17 	ldw	r2,-16(fp)
 c002518:	10800828 	cmpgeui	r2,r2,32
 c00251c:	1000601e 	bne	r2,zero,c0026a0 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c002520:	0005303a 	rdctl	r2,status
 c002524:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c002528:	e0fff917 	ldw	r3,-28(fp)
 c00252c:	00bfff84 	movi	r2,-2
 c002530:	1884703a 	and	r2,r3,r2
 c002534:	1001703a 	wrctl	status,r2
  
  return context;
 c002538:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 c00253c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 c002540:	e0bffc17 	ldw	r2,-16(fp)
 c002544:	00c30034 	movhi	r3,3072
 c002548:	18d31504 	addi	r3,r3,19540
 c00254c:	100490fa 	slli	r2,r2,3
 c002550:	10c7883a 	add	r3,r2,r3
 c002554:	e0bffe17 	ldw	r2,-8(fp)
 c002558:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 c00255c:	e0bffc17 	ldw	r2,-16(fp)
 c002560:	00c30034 	movhi	r3,3072
 c002564:	18d31504 	addi	r3,r3,19540
 c002568:	100490fa 	slli	r2,r2,3
 c00256c:	10c5883a 	add	r2,r2,r3
 c002570:	10c00104 	addi	r3,r2,4
 c002574:	e0bffd17 	ldw	r2,-12(fp)
 c002578:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 c00257c:	e0bffe17 	ldw	r2,-8(fp)
 c002580:	1005003a 	cmpeq	r2,r2,zero
 c002584:	1000201e 	bne	r2,zero,c002608 <alt_irq_register+0x114>
 c002588:	e0bffc17 	ldw	r2,-16(fp)
 c00258c:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c002590:	0005303a 	rdctl	r2,status
 c002594:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c002598:	e0fff617 	ldw	r3,-40(fp)
 c00259c:	00bfff84 	movi	r2,-2
 c0025a0:	1884703a 	and	r2,r3,r2
 c0025a4:	1001703a 	wrctl	status,r2
  
  return context;
 c0025a8:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c0025ac:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 c0025b0:	e0fff717 	ldw	r3,-36(fp)
 c0025b4:	00800044 	movi	r2,1
 c0025b8:	10c4983a 	sll	r2,r2,r3
 c0025bc:	1007883a 	mov	r3,r2
 c0025c0:	00830034 	movhi	r2,3072
 c0025c4:	10931104 	addi	r2,r2,19524
 c0025c8:	10800017 	ldw	r2,0(r2)
 c0025cc:	1886b03a 	or	r3,r3,r2
 c0025d0:	00830034 	movhi	r2,3072
 c0025d4:	10931104 	addi	r2,r2,19524
 c0025d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c0025dc:	00830034 	movhi	r2,3072
 c0025e0:	10931104 	addi	r2,r2,19524
 c0025e4:	10800017 	ldw	r2,0(r2)
 c0025e8:	100170fa 	wrctl	ienable,r2
 c0025ec:	e0bff817 	ldw	r2,-32(fp)
 c0025f0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c0025f4:	e0bff517 	ldw	r2,-44(fp)
 c0025f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c0025fc:	0005883a 	mov	r2,zero
 c002600:	e0bfff15 	stw	r2,-4(fp)
 c002604:	00002006 	br	c002688 <alt_irq_register+0x194>
 c002608:	e0bffc17 	ldw	r2,-16(fp)
 c00260c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c002610:	0005303a 	rdctl	r2,status
 c002614:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c002618:	e0fff217 	ldw	r3,-56(fp)
 c00261c:	00bfff84 	movi	r2,-2
 c002620:	1884703a 	and	r2,r3,r2
 c002624:	1001703a 	wrctl	status,r2
  
  return context;
 c002628:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 c00262c:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 c002630:	e0fff317 	ldw	r3,-52(fp)
 c002634:	00800044 	movi	r2,1
 c002638:	10c4983a 	sll	r2,r2,r3
 c00263c:	0084303a 	nor	r2,zero,r2
 c002640:	1007883a 	mov	r3,r2
 c002644:	00830034 	movhi	r2,3072
 c002648:	10931104 	addi	r2,r2,19524
 c00264c:	10800017 	ldw	r2,0(r2)
 c002650:	1886703a 	and	r3,r3,r2
 c002654:	00830034 	movhi	r2,3072
 c002658:	10931104 	addi	r2,r2,19524
 c00265c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 c002660:	00830034 	movhi	r2,3072
 c002664:	10931104 	addi	r2,r2,19524
 c002668:	10800017 	ldw	r2,0(r2)
 c00266c:	100170fa 	wrctl	ienable,r2
 c002670:	e0bff417 	ldw	r2,-48(fp)
 c002674:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c002678:	e0bff117 	ldw	r2,-60(fp)
 c00267c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 c002680:	0005883a 	mov	r2,zero
 c002684:	e0bfff15 	stw	r2,-4(fp)
 c002688:	e0bfff17 	ldw	r2,-4(fp)
 c00268c:	e0bffb15 	stw	r2,-20(fp)
 c002690:	e0bffa17 	ldw	r2,-24(fp)
 c002694:	e0bff015 	stw	r2,-64(fp)
 c002698:	e0bff017 	ldw	r2,-64(fp)
 c00269c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 c0026a0:	e0bffb17 	ldw	r2,-20(fp)
}
 c0026a4:	e037883a 	mov	sp,fp
 c0026a8:	df000017 	ldw	fp,0(sp)
 c0026ac:	dec00104 	addi	sp,sp,4
 c0026b0:	f800283a 	ret

0c0026b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 c0026b4:	defffc04 	addi	sp,sp,-16
 c0026b8:	df000315 	stw	fp,12(sp)
 c0026bc:	df000304 	addi	fp,sp,12
 c0026c0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 c0026c4:	e0bffe17 	ldw	r2,-8(fp)
 c0026c8:	10800217 	ldw	r2,8(r2)
 c0026cc:	10d00034 	orhi	r3,r2,16384
 c0026d0:	e0bffe17 	ldw	r2,-8(fp)
 c0026d4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c0026d8:	e03ffd15 	stw	zero,-12(fp)
 c0026dc:	00002006 	br	c002760 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 c0026e0:	e0bffd17 	ldw	r2,-12(fp)
 c0026e4:	00c30034 	movhi	r3,3072
 c0026e8:	18d1a004 	addi	r3,r3,18048
 c0026ec:	10800324 	muli	r2,r2,12
 c0026f0:	10c5883a 	add	r2,r2,r3
 c0026f4:	10c00017 	ldw	r3,0(r2)
 c0026f8:	e0bffe17 	ldw	r2,-8(fp)
 c0026fc:	10800017 	ldw	r2,0(r2)
 c002700:	1880141e 	bne	r3,r2,c002754 <alt_file_locked+0xa0>
 c002704:	e0bffd17 	ldw	r2,-12(fp)
 c002708:	00c30034 	movhi	r3,3072
 c00270c:	18d1a004 	addi	r3,r3,18048
 c002710:	10800324 	muli	r2,r2,12
 c002714:	10c5883a 	add	r2,r2,r3
 c002718:	10800204 	addi	r2,r2,8
 c00271c:	10800017 	ldw	r2,0(r2)
 c002720:	1004403a 	cmpge	r2,r2,zero
 c002724:	10000b1e 	bne	r2,zero,c002754 <alt_file_locked+0xa0>
 c002728:	e0bffd17 	ldw	r2,-12(fp)
 c00272c:	10800324 	muli	r2,r2,12
 c002730:	1007883a 	mov	r3,r2
 c002734:	00830034 	movhi	r2,3072
 c002738:	1091a004 	addi	r2,r2,18048
 c00273c:	1887883a 	add	r3,r3,r2
 c002740:	e0bffe17 	ldw	r2,-8(fp)
 c002744:	18800326 	beq	r3,r2,c002754 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 c002748:	00bffcc4 	movi	r2,-13
 c00274c:	e0bfff15 	stw	r2,-4(fp)
 c002750:	00000a06 	br	c00277c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 c002754:	e0bffd17 	ldw	r2,-12(fp)
 c002758:	10800044 	addi	r2,r2,1
 c00275c:	e0bffd15 	stw	r2,-12(fp)
 c002760:	00830034 	movhi	r2,3072
 c002764:	10930504 	addi	r2,r2,19476
 c002768:	10800017 	ldw	r2,0(r2)
 c00276c:	1007883a 	mov	r3,r2
 c002770:	e0bffd17 	ldw	r2,-12(fp)
 c002774:	18bfda2e 	bgeu	r3,r2,c0026e0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 c002778:	e03fff15 	stw	zero,-4(fp)
 c00277c:	e0bfff17 	ldw	r2,-4(fp)
}
 c002780:	e037883a 	mov	sp,fp
 c002784:	df000017 	ldw	fp,0(sp)
 c002788:	dec00104 	addi	sp,sp,4
 c00278c:	f800283a 	ret

0c002790 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 c002790:	defff404 	addi	sp,sp,-48
 c002794:	dfc00b15 	stw	ra,44(sp)
 c002798:	df000a15 	stw	fp,40(sp)
 c00279c:	df000a04 	addi	fp,sp,40
 c0027a0:	e13ffb15 	stw	r4,-20(fp)
 c0027a4:	e17ffc15 	stw	r5,-16(fp)
 c0027a8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 c0027ac:	00bfffc4 	movi	r2,-1
 c0027b0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 c0027b4:	00bffb44 	movi	r2,-19
 c0027b8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 c0027bc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 c0027c0:	e13ffb17 	ldw	r4,-20(fp)
 c0027c4:	01430034 	movhi	r5,3072
 c0027c8:	29530304 	addi	r5,r5,19468
 c0027cc:	c0023240 	call	c002324 <alt_find_dev>
 c0027d0:	e0bffa15 	stw	r2,-24(fp)
 c0027d4:	e0bffa17 	ldw	r2,-24(fp)
 c0027d8:	1004c03a 	cmpne	r2,r2,zero
 c0027dc:	1000051e 	bne	r2,zero,c0027f4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 c0027e0:	e13ffb17 	ldw	r4,-20(fp)
 c0027e4:	c002b9c0 	call	c002b9c <alt_find_file>
 c0027e8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 c0027ec:	00800044 	movi	r2,1
 c0027f0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 c0027f4:	e0bffa17 	ldw	r2,-24(fp)
 c0027f8:	1005003a 	cmpeq	r2,r2,zero
 c0027fc:	1000301e 	bne	r2,zero,c0028c0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 c002800:	e13ffa17 	ldw	r4,-24(fp)
 c002804:	c002cbc0 	call	c002cbc <alt_get_fd>
 c002808:	e0bff815 	stw	r2,-32(fp)
 c00280c:	e0bff817 	ldw	r2,-32(fp)
 c002810:	1004403a 	cmpge	r2,r2,zero
 c002814:	1000031e 	bne	r2,zero,c002824 <open+0x94>
    {
      status = index;
 c002818:	e0bff817 	ldw	r2,-32(fp)
 c00281c:	e0bff715 	stw	r2,-36(fp)
 c002820:	00002906 	br	c0028c8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 c002824:	e0bff817 	ldw	r2,-32(fp)
 c002828:	10800324 	muli	r2,r2,12
 c00282c:	1007883a 	mov	r3,r2
 c002830:	00830034 	movhi	r2,3072
 c002834:	1091a004 	addi	r2,r2,18048
 c002838:	1885883a 	add	r2,r3,r2
 c00283c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 c002840:	e0fffc17 	ldw	r3,-16(fp)
 c002844:	00900034 	movhi	r2,16384
 c002848:	10bfffc4 	addi	r2,r2,-1
 c00284c:	1886703a 	and	r3,r3,r2
 c002850:	e0bff917 	ldw	r2,-28(fp)
 c002854:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 c002858:	e0bff617 	ldw	r2,-40(fp)
 c00285c:	1004c03a 	cmpne	r2,r2,zero
 c002860:	1000061e 	bne	r2,zero,c00287c <open+0xec>
 c002864:	e13ff917 	ldw	r4,-28(fp)
 c002868:	c0026b40 	call	c0026b4 <alt_file_locked>
 c00286c:	e0bff715 	stw	r2,-36(fp)
 c002870:	e0bff717 	ldw	r2,-36(fp)
 c002874:	1004803a 	cmplt	r2,r2,zero
 c002878:	1000131e 	bne	r2,zero,c0028c8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 c00287c:	e0bffa17 	ldw	r2,-24(fp)
 c002880:	10800317 	ldw	r2,12(r2)
 c002884:	1005003a 	cmpeq	r2,r2,zero
 c002888:	1000091e 	bne	r2,zero,c0028b0 <open+0x120>
 c00288c:	e0bffa17 	ldw	r2,-24(fp)
 c002890:	10800317 	ldw	r2,12(r2)
 c002894:	e13ff917 	ldw	r4,-28(fp)
 c002898:	e17ffb17 	ldw	r5,-20(fp)
 c00289c:	e1bffc17 	ldw	r6,-16(fp)
 c0028a0:	e1fffd17 	ldw	r7,-12(fp)
 c0028a4:	103ee83a 	callr	r2
 c0028a8:	e0bfff15 	stw	r2,-4(fp)
 c0028ac:	00000106 	br	c0028b4 <open+0x124>
 c0028b0:	e03fff15 	stw	zero,-4(fp)
 c0028b4:	e0bfff17 	ldw	r2,-4(fp)
 c0028b8:	e0bff715 	stw	r2,-36(fp)
 c0028bc:	00000206 	br	c0028c8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 c0028c0:	00bffb44 	movi	r2,-19
 c0028c4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 c0028c8:	e0bff717 	ldw	r2,-36(fp)
 c0028cc:	1004403a 	cmpge	r2,r2,zero
 c0028d0:	1000091e 	bne	r2,zero,c0028f8 <open+0x168>
  {
    alt_release_fd (index);  
 c0028d4:	e13ff817 	ldw	r4,-32(fp)
 c0028d8:	c0029780 	call	c002978 <alt_release_fd>
    ALT_ERRNO = -status;
 c0028dc:	c0029180 	call	c002918 <alt_get_errno>
 c0028e0:	e0fff717 	ldw	r3,-36(fp)
 c0028e4:	00c7c83a 	sub	r3,zero,r3
 c0028e8:	10c00015 	stw	r3,0(r2)
    return -1;
 c0028ec:	00bfffc4 	movi	r2,-1
 c0028f0:	e0bffe15 	stw	r2,-8(fp)
 c0028f4:	00000206 	br	c002900 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 c0028f8:	e0bff817 	ldw	r2,-32(fp)
 c0028fc:	e0bffe15 	stw	r2,-8(fp)
 c002900:	e0bffe17 	ldw	r2,-8(fp)
}
 c002904:	e037883a 	mov	sp,fp
 c002908:	dfc00117 	ldw	ra,4(sp)
 c00290c:	df000017 	ldw	fp,0(sp)
 c002910:	dec00204 	addi	sp,sp,8
 c002914:	f800283a 	ret

0c002918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 c002918:	defffd04 	addi	sp,sp,-12
 c00291c:	dfc00215 	stw	ra,8(sp)
 c002920:	df000115 	stw	fp,4(sp)
 c002924:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 c002928:	00830034 	movhi	r2,3072
 c00292c:	10930604 	addi	r2,r2,19480
 c002930:	10800017 	ldw	r2,0(r2)
 c002934:	1005003a 	cmpeq	r2,r2,zero
 c002938:	1000061e 	bne	r2,zero,c002954 <alt_get_errno+0x3c>
 c00293c:	00830034 	movhi	r2,3072
 c002940:	10930604 	addi	r2,r2,19480
 c002944:	10800017 	ldw	r2,0(r2)
 c002948:	103ee83a 	callr	r2
 c00294c:	e0bfff15 	stw	r2,-4(fp)
 c002950:	00000306 	br	c002960 <alt_get_errno+0x48>
 c002954:	00830034 	movhi	r2,3072
 c002958:	10931404 	addi	r2,r2,19536
 c00295c:	e0bfff15 	stw	r2,-4(fp)
 c002960:	e0bfff17 	ldw	r2,-4(fp)
}
 c002964:	e037883a 	mov	sp,fp
 c002968:	dfc00117 	ldw	ra,4(sp)
 c00296c:	df000017 	ldw	fp,0(sp)
 c002970:	dec00204 	addi	sp,sp,8
 c002974:	f800283a 	ret

0c002978 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 c002978:	defffe04 	addi	sp,sp,-8
 c00297c:	df000115 	stw	fp,4(sp)
 c002980:	df000104 	addi	fp,sp,4
 c002984:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 c002988:	e0bfff17 	ldw	r2,-4(fp)
 c00298c:	108000d0 	cmplti	r2,r2,3
 c002990:	10000d1e 	bne	r2,zero,c0029c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 c002994:	e0bfff17 	ldw	r2,-4(fp)
 c002998:	00c30034 	movhi	r3,3072
 c00299c:	18d1a004 	addi	r3,r3,18048
 c0029a0:	10800324 	muli	r2,r2,12
 c0029a4:	10c5883a 	add	r2,r2,r3
 c0029a8:	10800204 	addi	r2,r2,8
 c0029ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 c0029b0:	e0bfff17 	ldw	r2,-4(fp)
 c0029b4:	00c30034 	movhi	r3,3072
 c0029b8:	18d1a004 	addi	r3,r3,18048
 c0029bc:	10800324 	muli	r2,r2,12
 c0029c0:	10c5883a 	add	r2,r2,r3
 c0029c4:	10000015 	stw	zero,0(r2)
  }
}
 c0029c8:	e037883a 	mov	sp,fp
 c0029cc:	df000017 	ldw	fp,0(sp)
 c0029d0:	dec00104 	addi	sp,sp,4
 c0029d4:	f800283a 	ret

0c0029d8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 c0029d8:	defffa04 	addi	sp,sp,-24
 c0029dc:	df000515 	stw	fp,20(sp)
 c0029e0:	df000504 	addi	fp,sp,20
 c0029e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 c0029e8:	0005303a 	rdctl	r2,status
 c0029ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 c0029f0:	e0fffd17 	ldw	r3,-12(fp)
 c0029f4:	00bfff84 	movi	r2,-2
 c0029f8:	1884703a 	and	r2,r3,r2
 c0029fc:	1001703a 	wrctl	status,r2
  
  return context;
 c002a00:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 c002a04:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 c002a08:	e0bfff17 	ldw	r2,-4(fp)
 c002a0c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 c002a10:	e0bffc17 	ldw	r2,-16(fp)
 c002a14:	10c00017 	ldw	r3,0(r2)
 c002a18:	e0bffc17 	ldw	r2,-16(fp)
 c002a1c:	10800117 	ldw	r2,4(r2)
 c002a20:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 c002a24:	e0bffc17 	ldw	r2,-16(fp)
 c002a28:	10c00117 	ldw	r3,4(r2)
 c002a2c:	e0bffc17 	ldw	r2,-16(fp)
 c002a30:	10800017 	ldw	r2,0(r2)
 c002a34:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 c002a38:	e0fffc17 	ldw	r3,-16(fp)
 c002a3c:	e0bffc17 	ldw	r2,-16(fp)
 c002a40:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 c002a44:	e0fffc17 	ldw	r3,-16(fp)
 c002a48:	e0bffc17 	ldw	r2,-16(fp)
 c002a4c:	18800015 	stw	r2,0(r3)
 c002a50:	e0bffe17 	ldw	r2,-8(fp)
 c002a54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 c002a58:	e0bffb17 	ldw	r2,-20(fp)
 c002a5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 c002a60:	e037883a 	mov	sp,fp
 c002a64:	df000017 	ldw	fp,0(sp)
 c002a68:	dec00104 	addi	sp,sp,4
 c002a6c:	f800283a 	ret

0c002a70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 c002a70:	defffb04 	addi	sp,sp,-20
 c002a74:	dfc00415 	stw	ra,16(sp)
 c002a78:	df000315 	stw	fp,12(sp)
 c002a7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 c002a80:	d0a00817 	ldw	r2,-32736(gp)
 c002a84:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 c002a88:	d0a01317 	ldw	r2,-32692(gp)
 c002a8c:	10800044 	addi	r2,r2,1
 c002a90:	d0a01315 	stw	r2,-32692(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c002a94:	00003106 	br	c002b5c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 c002a98:	e0bffe17 	ldw	r2,-8(fp)
 c002a9c:	10800017 	ldw	r2,0(r2)
 c002aa0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 c002aa4:	e0bffe17 	ldw	r2,-8(fp)
 c002aa8:	10800403 	ldbu	r2,16(r2)
 c002aac:	10803fcc 	andi	r2,r2,255
 c002ab0:	1005003a 	cmpeq	r2,r2,zero
 c002ab4:	1000051e 	bne	r2,zero,c002acc <alt_tick+0x5c>
 c002ab8:	d0a01317 	ldw	r2,-32692(gp)
 c002abc:	1004c03a 	cmpne	r2,r2,zero
 c002ac0:	1000021e 	bne	r2,zero,c002acc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 c002ac4:	e0bffe17 	ldw	r2,-8(fp)
 c002ac8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 c002acc:	e0bffe17 	ldw	r2,-8(fp)
 c002ad0:	10c00217 	ldw	r3,8(r2)
 c002ad4:	d0a01317 	ldw	r2,-32692(gp)
 c002ad8:	10c01e36 	bltu	r2,r3,c002b54 <alt_tick+0xe4>
 c002adc:	e0bffe17 	ldw	r2,-8(fp)
 c002ae0:	10800403 	ldbu	r2,16(r2)
 c002ae4:	10803fcc 	andi	r2,r2,255
 c002ae8:	1004c03a 	cmpne	r2,r2,zero
 c002aec:	1000191e 	bne	r2,zero,c002b54 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 c002af0:	e0bffe17 	ldw	r2,-8(fp)
 c002af4:	10c00317 	ldw	r3,12(r2)
 c002af8:	e0bffe17 	ldw	r2,-8(fp)
 c002afc:	11000517 	ldw	r4,20(r2)
 c002b00:	183ee83a 	callr	r3
 c002b04:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 c002b08:	e0bffd17 	ldw	r2,-12(fp)
 c002b0c:	1004c03a 	cmpne	r2,r2,zero
 c002b10:	1000031e 	bne	r2,zero,c002b20 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 c002b14:	e13ffe17 	ldw	r4,-8(fp)
 c002b18:	c0029d80 	call	c0029d8 <alt_alarm_stop>
 c002b1c:	00000d06 	br	c002b54 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 c002b20:	e0bffe17 	ldw	r2,-8(fp)
 c002b24:	10c00217 	ldw	r3,8(r2)
 c002b28:	e0bffd17 	ldw	r2,-12(fp)
 c002b2c:	1887883a 	add	r3,r3,r2
 c002b30:	e0bffe17 	ldw	r2,-8(fp)
 c002b34:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 c002b38:	e0bffe17 	ldw	r2,-8(fp)
 c002b3c:	10c00217 	ldw	r3,8(r2)
 c002b40:	d0a01317 	ldw	r2,-32692(gp)
 c002b44:	1880032e 	bgeu	r3,r2,c002b54 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 c002b48:	e0fffe17 	ldw	r3,-8(fp)
 c002b4c:	00800044 	movi	r2,1
 c002b50:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 c002b54:	e0bfff17 	ldw	r2,-4(fp)
 c002b58:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 c002b5c:	d0e00804 	addi	r3,gp,-32736
 c002b60:	e0bffe17 	ldw	r2,-8(fp)
 c002b64:	10ffcc1e 	bne	r2,r3,c002a98 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 c002b68:	e037883a 	mov	sp,fp
 c002b6c:	dfc00117 	ldw	ra,4(sp)
 c002b70:	df000017 	ldw	fp,0(sp)
 c002b74:	dec00204 	addi	sp,sp,8
 c002b78:	f800283a 	ret

0c002b7c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 c002b7c:	deffff04 	addi	sp,sp,-4
 c002b80:	df000015 	stw	fp,0(sp)
 c002b84:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 c002b88:	000170fa 	wrctl	ienable,zero
}
 c002b8c:	e037883a 	mov	sp,fp
 c002b90:	df000017 	ldw	fp,0(sp)
 c002b94:	dec00104 	addi	sp,sp,4
 c002b98:	f800283a 	ret

0c002b9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 c002b9c:	defffa04 	addi	sp,sp,-24
 c002ba0:	dfc00515 	stw	ra,20(sp)
 c002ba4:	df000415 	stw	fp,16(sp)
 c002ba8:	df000404 	addi	fp,sp,16
 c002bac:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 c002bb0:	00830034 	movhi	r2,3072
 c002bb4:	10930104 	addi	r2,r2,19460
 c002bb8:	10800017 	ldw	r2,0(r2)
 c002bbc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c002bc0:	00003306 	br	c002c90 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 c002bc4:	e0bffd17 	ldw	r2,-12(fp)
 c002bc8:	11000217 	ldw	r4,8(r2)
 c002bcc:	c002ed40 	call	c002ed4 <strlen>
 c002bd0:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 c002bd4:	e0bffd17 	ldw	r2,-12(fp)
 c002bd8:	10c00217 	ldw	r3,8(r2)
 c002bdc:	e0bffc17 	ldw	r2,-16(fp)
 c002be0:	1885883a 	add	r2,r3,r2
 c002be4:	10bfffc4 	addi	r2,r2,-1
 c002be8:	10800003 	ldbu	r2,0(r2)
 c002bec:	10803fcc 	andi	r2,r2,255
 c002bf0:	1080201c 	xori	r2,r2,128
 c002bf4:	10bfe004 	addi	r2,r2,-128
 c002bf8:	10800bd8 	cmpnei	r2,r2,47
 c002bfc:	1000031e 	bne	r2,zero,c002c0c <alt_find_file+0x70>
    {
      len -= 1;
 c002c00:	e0bffc17 	ldw	r2,-16(fp)
 c002c04:	10bfffc4 	addi	r2,r2,-1
 c002c08:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 c002c0c:	e0bffc17 	ldw	r2,-16(fp)
 c002c10:	1007883a 	mov	r3,r2
 c002c14:	e0bffe17 	ldw	r2,-8(fp)
 c002c18:	1885883a 	add	r2,r3,r2
 c002c1c:	10800003 	ldbu	r2,0(r2)
 c002c20:	10803fcc 	andi	r2,r2,255
 c002c24:	1080201c 	xori	r2,r2,128
 c002c28:	10bfe004 	addi	r2,r2,-128
 c002c2c:	10800be0 	cmpeqi	r2,r2,47
 c002c30:	10000a1e 	bne	r2,zero,c002c5c <alt_find_file+0xc0>
 c002c34:	e0bffc17 	ldw	r2,-16(fp)
 c002c38:	1007883a 	mov	r3,r2
 c002c3c:	e0bffe17 	ldw	r2,-8(fp)
 c002c40:	1885883a 	add	r2,r3,r2
 c002c44:	10800003 	ldbu	r2,0(r2)
 c002c48:	10803fcc 	andi	r2,r2,255
 c002c4c:	1080201c 	xori	r2,r2,128
 c002c50:	10bfe004 	addi	r2,r2,-128
 c002c54:	1004c03a 	cmpne	r2,r2,zero
 c002c58:	10000a1e 	bne	r2,zero,c002c84 <alt_find_file+0xe8>
 c002c5c:	e0bffd17 	ldw	r2,-12(fp)
 c002c60:	11000217 	ldw	r4,8(r2)
 c002c64:	e1bffc17 	ldw	r6,-16(fp)
 c002c68:	e17ffe17 	ldw	r5,-8(fp)
 c002c6c:	c002dc00 	call	c002dc0 <memcmp>
 c002c70:	1004c03a 	cmpne	r2,r2,zero
 c002c74:	1000031e 	bne	r2,zero,c002c84 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 c002c78:	e0bffd17 	ldw	r2,-12(fp)
 c002c7c:	e0bfff15 	stw	r2,-4(fp)
 c002c80:	00000806 	br	c002ca4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 c002c84:	e0bffd17 	ldw	r2,-12(fp)
 c002c88:	10800017 	ldw	r2,0(r2)
 c002c8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 c002c90:	00c30034 	movhi	r3,3072
 c002c94:	18d30104 	addi	r3,r3,19460
 c002c98:	e0bffd17 	ldw	r2,-12(fp)
 c002c9c:	10ffc91e 	bne	r2,r3,c002bc4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 c002ca0:	e03fff15 	stw	zero,-4(fp)
 c002ca4:	e0bfff17 	ldw	r2,-4(fp)
}
 c002ca8:	e037883a 	mov	sp,fp
 c002cac:	dfc00117 	ldw	ra,4(sp)
 c002cb0:	df000017 	ldw	fp,0(sp)
 c002cb4:	dec00204 	addi	sp,sp,8
 c002cb8:	f800283a 	ret

0c002cbc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 c002cbc:	defffc04 	addi	sp,sp,-16
 c002cc0:	df000315 	stw	fp,12(sp)
 c002cc4:	df000304 	addi	fp,sp,12
 c002cc8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 c002ccc:	00bffa04 	movi	r2,-24
 c002cd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c002cd4:	e03ffe15 	stw	zero,-8(fp)
 c002cd8:	00001e06 	br	c002d54 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 c002cdc:	e0bffe17 	ldw	r2,-8(fp)
 c002ce0:	00c30034 	movhi	r3,3072
 c002ce4:	18d1a004 	addi	r3,r3,18048
 c002ce8:	10800324 	muli	r2,r2,12
 c002cec:	10c5883a 	add	r2,r2,r3
 c002cf0:	10800017 	ldw	r2,0(r2)
 c002cf4:	1004c03a 	cmpne	r2,r2,zero
 c002cf8:	1000131e 	bne	r2,zero,c002d48 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 c002cfc:	e0bffe17 	ldw	r2,-8(fp)
 c002d00:	00c30034 	movhi	r3,3072
 c002d04:	18d1a004 	addi	r3,r3,18048
 c002d08:	10800324 	muli	r2,r2,12
 c002d0c:	10c7883a 	add	r3,r2,r3
 c002d10:	e0bfff17 	ldw	r2,-4(fp)
 c002d14:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 c002d18:	00830034 	movhi	r2,3072
 c002d1c:	10930504 	addi	r2,r2,19476
 c002d20:	10c00017 	ldw	r3,0(r2)
 c002d24:	e0bffe17 	ldw	r2,-8(fp)
 c002d28:	1880040e 	bge	r3,r2,c002d3c <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 c002d2c:	00c30034 	movhi	r3,3072
 c002d30:	18d30504 	addi	r3,r3,19476
 c002d34:	e0bffe17 	ldw	r2,-8(fp)
 c002d38:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 c002d3c:	e0bffe17 	ldw	r2,-8(fp)
 c002d40:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 c002d44:	00000606 	br	c002d60 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 c002d48:	e0bffe17 	ldw	r2,-8(fp)
 c002d4c:	10800044 	addi	r2,r2,1
 c002d50:	e0bffe15 	stw	r2,-8(fp)
 c002d54:	e0bffe17 	ldw	r2,-8(fp)
 c002d58:	10800810 	cmplti	r2,r2,32
 c002d5c:	103fdf1e 	bne	r2,zero,c002cdc <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 c002d60:	e0bffd17 	ldw	r2,-12(fp)
}
 c002d64:	e037883a 	mov	sp,fp
 c002d68:	df000017 	ldw	fp,0(sp)
 c002d6c:	dec00104 	addi	sp,sp,4
 c002d70:	f800283a 	ret

0c002d74 <atexit>:
 c002d74:	200b883a 	mov	r5,r4
 c002d78:	000d883a 	mov	r6,zero
 c002d7c:	0009883a 	mov	r4,zero
 c002d80:	000f883a 	mov	r7,zero
 c002d84:	c002f481 	jmpi	c002f48 <__register_exitproc>

0c002d88 <exit>:
 c002d88:	defffe04 	addi	sp,sp,-8
 c002d8c:	000b883a 	mov	r5,zero
 c002d90:	dc000015 	stw	r16,0(sp)
 c002d94:	dfc00115 	stw	ra,4(sp)
 c002d98:	2021883a 	mov	r16,r4
 c002d9c:	c0030800 	call	c003080 <__call_exitprocs>
 c002da0:	00830034 	movhi	r2,3072
 c002da4:	10930b04 	addi	r2,r2,19500
 c002da8:	11000017 	ldw	r4,0(r2)
 c002dac:	20800f17 	ldw	r2,60(r4)
 c002db0:	10000126 	beq	r2,zero,c002db8 <exit+0x30>
 c002db4:	103ee83a 	callr	r2
 c002db8:	8009883a 	mov	r4,r16
 c002dbc:	c0032700 	call	c003270 <_exit>

0c002dc0 <memcmp>:
 c002dc0:	00c000c4 	movi	r3,3
 c002dc4:	1980032e 	bgeu	r3,r6,c002dd4 <memcmp+0x14>
 c002dc8:	2144b03a 	or	r2,r4,r5
 c002dcc:	10c4703a 	and	r2,r2,r3
 c002dd0:	10000f26 	beq	r2,zero,c002e10 <memcmp+0x50>
 c002dd4:	31ffffc4 	addi	r7,r6,-1
 c002dd8:	3000061e 	bne	r6,zero,c002df4 <memcmp+0x34>
 c002ddc:	00000a06 	br	c002e08 <memcmp+0x48>
 c002de0:	39ffffc4 	addi	r7,r7,-1
 c002de4:	00bfffc4 	movi	r2,-1
 c002de8:	21000044 	addi	r4,r4,1
 c002dec:	29400044 	addi	r5,r5,1
 c002df0:	38800526 	beq	r7,r2,c002e08 <memcmp+0x48>
 c002df4:	20c00003 	ldbu	r3,0(r4)
 c002df8:	28800003 	ldbu	r2,0(r5)
 c002dfc:	18bff826 	beq	r3,r2,c002de0 <memcmp+0x20>
 c002e00:	1885c83a 	sub	r2,r3,r2
 c002e04:	f800283a 	ret
 c002e08:	0005883a 	mov	r2,zero
 c002e0c:	f800283a 	ret
 c002e10:	180f883a 	mov	r7,r3
 c002e14:	20c00017 	ldw	r3,0(r4)
 c002e18:	28800017 	ldw	r2,0(r5)
 c002e1c:	18bfed1e 	bne	r3,r2,c002dd4 <memcmp+0x14>
 c002e20:	31bfff04 	addi	r6,r6,-4
 c002e24:	21000104 	addi	r4,r4,4
 c002e28:	29400104 	addi	r5,r5,4
 c002e2c:	39bff936 	bltu	r7,r6,c002e14 <memcmp+0x54>
 c002e30:	003fe806 	br	c002dd4 <memcmp+0x14>

0c002e34 <memcpy>:
 c002e34:	01c003c4 	movi	r7,15
 c002e38:	2007883a 	mov	r3,r4
 c002e3c:	3980032e 	bgeu	r7,r6,c002e4c <memcpy+0x18>
 c002e40:	2904b03a 	or	r2,r5,r4
 c002e44:	108000cc 	andi	r2,r2,3
 c002e48:	10000926 	beq	r2,zero,c002e70 <memcpy+0x3c>
 c002e4c:	30000626 	beq	r6,zero,c002e68 <memcpy+0x34>
 c002e50:	30cd883a 	add	r6,r6,r3
 c002e54:	28800003 	ldbu	r2,0(r5)
 c002e58:	29400044 	addi	r5,r5,1
 c002e5c:	18800005 	stb	r2,0(r3)
 c002e60:	18c00044 	addi	r3,r3,1
 c002e64:	30fffb1e 	bne	r6,r3,c002e54 <memcpy+0x20>
 c002e68:	2005883a 	mov	r2,r4
 c002e6c:	f800283a 	ret
 c002e70:	3811883a 	mov	r8,r7
 c002e74:	200f883a 	mov	r7,r4
 c002e78:	28c00017 	ldw	r3,0(r5)
 c002e7c:	31bffc04 	addi	r6,r6,-16
 c002e80:	38c00015 	stw	r3,0(r7)
 c002e84:	28800117 	ldw	r2,4(r5)
 c002e88:	38800115 	stw	r2,4(r7)
 c002e8c:	28c00217 	ldw	r3,8(r5)
 c002e90:	38c00215 	stw	r3,8(r7)
 c002e94:	28800317 	ldw	r2,12(r5)
 c002e98:	29400404 	addi	r5,r5,16
 c002e9c:	38800315 	stw	r2,12(r7)
 c002ea0:	39c00404 	addi	r7,r7,16
 c002ea4:	41bff436 	bltu	r8,r6,c002e78 <memcpy+0x44>
 c002ea8:	008000c4 	movi	r2,3
 c002eac:	1180072e 	bgeu	r2,r6,c002ecc <memcpy+0x98>
 c002eb0:	1007883a 	mov	r3,r2
 c002eb4:	28800017 	ldw	r2,0(r5)
 c002eb8:	31bfff04 	addi	r6,r6,-4
 c002ebc:	29400104 	addi	r5,r5,4
 c002ec0:	38800015 	stw	r2,0(r7)
 c002ec4:	39c00104 	addi	r7,r7,4
 c002ec8:	19bffa36 	bltu	r3,r6,c002eb4 <memcpy+0x80>
 c002ecc:	3807883a 	mov	r3,r7
 c002ed0:	003fde06 	br	c002e4c <memcpy+0x18>

0c002ed4 <strlen>:
 c002ed4:	208000cc 	andi	r2,r4,3
 c002ed8:	2011883a 	mov	r8,r4
 c002edc:	1000161e 	bne	r2,zero,c002f38 <strlen+0x64>
 c002ee0:	20c00017 	ldw	r3,0(r4)
 c002ee4:	017fbff4 	movhi	r5,65279
 c002ee8:	297fbfc4 	addi	r5,r5,-257
 c002eec:	01e02074 	movhi	r7,32897
 c002ef0:	39e02004 	addi	r7,r7,-32640
 c002ef4:	1945883a 	add	r2,r3,r5
 c002ef8:	11c4703a 	and	r2,r2,r7
 c002efc:	00c6303a 	nor	r3,zero,r3
 c002f00:	1886703a 	and	r3,r3,r2
 c002f04:	18000c1e 	bne	r3,zero,c002f38 <strlen+0x64>
 c002f08:	280d883a 	mov	r6,r5
 c002f0c:	380b883a 	mov	r5,r7
 c002f10:	21000104 	addi	r4,r4,4
 c002f14:	20800017 	ldw	r2,0(r4)
 c002f18:	1187883a 	add	r3,r2,r6
 c002f1c:	1946703a 	and	r3,r3,r5
 c002f20:	0084303a 	nor	r2,zero,r2
 c002f24:	10c4703a 	and	r2,r2,r3
 c002f28:	103ff926 	beq	r2,zero,c002f10 <strlen+0x3c>
 c002f2c:	20800007 	ldb	r2,0(r4)
 c002f30:	10000326 	beq	r2,zero,c002f40 <strlen+0x6c>
 c002f34:	21000044 	addi	r4,r4,1
 c002f38:	20800007 	ldb	r2,0(r4)
 c002f3c:	103ffd1e 	bne	r2,zero,c002f34 <strlen+0x60>
 c002f40:	2205c83a 	sub	r2,r4,r8
 c002f44:	f800283a 	ret

0c002f48 <__register_exitproc>:
 c002f48:	defffa04 	addi	sp,sp,-24
 c002f4c:	00830034 	movhi	r2,3072
 c002f50:	10930b04 	addi	r2,r2,19500
 c002f54:	dc000015 	stw	r16,0(sp)
 c002f58:	14000017 	ldw	r16,0(r2)
 c002f5c:	dd000415 	stw	r20,16(sp)
 c002f60:	2829883a 	mov	r20,r5
 c002f64:	81405217 	ldw	r5,328(r16)
 c002f68:	dcc00315 	stw	r19,12(sp)
 c002f6c:	dc800215 	stw	r18,8(sp)
 c002f70:	dc400115 	stw	r17,4(sp)
 c002f74:	dfc00515 	stw	ra,20(sp)
 c002f78:	2023883a 	mov	r17,r4
 c002f7c:	3027883a 	mov	r19,r6
 c002f80:	3825883a 	mov	r18,r7
 c002f84:	28002526 	beq	r5,zero,c00301c <__register_exitproc+0xd4>
 c002f88:	29000117 	ldw	r4,4(r5)
 c002f8c:	008007c4 	movi	r2,31
 c002f90:	11002716 	blt	r2,r4,c003030 <__register_exitproc+0xe8>
 c002f94:	8800101e 	bne	r17,zero,c002fd8 <__register_exitproc+0x90>
 c002f98:	2105883a 	add	r2,r4,r4
 c002f9c:	1085883a 	add	r2,r2,r2
 c002fa0:	20c00044 	addi	r3,r4,1
 c002fa4:	1145883a 	add	r2,r2,r5
 c002fa8:	0009883a 	mov	r4,zero
 c002fac:	15000215 	stw	r20,8(r2)
 c002fb0:	28c00115 	stw	r3,4(r5)
 c002fb4:	2005883a 	mov	r2,r4
 c002fb8:	dfc00517 	ldw	ra,20(sp)
 c002fbc:	dd000417 	ldw	r20,16(sp)
 c002fc0:	dcc00317 	ldw	r19,12(sp)
 c002fc4:	dc800217 	ldw	r18,8(sp)
 c002fc8:	dc400117 	ldw	r17,4(sp)
 c002fcc:	dc000017 	ldw	r16,0(sp)
 c002fd0:	dec00604 	addi	sp,sp,24
 c002fd4:	f800283a 	ret
 c002fd8:	29802204 	addi	r6,r5,136
 c002fdc:	00800044 	movi	r2,1
 c002fe0:	110e983a 	sll	r7,r2,r4
 c002fe4:	30c04017 	ldw	r3,256(r6)
 c002fe8:	2105883a 	add	r2,r4,r4
 c002fec:	1085883a 	add	r2,r2,r2
 c002ff0:	1185883a 	add	r2,r2,r6
 c002ff4:	19c6b03a 	or	r3,r3,r7
 c002ff8:	14802015 	stw	r18,128(r2)
 c002ffc:	14c00015 	stw	r19,0(r2)
 c003000:	00800084 	movi	r2,2
 c003004:	30c04015 	stw	r3,256(r6)
 c003008:	88bfe31e 	bne	r17,r2,c002f98 <__register_exitproc+0x50>
 c00300c:	30804117 	ldw	r2,260(r6)
 c003010:	11c4b03a 	or	r2,r2,r7
 c003014:	30804115 	stw	r2,260(r6)
 c003018:	003fdf06 	br	c002f98 <__register_exitproc+0x50>
 c00301c:	00830034 	movhi	r2,3072
 c003020:	10935504 	addi	r2,r2,19796
 c003024:	100b883a 	mov	r5,r2
 c003028:	80805215 	stw	r2,328(r16)
 c00302c:	003fd606 	br	c002f88 <__register_exitproc+0x40>
 c003030:	00800034 	movhi	r2,0
 c003034:	10800004 	addi	r2,r2,0
 c003038:	1000021e 	bne	r2,zero,c003044 <__register_exitproc+0xfc>
 c00303c:	013fffc4 	movi	r4,-1
 c003040:	003fdc06 	br	c002fb4 <__register_exitproc+0x6c>
 c003044:	01006404 	movi	r4,400
 c003048:	103ee83a 	callr	r2
 c00304c:	1007883a 	mov	r3,r2
 c003050:	103ffa26 	beq	r2,zero,c00303c <__register_exitproc+0xf4>
 c003054:	80805217 	ldw	r2,328(r16)
 c003058:	180b883a 	mov	r5,r3
 c00305c:	18000115 	stw	zero,4(r3)
 c003060:	18800015 	stw	r2,0(r3)
 c003064:	80c05215 	stw	r3,328(r16)
 c003068:	18006215 	stw	zero,392(r3)
 c00306c:	18006315 	stw	zero,396(r3)
 c003070:	0009883a 	mov	r4,zero
 c003074:	883fc826 	beq	r17,zero,c002f98 <__register_exitproc+0x50>
 c003078:	003fd706 	br	c002fd8 <__register_exitproc+0x90>

0c00307c <register_fini>:
 c00307c:	f800283a 	ret

0c003080 <__call_exitprocs>:
 c003080:	00830034 	movhi	r2,3072
 c003084:	10930b04 	addi	r2,r2,19500
 c003088:	10800017 	ldw	r2,0(r2)
 c00308c:	defff304 	addi	sp,sp,-52
 c003090:	df000b15 	stw	fp,44(sp)
 c003094:	d8800115 	stw	r2,4(sp)
 c003098:	00800034 	movhi	r2,0
 c00309c:	10800004 	addi	r2,r2,0
 c0030a0:	1005003a 	cmpeq	r2,r2,zero
 c0030a4:	d8800215 	stw	r2,8(sp)
 c0030a8:	d8800117 	ldw	r2,4(sp)
 c0030ac:	dd400815 	stw	r21,32(sp)
 c0030b0:	dd000715 	stw	r20,28(sp)
 c0030b4:	10805204 	addi	r2,r2,328
 c0030b8:	dfc00c15 	stw	ra,48(sp)
 c0030bc:	ddc00a15 	stw	r23,40(sp)
 c0030c0:	dd800915 	stw	r22,36(sp)
 c0030c4:	dcc00615 	stw	r19,24(sp)
 c0030c8:	dc800515 	stw	r18,20(sp)
 c0030cc:	dc400415 	stw	r17,16(sp)
 c0030d0:	dc000315 	stw	r16,12(sp)
 c0030d4:	282b883a 	mov	r21,r5
 c0030d8:	2039883a 	mov	fp,r4
 c0030dc:	d8800015 	stw	r2,0(sp)
 c0030e0:	2829003a 	cmpeq	r20,r5,zero
 c0030e4:	d8800117 	ldw	r2,4(sp)
 c0030e8:	14405217 	ldw	r17,328(r2)
 c0030ec:	88001026 	beq	r17,zero,c003130 <__call_exitprocs+0xb0>
 c0030f0:	ddc00017 	ldw	r23,0(sp)
 c0030f4:	88800117 	ldw	r2,4(r17)
 c0030f8:	8c802204 	addi	r18,r17,136
 c0030fc:	143fffc4 	addi	r16,r2,-1
 c003100:	80000916 	blt	r16,zero,c003128 <__call_exitprocs+0xa8>
 c003104:	05bfffc4 	movi	r22,-1
 c003108:	a000151e 	bne	r20,zero,c003160 <__call_exitprocs+0xe0>
 c00310c:	8409883a 	add	r4,r16,r16
 c003110:	2105883a 	add	r2,r4,r4
 c003114:	1485883a 	add	r2,r2,r18
 c003118:	10c02017 	ldw	r3,128(r2)
 c00311c:	a8c01126 	beq	r21,r3,c003164 <__call_exitprocs+0xe4>
 c003120:	843fffc4 	addi	r16,r16,-1
 c003124:	85bff81e 	bne	r16,r22,c003108 <__call_exitprocs+0x88>
 c003128:	d8800217 	ldw	r2,8(sp)
 c00312c:	10003126 	beq	r2,zero,c0031f4 <__call_exitprocs+0x174>
 c003130:	dfc00c17 	ldw	ra,48(sp)
 c003134:	df000b17 	ldw	fp,44(sp)
 c003138:	ddc00a17 	ldw	r23,40(sp)
 c00313c:	dd800917 	ldw	r22,36(sp)
 c003140:	dd400817 	ldw	r21,32(sp)
 c003144:	dd000717 	ldw	r20,28(sp)
 c003148:	dcc00617 	ldw	r19,24(sp)
 c00314c:	dc800517 	ldw	r18,20(sp)
 c003150:	dc400417 	ldw	r17,16(sp)
 c003154:	dc000317 	ldw	r16,12(sp)
 c003158:	dec00d04 	addi	sp,sp,52
 c00315c:	f800283a 	ret
 c003160:	8409883a 	add	r4,r16,r16
 c003164:	88c00117 	ldw	r3,4(r17)
 c003168:	2105883a 	add	r2,r4,r4
 c00316c:	1445883a 	add	r2,r2,r17
 c003170:	18ffffc4 	addi	r3,r3,-1
 c003174:	11800217 	ldw	r6,8(r2)
 c003178:	1c001526 	beq	r3,r16,c0031d0 <__call_exitprocs+0x150>
 c00317c:	10000215 	stw	zero,8(r2)
 c003180:	303fe726 	beq	r6,zero,c003120 <__call_exitprocs+0xa0>
 c003184:	00c00044 	movi	r3,1
 c003188:	1c06983a 	sll	r3,r3,r16
 c00318c:	90804017 	ldw	r2,256(r18)
 c003190:	8cc00117 	ldw	r19,4(r17)
 c003194:	1884703a 	and	r2,r3,r2
 c003198:	10001426 	beq	r2,zero,c0031ec <__call_exitprocs+0x16c>
 c00319c:	90804117 	ldw	r2,260(r18)
 c0031a0:	1884703a 	and	r2,r3,r2
 c0031a4:	10000c1e 	bne	r2,zero,c0031d8 <__call_exitprocs+0x158>
 c0031a8:	2105883a 	add	r2,r4,r4
 c0031ac:	1485883a 	add	r2,r2,r18
 c0031b0:	11400017 	ldw	r5,0(r2)
 c0031b4:	e009883a 	mov	r4,fp
 c0031b8:	303ee83a 	callr	r6
 c0031bc:	88800117 	ldw	r2,4(r17)
 c0031c0:	98bfc81e 	bne	r19,r2,c0030e4 <__call_exitprocs+0x64>
 c0031c4:	b8800017 	ldw	r2,0(r23)
 c0031c8:	147fd526 	beq	r2,r17,c003120 <__call_exitprocs+0xa0>
 c0031cc:	003fc506 	br	c0030e4 <__call_exitprocs+0x64>
 c0031d0:	8c000115 	stw	r16,4(r17)
 c0031d4:	003fea06 	br	c003180 <__call_exitprocs+0x100>
 c0031d8:	2105883a 	add	r2,r4,r4
 c0031dc:	1485883a 	add	r2,r2,r18
 c0031e0:	11000017 	ldw	r4,0(r2)
 c0031e4:	303ee83a 	callr	r6
 c0031e8:	003ff406 	br	c0031bc <__call_exitprocs+0x13c>
 c0031ec:	303ee83a 	callr	r6
 c0031f0:	003ff206 	br	c0031bc <__call_exitprocs+0x13c>
 c0031f4:	88800117 	ldw	r2,4(r17)
 c0031f8:	1000081e 	bne	r2,zero,c00321c <__call_exitprocs+0x19c>
 c0031fc:	89000017 	ldw	r4,0(r17)
 c003200:	20000726 	beq	r4,zero,c003220 <__call_exitprocs+0x1a0>
 c003204:	b9000015 	stw	r4,0(r23)
 c003208:	8809883a 	mov	r4,r17
 c00320c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 c003210:	bc400017 	ldw	r17,0(r23)
 c003214:	883fb71e 	bne	r17,zero,c0030f4 <__call_exitprocs+0x74>
 c003218:	003fc506 	br	c003130 <__call_exitprocs+0xb0>
 c00321c:	89000017 	ldw	r4,0(r17)
 c003220:	882f883a 	mov	r23,r17
 c003224:	2023883a 	mov	r17,r4
 c003228:	883fb21e 	bne	r17,zero,c0030f4 <__call_exitprocs+0x74>
 c00322c:	003fc006 	br	c003130 <__call_exitprocs+0xb0>

0c003230 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 c003230:	defffd04 	addi	sp,sp,-12
 c003234:	df000215 	stw	fp,8(sp)
 c003238:	df000204 	addi	fp,sp,8
 c00323c:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 c003240:	e0bfff17 	ldw	r2,-4(fp)
 c003244:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 c003248:	e0bffe17 	ldw	r2,-8(fp)
 c00324c:	1005003a 	cmpeq	r2,r2,zero
 c003250:	1000021e 	bne	r2,zero,c00325c <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 c003254:	002af070 	cmpltui	zero,zero,43969
 c003258:	00000106 	br	c003260 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 c00325c:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 c003260:	e037883a 	mov	sp,fp
 c003264:	df000017 	ldw	fp,0(sp)
 c003268:	dec00104 	addi	sp,sp,4
 c00326c:	f800283a 	ret

0c003270 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 c003270:	defffd04 	addi	sp,sp,-12
 c003274:	dfc00215 	stw	ra,8(sp)
 c003278:	df000115 	stw	fp,4(sp)
 c00327c:	df000104 	addi	fp,sp,4
 c003280:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 c003284:	e13fff17 	ldw	r4,-4(fp)
 c003288:	c0032300 	call	c003230 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 c00328c:	003fff06 	br	c00328c <_exit+0x1c>
 c003290:	0c00307c 	xorhi	r16,at,193
